// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/stellarstation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stellarstation.Api.V1 {

  /// <summary>Holder for reflection information generated from stellarstation/api/v1/stellarstation.proto</summary>
  public static partial class StellarstationReflection {

    #region Descriptor
    /// <summary>File descriptor for stellarstation/api/v1/stellarstation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StellarstationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipzdGVsbGFyc3RhdGlvbi9hcGkvdjEvc3RlbGxhcnN0YXRpb24ucHJvdG8S",
            "FXN0ZWxsYXJzdGF0aW9uLmFwaS52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVz",
            "dGFtcC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGidz",
            "dGVsbGFyc3RhdGlvbi9hcGkvdjEvb3JiaXQvb3JiaXQucHJvdG8aJ3N0ZWxs",
            "YXJzdGF0aW9uL2FwaS92MS9yYWRpby9yYWRpby5wcm90bxolc3RlbGxhcnN0",
            "YXRpb24vYXBpL3YxL3RyYW5zcG9ydC5wcm90byKMBAoWU2F0ZWxsaXRlU3Ry",
            "ZWFtUmVxdWVzdBIUCgxzYXRlbGxpdGVfaWQYASABKAkSEQoJc3RyZWFtX2lk",
            "GAIgASgJEhUKDWVuYWJsZV9ldmVudHMYBSABKAgSEgoKcmVxdWVzdF9pZBgG",
            "IAEoCRJeCh9zZW5kX3NhdGVsbGl0ZV9jb21tYW5kc19yZXF1ZXN0GAMgASgL",
            "MjMuc3RlbGxhcnN0YXRpb24uYXBpLnYxLlNlbmRTYXRlbGxpdGVDb21tYW5k",
            "c1JlcXVlc3RIABJoCiRncm91bmRfc3RhdGlvbl9jb25maWd1cmF0aW9uX3Jl",
            "cXVlc3QYByABKAsyOC5zdGVsbGFyc3RhdGlvbi5hcGkudjEuR3JvdW5kU3Rh",
            "dGlvbkNvbmZpZ3VyYXRpb25SZXF1ZXN0SAASTAoWdGVsZW1ldHJ5X3JlY2Vp",
            "dmVkX2FjaxgJIAEoCzIqLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5SZWNlaXZl",
            "VGVsZW1ldHJ5QWNrSAASOAoQYWNjZXB0ZWRfZnJhbWluZxgEIAMoDjIeLnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5GcmFtaW5nEiQKHHJlc3VtZV9zdHJlYW1f",
            "bWVzc2FnZV9hY2tfaWQYCCABKAkSGwoTZW5hYmxlX2Zsb3dfY29udHJvbBgK",
            "IAEoCEIJCgdSZXF1ZXN0IkcKHFNlbmRTYXRlbGxpdGVDb21tYW5kc1JlcXVl",
            "c3QSDwoHY29tbWFuZBgCIAMoDBIWCg5jaGFubmVsX3NldF9pZBgDIAEoCSLj",
            "AQohR3JvdW5kU3RhdGlvbkNvbmZpZ3VyYXRpb25SZXF1ZXN0EmEKIXRyYW5z",
            "bWl0dGVyX2NvbmZpZ3VyYXRpb25fcmVxdWVzdBgBIAEoCzI2LnN0ZWxsYXJz",
            "dGF0aW9uLmFwaS52MS5UcmFuc21pdHRlckNvbmZpZ3VyYXRpb25SZXF1ZXN0",
            "ElsKHnJlY2VpdmVyX2NvbmZpZ3VyYXRpb25fcmVxdWVzdBgCIAEoCzIzLnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5SZWNlaXZlckNvbmZpZ3VyYXRpb25SZXF1",
            "ZXN0ImUKE1JlY2VpdmVUZWxlbWV0cnlBY2sSFgoObWVzc2FnZV9hY2tfaWQY",
            "ASABKAkSNgoScmVjZWl2ZWRfdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcCKrAgofVHJhbnNtaXR0ZXJDb25maWd1cmF0aW9u",
            "UmVxdWVzdBIyCg5lbmFibGVfY2FycmllchgBIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSOAoUZW5hYmxlX2lmX21vZHVsYXRpb24YAiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjcKE2VuYWJsZV9pZGxlX3Bh",
            "dHRlcm4YAyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjMKD2Vu",
            "YWJsZV9pZl9zd2VlcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSLAoHYml0cmF0ZRgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZh",
            "bHVlIkwKHFJlY2VpdmVyQ29uZmlndXJhdGlvblJlcXVlc3QSLAoHYml0cmF0",
            "ZRgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlIssBChdTYXRl",
            "bGxpdGVTdHJlYW1SZXNwb25zZRIRCglzdHJlYW1faWQYASABKAkSVQoacmVj",
            "ZWl2ZV90ZWxlbWV0cnlfcmVzcG9uc2UYAiABKAsyLy5zdGVsbGFyc3RhdGlv",
            "bi5hcGkudjEuUmVjZWl2ZVRlbGVtZXRyeVJlc3BvbnNlSAASOgoMc3RyZWFt",
            "X2V2ZW50GAMgASgLMiIuc3RlbGxhcnN0YXRpb24uYXBpLnYxLlN0cmVhbUV2",
            "ZW50SABCCgoIUmVzcG9uc2UieAoYUmVjZWl2ZVRlbGVtZXRyeVJlc3BvbnNl",
            "EjMKCXRlbGVtZXRyeRgBIAMoCzIgLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5U",
            "ZWxlbWV0cnkSDwoHcGxhbl9pZBgCIAEoCRIWCg5tZXNzYWdlX2Fja19pZBgD",
            "IAEoCSIkChFDYW5jZWxQbGFuUmVxdWVzdBIPCgdwbGFuX2lkGAEgASgJIhQK",
            "EkNhbmNlbFBsYW5SZXNwb25zZSI6CiJMaXN0VXBjb21pbmdBdmFpbGFibGVQ",
            "YXNzZXNSZXF1ZXN0EhQKDHNhdGVsbGl0ZV9pZBgBIAEoCSJQCiNMaXN0VXBj",
            "b21pbmdBdmFpbGFibGVQYXNzZXNSZXNwb25zZRIpCgRwYXNzGAEgAygLMhsu",
            "c3RlbGxhcnN0YXRpb24uYXBpLnYxLlBhc3MiLwoSUmVzZXJ2ZVBhc3NSZXF1",
            "ZXN0EhkKEXJlc2VydmF0aW9uX3Rva2VuGAEgASgJIkAKE1Jlc2VydmVQYXNz",
            "UmVzcG9uc2USKQoEcGxhbhgBIAEoCzIbLnN0ZWxsYXJzdGF0aW9uLmFwaS52",
            "MS5QbGFuIocBChBMaXN0UGxhbnNSZXF1ZXN0EhQKDHNhdGVsbGl0ZV9pZBgB",
            "IAEoCRItCglhb3NfYWZ0ZXIYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi4KCmFvc19iZWZvcmUYAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wIj4KEUxpc3RQbGFuc1Jlc3BvbnNlEikKBHBsYW4YASADKAsy",
            "Gy5zdGVsbGFyc3RhdGlvbi5hcGkudjEuUGxhbiK2AQoKQ2hhbm5lbFNldBIK",
            "CgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEkUKBnVwbGluaxgDIAEoCzI1LnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5yYWRpby5SYWRpb0RldmljZUNvbmZpZ3Vy",
            "YXRpb24SRwoIZG93bmxpbmsYBCABKAsyNS5zdGVsbGFyc3RhdGlvbi5hcGku",
            "djEucmFkaW8uUmFkaW9EZXZpY2VDb25maWd1cmF0aW9uIqgECgRQYXNzEiwK",
            "CGFvc190aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIs",
            "Cghsb3NfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "HwoXZ3JvdW5kX3N0YXRpb25fbGF0aXR1ZGUYBCABKAESIAoYZ3JvdW5kX3N0",
            "YXRpb25fbG9uZ2l0dWRlGAUgASgBEigKIGdyb3VuZF9zdGF0aW9uX29yZ2Fu",
            "aXphdGlvbl9uYW1lGAwgASgJEhkKEWdyb3VuZF9zdGF0aW9uX2lkGA0gASgJ",
            "EiMKG2dyb3VuZF9zdGF0aW9uX2NvdW50cnlfY29kZRgGIAEoCRIdChVtYXhf",
            "ZWxldmF0aW9uX2RlZ3JlZXMYByABKAESNgoSbWF4X2VsZXZhdGlvbl90aW1l",
            "GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJGChFjaGFubmVs",
            "X3NldF90b2tlbhgLIAMoCzIrLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5QYXNz",
            "LkNoYW5uZWxTZXRUb2tlbhp4Cg9DaGFubmVsU2V0VG9rZW4SNgoLY2hhbm5l",
            "bF9zZXQYASABKAsyIS5zdGVsbGFyc3RhdGlvbi5hcGkudjEuQ2hhbm5lbFNl",
            "dBIZChFyZXNlcnZhdGlvbl90b2tlbhgCIAEoCRISCgp1bml0X3ByaWNlGAMg",
            "ASgBIpkBChFUZWxlbWV0cnlNZXRhZGF0YRILCgN1cmwYASABKAkSRAoJZGF0",
            "YV90eXBlGAIgASgOMjEuc3RlbGxhcnN0YXRpb24uYXBpLnYxLlRlbGVtZXRy",
            "eU1ldGFkYXRhLkRhdGFUeXBlIjEKCERhdGFUeXBlEgcKA1JBVxAAEg8KC0RF",
            "TU9EVUxBVEVEEAESCwoHREVDT0RFRBACIrEGCgRQbGFuEgoKAmlkGAEgASgJ",
            "EhQKDHNhdGVsbGl0ZV9pZBgCIAEoCRIjChtzYXRlbGxpdGVfb3JnYW5pemF0",
            "aW9uX25hbWUYESABKAkSMgoGc3RhdHVzGAMgASgOMiIuc3RlbGxhcnN0YXRp",
            "b24uYXBpLnYxLlBsYW4uU3RhdHVzEi4KCnN0YXJ0X3RpbWUYDiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGA8gASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghhb3NfdGltZRgEIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIbG9zX3RpbWUYBSABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEh8KF2dyb3VuZF9zdGF0aW9u",
            "X2xhdGl0dWRlGAYgASgBEiAKGGdyb3VuZF9zdGF0aW9uX2xvbmdpdHVkZRgH",
            "IAEoARIjChtncm91bmRfc3RhdGlvbl9jb3VudHJ5X2NvZGUYCCABKAkSKAog",
            "Z3JvdW5kX3N0YXRpb25fb3JnYW5pemF0aW9uX25hbWUYEiABKAkSGQoRZ3Jv",
            "dW5kX3N0YXRpb25faWQYFCABKAkSHQoVbWF4X2VsZXZhdGlvbl9kZWdyZWVz",
            "GAkgASgBEjYKEm1heF9lbGV2YXRpb25fdGltZRgKIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASRAoSdGVsZW1ldHJ5X21ldGFkYXRhGA0gAygL",
            "Miguc3RlbGxhcnN0YXRpb24uYXBpLnYxLlRlbGVtZXRyeU1ldGFkYXRhEjYK",
            "C2NoYW5uZWxfc2V0GBAgASgLMiEuc3RlbGxhcnN0YXRpb24uYXBpLnYxLkNo",
            "YW5uZWxTZXQSEgoKdW5pdF9wcmljZRgTIAEoASJeCgZTdGF0dXMSDAoIUkVT",
            "RVJWRUQQABINCglFWEVDVVRJTkcQARINCglTVUNDRUVERUQQAhIKCgZGQUlM",
            "RUQQAxIMCghDQU5DRUxFRBAEEg4KClBST0NFU1NJTkcQBSJUCg1BZGRUbGVS",
            "ZXF1ZXN0EhQKDHNhdGVsbGl0ZV9pZBgBIAEoCRItCgN0bGUYAiABKAsyIC5z",
            "dGVsbGFyc3RhdGlvbi5hcGkudjEub3JiaXQuVGxlIhAKDkFkZFRsZVJlc3Bv",
            "bnNlIiUKDUdldFRsZVJlcXVlc3QSFAoMc2F0ZWxsaXRlX2lkGAEgASgJIj8K",
            "DkdldFRsZVJlc3BvbnNlEi0KA3RsZRgBIAEoCzIgLnN0ZWxsYXJzdGF0aW9u",
            "LmFwaS52MS5vcmJpdC5UbGUinAEKE1NldFRsZVNvdXJjZVJlcXVlc3QSFAoM",
            "c2F0ZWxsaXRlX2lkGAEgASgJEkEKBnNvdXJjZRgCIAEoDjIxLnN0ZWxsYXJz",
            "dGF0aW9uLmFwaS52MS5TZXRUbGVTb3VyY2VSZXF1ZXN0LlNvdXJjZSIsCgZT",
            "b3VyY2USCwoHVU5LTk9XThAAEgkKBU5PUkFEEAESCgoGTUFOVUFMEAIiFgoU",
            "U2V0VGxlU291cmNlUmVzcG9uc2Uy6AYKFVN0ZWxsYXJTdGF0aW9uU2Vydmlj",
            "ZRJeCglMaXN0UGxhbnMSJy5zdGVsbGFyc3RhdGlvbi5hcGkudjEuTGlzdFBs",
            "YW5zUmVxdWVzdBooLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5MaXN0UGxhbnNS",
            "ZXNwb25zZRJhCgpDYW5jZWxQbGFuEiguc3RlbGxhcnN0YXRpb24uYXBpLnYx",
            "LkNhbmNlbFBsYW5SZXF1ZXN0Gikuc3RlbGxhcnN0YXRpb24uYXBpLnYxLkNh",
            "bmNlbFBsYW5SZXNwb25zZRKUAQobTGlzdFVwY29taW5nQXZhaWxhYmxlUGFz",
            "c2VzEjkuc3RlbGxhcnN0YXRpb24uYXBpLnYxLkxpc3RVcGNvbWluZ0F2YWls",
            "YWJsZVBhc3Nlc1JlcXVlc3QaOi5zdGVsbGFyc3RhdGlvbi5hcGkudjEuTGlz",
            "dFVwY29taW5nQXZhaWxhYmxlUGFzc2VzUmVzcG9uc2USeAoTT3BlblNhdGVs",
            "bGl0ZVN0cmVhbRItLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5TYXRlbGxpdGVT",
            "dHJlYW1SZXF1ZXN0Gi4uc3RlbGxhcnN0YXRpb24uYXBpLnYxLlNhdGVsbGl0",
            "ZVN0cmVhbVJlc3BvbnNlKAEwARJkCgtSZXNlcnZlUGFzcxIpLnN0ZWxsYXJz",
            "dGF0aW9uLmFwaS52MS5SZXNlcnZlUGFzc1JlcXVlc3QaKi5zdGVsbGFyc3Rh",
            "dGlvbi5hcGkudjEuUmVzZXJ2ZVBhc3NSZXNwb25zZRJVCgZBZGRUbGUSJC5z",
            "dGVsbGFyc3RhdGlvbi5hcGkudjEuQWRkVGxlUmVxdWVzdBolLnN0ZWxsYXJz",
            "dGF0aW9uLmFwaS52MS5BZGRUbGVSZXNwb25zZRJVCgZHZXRUbGUSJC5zdGVs",
            "bGFyc3RhdGlvbi5hcGkudjEuR2V0VGxlUmVxdWVzdBolLnN0ZWxsYXJzdGF0",
            "aW9uLmFwaS52MS5HZXRUbGVSZXNwb25zZRJnCgxTZXRUbGVTb3VyY2USKi5z",
            "dGVsbGFyc3RhdGlvbi5hcGkudjEuU2V0VGxlU291cmNlUmVxdWVzdBorLnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5TZXRUbGVTb3VyY2VSZXNwb25zZUJmChlj",
            "b20uc3RlbGxhcnN0YXRpb24uYXBpLnYxQhNTdGVsbGFyc3RhdGlvblByb3Rv",
            "UAFaMmdpdGh1Yi5jb20vaW5mb3N0ZWxsYXJpbmMvZ28tc3RlbGxhcnN0YXRp",
            "b24vYXBpL3YxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Stellarstation.Api.V1.Orbit.OrbitReflection.Descriptor, global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor, global::Stellarstation.Api.V1.TransportReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.SatelliteStreamRequest), global::Stellarstation.Api.V1.SatelliteStreamRequest.Parser, new[]{ "SatelliteId", "StreamId", "EnableEvents", "RequestId", "SendSatelliteCommandsRequest", "GroundStationConfigurationRequest", "TelemetryReceivedAck", "AcceptedFraming", "ResumeStreamMessageAckId", "EnableFlowControl" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.SendSatelliteCommandsRequest), global::Stellarstation.Api.V1.SendSatelliteCommandsRequest.Parser, new[]{ "Command", "ChannelSetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.GroundStationConfigurationRequest), global::Stellarstation.Api.V1.GroundStationConfigurationRequest.Parser, new[]{ "TransmitterConfigurationRequest", "ReceiverConfigurationRequest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ReceiveTelemetryAck), global::Stellarstation.Api.V1.ReceiveTelemetryAck.Parser, new[]{ "MessageAckId", "ReceivedTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.TransmitterConfigurationRequest), global::Stellarstation.Api.V1.TransmitterConfigurationRequest.Parser, new[]{ "EnableCarrier", "EnableIfModulation", "EnableIdlePattern", "EnableIfSweep", "Bitrate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ReceiverConfigurationRequest), global::Stellarstation.Api.V1.ReceiverConfigurationRequest.Parser, new[]{ "Bitrate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.SatelliteStreamResponse), global::Stellarstation.Api.V1.SatelliteStreamResponse.Parser, new[]{ "StreamId", "ReceiveTelemetryResponse", "StreamEvent" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ReceiveTelemetryResponse), global::Stellarstation.Api.V1.ReceiveTelemetryResponse.Parser, new[]{ "Telemetry", "PlanId", "MessageAckId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.CancelPlanRequest), global::Stellarstation.Api.V1.CancelPlanRequest.Parser, new[]{ "PlanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.CancelPlanResponse), global::Stellarstation.Api.V1.CancelPlanResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ListUpcomingAvailablePassesRequest), global::Stellarstation.Api.V1.ListUpcomingAvailablePassesRequest.Parser, new[]{ "SatelliteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ListUpcomingAvailablePassesResponse), global::Stellarstation.Api.V1.ListUpcomingAvailablePassesResponse.Parser, new[]{ "Pass" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ReservePassRequest), global::Stellarstation.Api.V1.ReservePassRequest.Parser, new[]{ "ReservationToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ReservePassResponse), global::Stellarstation.Api.V1.ReservePassResponse.Parser, new[]{ "Plan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ListPlansRequest), global::Stellarstation.Api.V1.ListPlansRequest.Parser, new[]{ "SatelliteId", "AosAfter", "AosBefore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ListPlansResponse), global::Stellarstation.Api.V1.ListPlansResponse.Parser, new[]{ "Plan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.ChannelSet), global::Stellarstation.Api.V1.ChannelSet.Parser, new[]{ "Id", "Name", "Uplink", "Downlink" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Pass), global::Stellarstation.Api.V1.Pass.Parser, new[]{ "AosTime", "LosTime", "GroundStationLatitude", "GroundStationLongitude", "GroundStationOrganizationName", "GroundStationId", "GroundStationCountryCode", "MaxElevationDegrees", "MaxElevationTime", "ChannelSetToken" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken), global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken.Parser, new[]{ "ChannelSet", "ReservationToken", "UnitPrice" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.TelemetryMetadata), global::Stellarstation.Api.V1.TelemetryMetadata.Parser, new[]{ "Url", "DataType" }, null, new[]{ typeof(global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Plan), global::Stellarstation.Api.V1.Plan.Parser, new[]{ "Id", "SatelliteId", "SatelliteOrganizationName", "Status", "StartTime", "EndTime", "AosTime", "LosTime", "GroundStationLatitude", "GroundStationLongitude", "GroundStationCountryCode", "GroundStationOrganizationName", "GroundStationId", "MaxElevationDegrees", "MaxElevationTime", "TelemetryMetadata", "ChannelSet", "UnitPrice" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Plan.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.AddTleRequest), global::Stellarstation.Api.V1.AddTleRequest.Parser, new[]{ "SatelliteId", "Tle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.AddTleResponse), global::Stellarstation.Api.V1.AddTleResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.GetTleRequest), global::Stellarstation.Api.V1.GetTleRequest.Parser, new[]{ "SatelliteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.GetTleResponse), global::Stellarstation.Api.V1.GetTleResponse.Parser, new[]{ "Tle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.SetTleSourceRequest), global::Stellarstation.Api.V1.SetTleSourceRequest.Parser, new[]{ "SatelliteId", "Source" }, null, new[]{ typeof(global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.SetTleSourceResponse), global::Stellarstation.Api.V1.SetTleSourceResponse.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request for the `OpenSatelliteStream` method.
  ///
  /// Next ID: 8
  /// </summary>
  public sealed partial class SatelliteStreamRequest : pb::IMessage<SatelliteStreamRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SatelliteStreamRequest> _parser = new pb::MessageParser<SatelliteStreamRequest>(() => new SatelliteStreamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SatelliteStreamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamRequest(SatelliteStreamRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      streamId_ = other.streamId_;
      enableEvents_ = other.enableEvents_;
      requestId_ = other.requestId_;
      acceptedFraming_ = other.acceptedFraming_.Clone();
      resumeStreamMessageAckId_ = other.resumeStreamMessageAckId_;
      enableFlowControl_ = other.enableFlowControl_;
      switch (other.RequestCase) {
        case RequestOneofCase.SendSatelliteCommandsRequest:
          SendSatelliteCommandsRequest = other.SendSatelliteCommandsRequest.Clone();
          break;
        case RequestOneofCase.GroundStationConfigurationRequest:
          GroundStationConfigurationRequest = other.GroundStationConfigurationRequest.Clone();
          break;
        case RequestOneofCase.TelemetryReceivedAck:
          TelemetryReceivedAck = other.TelemetryReceivedAck.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamRequest Clone() {
      return new SatelliteStreamRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite to open a stream with. The ID of a satellite can be found on the
    /// StellarStation Console page for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 2;
    private string streamId_ = "";
    /// <summary>
    /// The `SatelliteStreamResponse.stream_id` from a previously opened stream to resume. If the
    /// specified stream has already expired or been closed, the stream is closed with a `ABORTED`
    /// error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enable_events" field.</summary>
    public const int EnableEventsFieldNumber = 5;
    private bool enableEvents_;
    /// <summary>
    /// Whether monitoring events should be returned by the stream in
    /// `SatelliteStreamResponse.stream_event`. If set in the first request of the stream, events of
    /// type `StreamEvent` will be returned throughout the lifetime of the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableEvents {
      get { return enableEvents_; }
      set {
        enableEvents_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 6;
    private string requestId_ = "";
    /// <summary>
    /// A unique ID identifying this request. If `enable_events` is true and this is filled, events
    /// returned in `SatelliteStreamResponse.stream_event` that correspond to this request will have
    /// this value copied into `StreamEvent.request_id` for correlation. The API will treat this as an
    /// opaque identifier which can be set to any value, e.g., to the same value as the request ID or
    /// command number in a downstream system. For simple cases, it is often simplest to set this to a
    /// standard UUID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_satellite_commands_request" field.</summary>
    public const int SendSatelliteCommandsRequestFieldNumber = 3;
    /// <summary>
    /// A request to send commands to the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.SendSatelliteCommandsRequest SendSatelliteCommandsRequest {
      get { return requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest ? (global::Stellarstation.Api.V1.SendSatelliteCommandsRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SendSatelliteCommandsRequest;
      }
    }

    /// <summary>Field number for the "ground_station_configuration_request" field.</summary>
    public const int GroundStationConfigurationRequestFieldNumber = 7;
    /// <summary>
    /// A request to modify a configuration of a ground station.
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.GroundStationConfigurationRequest GroundStationConfigurationRequest {
      get { return requestCase_ == RequestOneofCase.GroundStationConfigurationRequest ? (global::Stellarstation.Api.V1.GroundStationConfigurationRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.GroundStationConfigurationRequest;
      }
    }

    /// <summary>Field number for the "telemetry_received_ack" field.</summary>
    public const int TelemetryReceivedAckFieldNumber = 9;
    /// <summary>
    /// An ack message to respond to each ReceiveTelemetryResponse when `enable_flow_control` is true.
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.ReceiveTelemetryAck TelemetryReceivedAck {
      get { return requestCase_ == RequestOneofCase.TelemetryReceivedAck ? (global::Stellarstation.Api.V1.ReceiveTelemetryAck) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TelemetryReceivedAck;
      }
    }

    /// <summary>Field number for the "accepted_framing" field.</summary>
    public const int AcceptedFramingFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.Framing> _repeated_acceptedFraming_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Stellarstation.Api.V1.Framing) x);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.Framing> acceptedFraming_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.Framing>();
    /// <summary>
    /// The `Framing` types to accept, for satellites that have been configured for multiple framings
    /// (e.g., IQ + AX25). If empty, all framings produced by the satellite will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.Framing> AcceptedFraming {
      get { return acceptedFraming_; }
    }

    /// <summary>Field number for the "resume_stream_message_ack_id" field.</summary>
    public const int ResumeStreamMessageAckIdFieldNumber = 8;
    private string resumeStreamMessageAckId_ = "";
    /// <summary>
    /// Optional. The `ReceiveTelemetryResponse.message_ack_id` of the most recently received telemetry.
    /// This may be specified in attempt to resume streaming after a connection or application error. If
    /// specified, the server will attempt to resume transfer assuming the provided value is that of the
    /// most recent Telemetry received &amp; processed by the client. If not specified (or if provided value
    /// is invalid), server will resume streaming from the most recent telemetry message sent by the server
    /// which may or may not have been received by the client.
    ///
    /// This feature is only available if enable_flow_control is true.
    /// This feature may not be available for Out-of-order-allowed-satellites.
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResumeStreamMessageAckId {
      get { return resumeStreamMessageAckId_; }
      set {
        resumeStreamMessageAckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enable_flow_control" field.</summary>
    public const int EnableFlowControlFieldNumber = 10;
    private bool enableFlowControl_;
    /// <summary>
    /// Whether flow control is enabled on the client side. If set to true, client must respond to each
    /// ReceiveTelemetryResponse received with a corresponding ReceiveTelemetryAck message. 
    /// 
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableFlowControl {
      get { return enableFlowControl_; }
      set {
        enableFlowControl_ = value;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "Request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      SendSatelliteCommandsRequest = 3,
      GroundStationConfigurationRequest = 7,
      TelemetryReceivedAck = 9,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SatelliteStreamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SatelliteStreamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      if (StreamId != other.StreamId) return false;
      if (EnableEvents != other.EnableEvents) return false;
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(SendSatelliteCommandsRequest, other.SendSatelliteCommandsRequest)) return false;
      if (!object.Equals(GroundStationConfigurationRequest, other.GroundStationConfigurationRequest)) return false;
      if (!object.Equals(TelemetryReceivedAck, other.TelemetryReceivedAck)) return false;
      if(!acceptedFraming_.Equals(other.acceptedFraming_)) return false;
      if (ResumeStreamMessageAckId != other.ResumeStreamMessageAckId) return false;
      if (EnableFlowControl != other.EnableFlowControl) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (EnableEvents != false) hash ^= EnableEvents.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) hash ^= SendSatelliteCommandsRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) hash ^= GroundStationConfigurationRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) hash ^= TelemetryReceivedAck.GetHashCode();
      hash ^= acceptedFraming_.GetHashCode();
      if (ResumeStreamMessageAckId.Length != 0) hash ^= ResumeStreamMessageAckId.GetHashCode();
      if (EnableFlowControl != false) hash ^= EnableFlowControl.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (StreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StreamId);
      }
      if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(SendSatelliteCommandsRequest);
      }
      acceptedFraming_.WriteTo(output, _repeated_acceptedFraming_codec);
      if (EnableEvents != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableEvents);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RequestId);
      }
      if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) {
        output.WriteRawTag(58);
        output.WriteMessage(GroundStationConfigurationRequest);
      }
      if (ResumeStreamMessageAckId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ResumeStreamMessageAckId);
      }
      if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) {
        output.WriteRawTag(74);
        output.WriteMessage(TelemetryReceivedAck);
      }
      if (EnableFlowControl != false) {
        output.WriteRawTag(80);
        output.WriteBool(EnableFlowControl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (StreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StreamId);
      }
      if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(SendSatelliteCommandsRequest);
      }
      acceptedFraming_.WriteTo(ref output, _repeated_acceptedFraming_codec);
      if (EnableEvents != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableEvents);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RequestId);
      }
      if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) {
        output.WriteRawTag(58);
        output.WriteMessage(GroundStationConfigurationRequest);
      }
      if (ResumeStreamMessageAckId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ResumeStreamMessageAckId);
      }
      if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) {
        output.WriteRawTag(74);
        output.WriteMessage(TelemetryReceivedAck);
      }
      if (EnableFlowControl != false) {
        output.WriteRawTag(80);
        output.WriteBool(EnableFlowControl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (EnableEvents != false) {
        size += 1 + 1;
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendSatelliteCommandsRequest);
      }
      if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundStationConfigurationRequest);
      }
      if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TelemetryReceivedAck);
      }
      size += acceptedFraming_.CalculateSize(_repeated_acceptedFraming_codec);
      if (ResumeStreamMessageAckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResumeStreamMessageAckId);
      }
      if (EnableFlowControl != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SatelliteStreamRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      if (other.EnableEvents != false) {
        EnableEvents = other.EnableEvents;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      acceptedFraming_.Add(other.acceptedFraming_);
      if (other.ResumeStreamMessageAckId.Length != 0) {
        ResumeStreamMessageAckId = other.ResumeStreamMessageAckId;
      }
      if (other.EnableFlowControl != false) {
        EnableFlowControl = other.EnableFlowControl;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.SendSatelliteCommandsRequest:
          if (SendSatelliteCommandsRequest == null) {
            SendSatelliteCommandsRequest = new global::Stellarstation.Api.V1.SendSatelliteCommandsRequest();
          }
          SendSatelliteCommandsRequest.MergeFrom(other.SendSatelliteCommandsRequest);
          break;
        case RequestOneofCase.GroundStationConfigurationRequest:
          if (GroundStationConfigurationRequest == null) {
            GroundStationConfigurationRequest = new global::Stellarstation.Api.V1.GroundStationConfigurationRequest();
          }
          GroundStationConfigurationRequest.MergeFrom(other.GroundStationConfigurationRequest);
          break;
        case RequestOneofCase.TelemetryReceivedAck:
          if (TelemetryReceivedAck == null) {
            TelemetryReceivedAck = new global::Stellarstation.Api.V1.ReceiveTelemetryAck();
          }
          TelemetryReceivedAck.MergeFrom(other.TelemetryReceivedAck);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            StreamId = input.ReadString();
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.SendSatelliteCommandsRequest subBuilder = new global::Stellarstation.Api.V1.SendSatelliteCommandsRequest();
            if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) {
              subBuilder.MergeFrom(SendSatelliteCommandsRequest);
            }
            input.ReadMessage(subBuilder);
            SendSatelliteCommandsRequest = subBuilder;
            break;
          }
          case 34:
          case 32: {
            acceptedFraming_.AddEntriesFrom(input, _repeated_acceptedFraming_codec);
            break;
          }
          case 40: {
            EnableEvents = input.ReadBool();
            break;
          }
          case 50: {
            RequestId = input.ReadString();
            break;
          }
          case 58: {
            global::Stellarstation.Api.V1.GroundStationConfigurationRequest subBuilder = new global::Stellarstation.Api.V1.GroundStationConfigurationRequest();
            if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) {
              subBuilder.MergeFrom(GroundStationConfigurationRequest);
            }
            input.ReadMessage(subBuilder);
            GroundStationConfigurationRequest = subBuilder;
            break;
          }
          case 66: {
            ResumeStreamMessageAckId = input.ReadString();
            break;
          }
          case 74: {
            global::Stellarstation.Api.V1.ReceiveTelemetryAck subBuilder = new global::Stellarstation.Api.V1.ReceiveTelemetryAck();
            if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) {
              subBuilder.MergeFrom(TelemetryReceivedAck);
            }
            input.ReadMessage(subBuilder);
            TelemetryReceivedAck = subBuilder;
            break;
          }
          case 80: {
            EnableFlowControl = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            StreamId = input.ReadString();
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.SendSatelliteCommandsRequest subBuilder = new global::Stellarstation.Api.V1.SendSatelliteCommandsRequest();
            if (requestCase_ == RequestOneofCase.SendSatelliteCommandsRequest) {
              subBuilder.MergeFrom(SendSatelliteCommandsRequest);
            }
            input.ReadMessage(subBuilder);
            SendSatelliteCommandsRequest = subBuilder;
            break;
          }
          case 34:
          case 32: {
            acceptedFraming_.AddEntriesFrom(ref input, _repeated_acceptedFraming_codec);
            break;
          }
          case 40: {
            EnableEvents = input.ReadBool();
            break;
          }
          case 50: {
            RequestId = input.ReadString();
            break;
          }
          case 58: {
            global::Stellarstation.Api.V1.GroundStationConfigurationRequest subBuilder = new global::Stellarstation.Api.V1.GroundStationConfigurationRequest();
            if (requestCase_ == RequestOneofCase.GroundStationConfigurationRequest) {
              subBuilder.MergeFrom(GroundStationConfigurationRequest);
            }
            input.ReadMessage(subBuilder);
            GroundStationConfigurationRequest = subBuilder;
            break;
          }
          case 66: {
            ResumeStreamMessageAckId = input.ReadString();
            break;
          }
          case 74: {
            global::Stellarstation.Api.V1.ReceiveTelemetryAck subBuilder = new global::Stellarstation.Api.V1.ReceiveTelemetryAck();
            if (requestCase_ == RequestOneofCase.TelemetryReceivedAck) {
              subBuilder.MergeFrom(TelemetryReceivedAck);
            }
            input.ReadMessage(subBuilder);
            TelemetryReceivedAck = subBuilder;
            break;
          }
          case 80: {
            EnableFlowControl = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to send commands to a satellite.
  ///
  /// Next ID: 4
  /// </summary>
  public sealed partial class SendSatelliteCommandsRequest : pb::IMessage<SendSatelliteCommandsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendSatelliteCommandsRequest> _parser = new pb::MessageParser<SendSatelliteCommandsRequest>(() => new SendSatelliteCommandsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendSatelliteCommandsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSatelliteCommandsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSatelliteCommandsRequest(SendSatelliteCommandsRequest other) : this() {
      command_ = other.command_.Clone();
      channelSetId_ = other.channelSetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSatelliteCommandsRequest Clone() {
      return new SendSatelliteCommandsRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_command_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> command_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// The command frames to send to the satellite. All commands will be transmitted in sequence
    /// immediately, during which time telemetry will not be received. After all commands have been
    /// transmitted, telemetry receive will be immediately re-enabled. The maximum size of each command
    /// is 2MB. If a command larger than 2MB is received, the stream will be closed with a
    /// `RESOURCE_EXHAUSTED` error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Command {
      get { return command_; }
    }

    /// <summary>Field number for the "channel_set_id" field.</summary>
    public const int ChannelSetIdFieldNumber = 3;
    private string channelSetId_ = "";
    /// <summary>
    /// The ID of the channel set to be used when sending the command. Required if two uplink-capable
    /// plans are simultaneously executing. If not provided and only one plan is executing, the
    /// channel set will be automatically determined.
    ///
    /// If a channel set without an uplink component is provided or two uplink-capable plans are
    /// simultaneously executing and no ID is provided, the command will be ignored.
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelSetId {
      get { return channelSetId_; }
      set {
        channelSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendSatelliteCommandsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendSatelliteCommandsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!command_.Equals(other.command_)) return false;
      if (ChannelSetId != other.ChannelSetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= command_.GetHashCode();
      if (ChannelSetId.Length != 0) hash ^= ChannelSetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      command_.WriteTo(output, _repeated_command_codec);
      if (ChannelSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      command_.WriteTo(ref output, _repeated_command_codec);
      if (ChannelSetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += command_.CalculateSize(_repeated_command_codec);
      if (ChannelSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelSetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendSatelliteCommandsRequest other) {
      if (other == null) {
        return;
      }
      command_.Add(other.command_);
      if (other.ChannelSetId.Length != 0) {
        ChannelSetId = other.ChannelSetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            command_.AddEntriesFrom(input, _repeated_command_codec);
            break;
          }
          case 26: {
            ChannelSetId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            command_.AddEntriesFrom(ref input, _repeated_command_codec);
            break;
          }
          case 26: {
            ChannelSetId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to modify configuration of ground station hardware.
  ///
  /// Next ID: 3
  /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
  ///         incompatible ways in the future.
  /// </summary>
  public sealed partial class GroundStationConfigurationRequest : pb::IMessage<GroundStationConfigurationRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroundStationConfigurationRequest> _parser = new pb::MessageParser<GroundStationConfigurationRequest>(() => new GroundStationConfigurationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroundStationConfigurationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfigurationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfigurationRequest(GroundStationConfigurationRequest other) : this() {
      transmitterConfigurationRequest_ = other.transmitterConfigurationRequest_ != null ? other.transmitterConfigurationRequest_.Clone() : null;
      receiverConfigurationRequest_ = other.receiverConfigurationRequest_ != null ? other.receiverConfigurationRequest_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfigurationRequest Clone() {
      return new GroundStationConfigurationRequest(this);
    }

    /// <summary>Field number for the "transmitter_configuration_request" field.</summary>
    public const int TransmitterConfigurationRequestFieldNumber = 1;
    private global::Stellarstation.Api.V1.TransmitterConfigurationRequest transmitterConfigurationRequest_;
    /// <summary>
    /// A request to modify transmitter configuration at a ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.TransmitterConfigurationRequest TransmitterConfigurationRequest {
      get { return transmitterConfigurationRequest_; }
      set {
        transmitterConfigurationRequest_ = value;
      }
    }

    /// <summary>Field number for the "receiver_configuration_request" field.</summary>
    public const int ReceiverConfigurationRequestFieldNumber = 2;
    private global::Stellarstation.Api.V1.ReceiverConfigurationRequest receiverConfigurationRequest_;
    /// <summary>
    /// A request to modify receiver configuration at a ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.ReceiverConfigurationRequest ReceiverConfigurationRequest {
      get { return receiverConfigurationRequest_; }
      set {
        receiverConfigurationRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroundStationConfigurationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroundStationConfigurationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransmitterConfigurationRequest, other.TransmitterConfigurationRequest)) return false;
      if (!object.Equals(ReceiverConfigurationRequest, other.ReceiverConfigurationRequest)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transmitterConfigurationRequest_ != null) hash ^= TransmitterConfigurationRequest.GetHashCode();
      if (receiverConfigurationRequest_ != null) hash ^= ReceiverConfigurationRequest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (transmitterConfigurationRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransmitterConfigurationRequest);
      }
      if (receiverConfigurationRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiverConfigurationRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (transmitterConfigurationRequest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransmitterConfigurationRequest);
      }
      if (receiverConfigurationRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiverConfigurationRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transmitterConfigurationRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransmitterConfigurationRequest);
      }
      if (receiverConfigurationRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiverConfigurationRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroundStationConfigurationRequest other) {
      if (other == null) {
        return;
      }
      if (other.transmitterConfigurationRequest_ != null) {
        if (transmitterConfigurationRequest_ == null) {
          TransmitterConfigurationRequest = new global::Stellarstation.Api.V1.TransmitterConfigurationRequest();
        }
        TransmitterConfigurationRequest.MergeFrom(other.TransmitterConfigurationRequest);
      }
      if (other.receiverConfigurationRequest_ != null) {
        if (receiverConfigurationRequest_ == null) {
          ReceiverConfigurationRequest = new global::Stellarstation.Api.V1.ReceiverConfigurationRequest();
        }
        ReceiverConfigurationRequest.MergeFrom(other.ReceiverConfigurationRequest);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transmitterConfigurationRequest_ == null) {
              TransmitterConfigurationRequest = new global::Stellarstation.Api.V1.TransmitterConfigurationRequest();
            }
            input.ReadMessage(TransmitterConfigurationRequest);
            break;
          }
          case 18: {
            if (receiverConfigurationRequest_ == null) {
              ReceiverConfigurationRequest = new global::Stellarstation.Api.V1.ReceiverConfigurationRequest();
            }
            input.ReadMessage(ReceiverConfigurationRequest);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (transmitterConfigurationRequest_ == null) {
              TransmitterConfigurationRequest = new global::Stellarstation.Api.V1.TransmitterConfigurationRequest();
            }
            input.ReadMessage(TransmitterConfigurationRequest);
            break;
          }
          case 18: {
            if (receiverConfigurationRequest_ == null) {
              ReceiverConfigurationRequest = new global::Stellarstation.Api.V1.ReceiverConfigurationRequest();
            }
            input.ReadMessage(ReceiverConfigurationRequest);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An ack message for client to notify server of sucessful receive of a ReceiveTelemetryResponse message.
  ///
  /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
  ///         incompatible ways in the future.
  /// </summary>
  public sealed partial class ReceiveTelemetryAck : pb::IMessage<ReceiveTelemetryAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiveTelemetryAck> _parser = new pb::MessageParser<ReceiveTelemetryAck>(() => new ReceiveTelemetryAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveTelemetryAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryAck(ReceiveTelemetryAck other) : this() {
      messageAckId_ = other.messageAckId_;
      receivedTimestamp_ = other.receivedTimestamp_ != null ? other.receivedTimestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryAck Clone() {
      return new ReceiveTelemetryAck(this);
    }

    /// <summary>Field number for the "message_ack_id" field.</summary>
    public const int MessageAckIdFieldNumber = 1;
    private string messageAckId_ = "";
    /// <summary>
    /// The `ReceiveTelemetryResponse.message_ack_id` value of the telemetry message received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageAckId {
      get { return messageAckId_; }
      set {
        messageAckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "received_timestamp" field.</summary>
    public const int ReceivedTimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp receivedTimestamp_;
    /// <summary>
    /// Optional. The local timestamp of message reception, used for statistics collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReceivedTimestamp {
      get { return receivedTimestamp_; }
      set {
        receivedTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveTelemetryAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveTelemetryAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageAckId != other.MessageAckId) return false;
      if (!object.Equals(ReceivedTimestamp, other.ReceivedTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageAckId.Length != 0) hash ^= MessageAckId.GetHashCode();
      if (receivedTimestamp_ != null) hash ^= ReceivedTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageAckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageAckId);
      }
      if (receivedTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceivedTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageAckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageAckId);
      }
      if (receivedTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceivedTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageAckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageAckId);
      }
      if (receivedTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceivedTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveTelemetryAck other) {
      if (other == null) {
        return;
      }
      if (other.MessageAckId.Length != 0) {
        MessageAckId = other.MessageAckId;
      }
      if (other.receivedTimestamp_ != null) {
        if (receivedTimestamp_ == null) {
          ReceivedTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReceivedTimestamp.MergeFrom(other.ReceivedTimestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageAckId = input.ReadString();
            break;
          }
          case 18: {
            if (receivedTimestamp_ == null) {
              ReceivedTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReceivedTimestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MessageAckId = input.ReadString();
            break;
          }
          case 18: {
            if (receivedTimestamp_ == null) {
              ReceivedTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReceivedTimestamp);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to configure a transmitter at a ground station. Default state of these parameters
  /// depends on hardware configuration at each ground station. Please check TransmitterConfiguration
  /// and TransmitterState in monitoring message.
  /// It isn't always supported to control them. If field isn't set, it's ignored.
  ///
  /// Next ID: 6
  /// </summary>
  public sealed partial class TransmitterConfigurationRequest : pb::IMessage<TransmitterConfigurationRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransmitterConfigurationRequest> _parser = new pb::MessageParser<TransmitterConfigurationRequest>(() => new TransmitterConfigurationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmitterConfigurationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfigurationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfigurationRequest(TransmitterConfigurationRequest other) : this() {
      EnableCarrier = other.EnableCarrier;
      EnableIfModulation = other.EnableIfModulation;
      EnableIdlePattern = other.EnableIdlePattern;
      EnableIfSweep = other.EnableIfSweep;
      Bitrate = other.Bitrate;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfigurationRequest Clone() {
      return new TransmitterConfigurationRequest(this);
    }

    /// <summary>Field number for the "enable_carrier" field.</summary>
    public const int EnableCarrierFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_enableCarrier_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? enableCarrier_;
    /// <summary>
    /// Enable carrier transmission.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableCarrier {
      get { return enableCarrier_; }
      set {
        enableCarrier_ = value;
      }
    }


    /// <summary>Field number for the "enable_if_modulation" field.</summary>
    public const int EnableIfModulationFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_enableIfModulation_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? enableIfModulation_;
    /// <summary>
    /// Enable IF modulation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIfModulation {
      get { return enableIfModulation_; }
      set {
        enableIfModulation_ = value;
      }
    }


    /// <summary>Field number for the "enable_idle_pattern" field.</summary>
    public const int EnableIdlePatternFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_enableIdlePattern_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? enableIdlePattern_;
    /// <summary>
    /// Enable idle pattern transmission.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIdlePattern {
      get { return enableIdlePattern_; }
      set {
        enableIdlePattern_ = value;
      }
    }


    /// <summary>Field number for the "enable_if_sweep" field.</summary>
    public const int EnableIfSweepFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_enableIfSweep_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? enableIfSweep_;
    /// <summary>
    /// Enable IF sweep.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIfSweep {
      get { return enableIfSweep_; }
      set {
        enableIfSweep_ = value;
      }
    }


    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_bitrate_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? bitrate_;
    /// <summary>
    /// Bitrate of the transmitter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmitterConfigurationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmitterConfigurationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnableCarrier != other.EnableCarrier) return false;
      if (EnableIfModulation != other.EnableIfModulation) return false;
      if (EnableIdlePattern != other.EnableIdlePattern) return false;
      if (EnableIfSweep != other.EnableIfSweep) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Bitrate, other.Bitrate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (enableCarrier_ != null) hash ^= EnableCarrier.GetHashCode();
      if (enableIfModulation_ != null) hash ^= EnableIfModulation.GetHashCode();
      if (enableIdlePattern_ != null) hash ^= EnableIdlePattern.GetHashCode();
      if (enableIfSweep_ != null) hash ^= EnableIfSweep.GetHashCode();
      if (bitrate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Bitrate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (enableCarrier_ != null) {
        _single_enableCarrier_codec.WriteTagAndValue(output, EnableCarrier);
      }
      if (enableIfModulation_ != null) {
        _single_enableIfModulation_codec.WriteTagAndValue(output, EnableIfModulation);
      }
      if (enableIdlePattern_ != null) {
        _single_enableIdlePattern_codec.WriteTagAndValue(output, EnableIdlePattern);
      }
      if (enableIfSweep_ != null) {
        _single_enableIfSweep_codec.WriteTagAndValue(output, EnableIfSweep);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (enableCarrier_ != null) {
        _single_enableCarrier_codec.WriteTagAndValue(ref output, EnableCarrier);
      }
      if (enableIfModulation_ != null) {
        _single_enableIfModulation_codec.WriteTagAndValue(ref output, EnableIfModulation);
      }
      if (enableIdlePattern_ != null) {
        _single_enableIdlePattern_codec.WriteTagAndValue(ref output, EnableIdlePattern);
      }
      if (enableIfSweep_ != null) {
        _single_enableIfSweep_codec.WriteTagAndValue(ref output, EnableIfSweep);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(ref output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (enableCarrier_ != null) {
        size += _single_enableCarrier_codec.CalculateSizeWithTag(EnableCarrier);
      }
      if (enableIfModulation_ != null) {
        size += _single_enableIfModulation_codec.CalculateSizeWithTag(EnableIfModulation);
      }
      if (enableIdlePattern_ != null) {
        size += _single_enableIdlePattern_codec.CalculateSizeWithTag(EnableIdlePattern);
      }
      if (enableIfSweep_ != null) {
        size += _single_enableIfSweep_codec.CalculateSizeWithTag(EnableIfSweep);
      }
      if (bitrate_ != null) {
        size += _single_bitrate_codec.CalculateSizeWithTag(Bitrate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmitterConfigurationRequest other) {
      if (other == null) {
        return;
      }
      if (other.enableCarrier_ != null) {
        if (enableCarrier_ == null || other.EnableCarrier != false) {
          EnableCarrier = other.EnableCarrier;
        }
      }
      if (other.enableIfModulation_ != null) {
        if (enableIfModulation_ == null || other.EnableIfModulation != false) {
          EnableIfModulation = other.EnableIfModulation;
        }
      }
      if (other.enableIdlePattern_ != null) {
        if (enableIdlePattern_ == null || other.EnableIdlePattern != false) {
          EnableIdlePattern = other.EnableIdlePattern;
        }
      }
      if (other.enableIfSweep_ != null) {
        if (enableIfSweep_ == null || other.EnableIfSweep != false) {
          EnableIfSweep = other.EnableIfSweep;
        }
      }
      if (other.bitrate_ != null) {
        if (bitrate_ == null || other.Bitrate != 0F) {
          Bitrate = other.Bitrate;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_enableCarrier_codec.Read(input);
            if (enableCarrier_ == null || value != false) {
              EnableCarrier = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_enableIfModulation_codec.Read(input);
            if (enableIfModulation_ == null || value != false) {
              EnableIfModulation = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_enableIdlePattern_codec.Read(input);
            if (enableIdlePattern_ == null || value != false) {
              EnableIdlePattern = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_enableIfSweep_codec.Read(input);
            if (enableIfSweep_ == null || value != false) {
              EnableIfSweep = value;
            }
            break;
          }
          case 42: {
            float? value = _single_bitrate_codec.Read(input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bool? value = _single_enableCarrier_codec.Read(ref input);
            if (enableCarrier_ == null || value != false) {
              EnableCarrier = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_enableIfModulation_codec.Read(ref input);
            if (enableIfModulation_ == null || value != false) {
              EnableIfModulation = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_enableIdlePattern_codec.Read(ref input);
            if (enableIdlePattern_ == null || value != false) {
              EnableIdlePattern = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_enableIfSweep_codec.Read(ref input);
            if (enableIfSweep_ == null || value != false) {
              EnableIfSweep = value;
            }
            break;
          }
          case 42: {
            float? value = _single_bitrate_codec.Read(ref input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to configure a receiver at a ground station. Default state of these parameters
  /// depends on hardware configuration at each ground station. Please check ReceiverConfiguration
  /// and ReceiverState in monitoring message.
  /// It isn't always supported to control them. If field isn't set, it's ignored.
  ///
  /// Next ID: 2
  /// </summary>
  public sealed partial class ReceiverConfigurationRequest : pb::IMessage<ReceiverConfigurationRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiverConfigurationRequest> _parser = new pb::MessageParser<ReceiverConfigurationRequest>(() => new ReceiverConfigurationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiverConfigurationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfigurationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfigurationRequest(ReceiverConfigurationRequest other) : this() {
      Bitrate = other.Bitrate;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfigurationRequest Clone() {
      return new ReceiverConfigurationRequest(this);
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_bitrate_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? bitrate_;
    /// <summary>
    /// Bitrate of the receiver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiverConfigurationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiverConfigurationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Bitrate, other.Bitrate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bitrate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Bitrate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(ref output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bitrate_ != null) {
        size += _single_bitrate_codec.CalculateSizeWithTag(Bitrate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiverConfigurationRequest other) {
      if (other == null) {
        return;
      }
      if (other.bitrate_ != null) {
        if (bitrate_ == null || other.Bitrate != 0F) {
          Bitrate = other.Bitrate;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_bitrate_codec.Read(input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_bitrate_codec.Read(ref input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A response from the `OpenSatelliteStream` method.
  /// </summary>
  public sealed partial class SatelliteStreamResponse : pb::IMessage<SatelliteStreamResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SatelliteStreamResponse> _parser = new pb::MessageParser<SatelliteStreamResponse>(() => new SatelliteStreamResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SatelliteStreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamResponse(SatelliteStreamResponse other) : this() {
      streamId_ = other.streamId_;
      switch (other.ResponseCase) {
        case ResponseOneofCase.ReceiveTelemetryResponse:
          ReceiveTelemetryResponse = other.ReceiveTelemetryResponse.Clone();
          break;
        case ResponseOneofCase.StreamEvent:
          StreamEvent = other.StreamEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SatelliteStreamResponse Clone() {
      return new SatelliteStreamResponse(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private string streamId_ = "";
    /// <summary>
    /// The ID of this stream, which can be used in a subsequent call to `OpenSatelliteStream` to
    /// resume this stream on interruption (e.g., if a network failure causes the connection to be
    /// closed mid-stream). Telemetry received on a previously opened stream with no current listener
    /// will be buffered for a maximum of 1 minute, and the stream itself will be cancelled and no more
    /// buffering will occur if no client resumes the stream with `OpenSatelliteStream` within 10
    /// minutes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreamId {
      get { return streamId_; }
      set {
        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receive_telemetry_response" field.</summary>
    public const int ReceiveTelemetryResponseFieldNumber = 2;
    /// <summary>
    /// A response from a satellite containing telemetry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.ReceiveTelemetryResponse ReceiveTelemetryResponse {
      get { return responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse ? (global::Stellarstation.Api.V1.ReceiveTelemetryResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ReceiveTelemetryResponse;
      }
    }

    /// <summary>Field number for the "stream_event" field.</summary>
    public const int StreamEventFieldNumber = 3;
    /// <summary>
    /// An event that occurred while processing the stream. Often used for monitoring the stream.
    /// Never returned if `SatelliteStreamRequest.enable_events` is false in the first
    /// `SatelliteStreamRequest` of the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.StreamEvent StreamEvent {
      get { return responseCase_ == ResponseOneofCase.StreamEvent ? (global::Stellarstation.Api.V1.StreamEvent) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.StreamEvent;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "Response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      ReceiveTelemetryResponse = 2,
      StreamEvent = 3,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SatelliteStreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SatelliteStreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (!object.Equals(ReceiveTelemetryResponse, other.ReceiveTelemetryResponse)) return false;
      if (!object.Equals(StreamEvent, other.StreamEvent)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) hash ^= ReceiveTelemetryResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.StreamEvent) hash ^= StreamEvent.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiveTelemetryResponse);
      }
      if (responseCase_ == ResponseOneofCase.StreamEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(StreamEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreamId);
      }
      if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(ReceiveTelemetryResponse);
      }
      if (responseCase_ == ResponseOneofCase.StreamEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(StreamEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
      }
      if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiveTelemetryResponse);
      }
      if (responseCase_ == ResponseOneofCase.StreamEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SatelliteStreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.StreamId.Length != 0) {
        StreamId = other.StreamId;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.ReceiveTelemetryResponse:
          if (ReceiveTelemetryResponse == null) {
            ReceiveTelemetryResponse = new global::Stellarstation.Api.V1.ReceiveTelemetryResponse();
          }
          ReceiveTelemetryResponse.MergeFrom(other.ReceiveTelemetryResponse);
          break;
        case ResponseOneofCase.StreamEvent:
          if (StreamEvent == null) {
            StreamEvent = new global::Stellarstation.Api.V1.StreamEvent();
          }
          StreamEvent.MergeFrom(other.StreamEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.ReceiveTelemetryResponse subBuilder = new global::Stellarstation.Api.V1.ReceiveTelemetryResponse();
            if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) {
              subBuilder.MergeFrom(ReceiveTelemetryResponse);
            }
            input.ReadMessage(subBuilder);
            ReceiveTelemetryResponse = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.StreamEvent subBuilder = new global::Stellarstation.Api.V1.StreamEvent();
            if (responseCase_ == ResponseOneofCase.StreamEvent) {
              subBuilder.MergeFrom(StreamEvent);
            }
            input.ReadMessage(subBuilder);
            StreamEvent = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StreamId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.ReceiveTelemetryResponse subBuilder = new global::Stellarstation.Api.V1.ReceiveTelemetryResponse();
            if (responseCase_ == ResponseOneofCase.ReceiveTelemetryResponse) {
              subBuilder.MergeFrom(ReceiveTelemetryResponse);
            }
            input.ReadMessage(subBuilder);
            ReceiveTelemetryResponse = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.StreamEvent subBuilder = new global::Stellarstation.Api.V1.StreamEvent();
            if (responseCase_ == ResponseOneofCase.StreamEvent) {
              subBuilder.MergeFrom(StreamEvent);
            }
            input.ReadMessage(subBuilder);
            StreamEvent = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A response from a satellite containing telemetry.
  /// </summary>
  public sealed partial class ReceiveTelemetryResponse : pb::IMessage<ReceiveTelemetryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiveTelemetryResponse> _parser = new pb::MessageParser<ReceiveTelemetryResponse>(() => new ReceiveTelemetryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveTelemetryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryResponse(ReceiveTelemetryResponse other) : this() {
      telemetry_ = other.telemetry_.Clone();
      planId_ = other.planId_;
      messageAckId_ = other.messageAckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveTelemetryResponse Clone() {
      return new ReceiveTelemetryResponse(this);
    }

    /// <summary>Field number for the "telemetry" field.</summary>
    public const int TelemetryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.Telemetry> _repeated_telemetry_codec
        = pb::FieldCodec.ForMessage(10, global::Stellarstation.Api.V1.Telemetry.Parser);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.Telemetry> telemetry_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.Telemetry>();
    /// <summary>
    /// The telemetry received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.Telemetry> Telemetry {
      get { return telemetry_; }
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 2;
    private string planId_ = "";
    /// <summary>
    /// The ID of the plan the telemetry was received for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_ack_id" field.</summary>
    public const int MessageAckIdFieldNumber = 3;
    private string messageAckId_ = "";
    /// <summary>
    /// The ID to be used to when creating a `ReceiveTelemetryAck.message_ack_id` response
    ///
    /// This value may not be available for Out-of-order-allowed-satellites
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageAckId {
      get { return messageAckId_; }
      set {
        messageAckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveTelemetryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveTelemetryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!telemetry_.Equals(other.telemetry_)) return false;
      if (PlanId != other.PlanId) return false;
      if (MessageAckId != other.MessageAckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= telemetry_.GetHashCode();
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (MessageAckId.Length != 0) hash ^= MessageAckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      telemetry_.WriteTo(output, _repeated_telemetry_codec);
      if (PlanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlanId);
      }
      if (MessageAckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageAckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      telemetry_.WriteTo(ref output, _repeated_telemetry_codec);
      if (PlanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlanId);
      }
      if (MessageAckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageAckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += telemetry_.CalculateSize(_repeated_telemetry_codec);
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlanId);
      }
      if (MessageAckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageAckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveTelemetryResponse other) {
      if (other == null) {
        return;
      }
      telemetry_.Add(other.telemetry_);
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      if (other.MessageAckId.Length != 0) {
        MessageAckId = other.MessageAckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            telemetry_.AddEntriesFrom(input, _repeated_telemetry_codec);
            break;
          }
          case 18: {
            PlanId = input.ReadString();
            break;
          }
          case 26: {
            MessageAckId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            telemetry_.AddEntriesFrom(ref input, _repeated_telemetry_codec);
            break;
          }
          case 18: {
            PlanId = input.ReadString();
            break;
          }
          case 26: {
            MessageAckId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the `CancelPlan` method.
  /// </summary>
  public sealed partial class CancelPlanRequest : pb::IMessage<CancelPlanRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelPlanRequest> _parser = new pb::MessageParser<CancelPlanRequest>(() => new CancelPlanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanRequest(CancelPlanRequest other) : this() {
      planId_ = other.planId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanRequest Clone() {
      return new CancelPlanRequest(this);
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private string planId_ = "";
    /// <summary>
    /// The id of the plan to cancel, i.e., the value of `Plan.id`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlanRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlanId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlanId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the `CancelPlan` method.
  /// </summary>
  public sealed partial class CancelPlanResponse : pb::IMessage<CancelPlanResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CancelPlanResponse> _parser = new pb::MessageParser<CancelPlanResponse>(() => new CancelPlanResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanResponse(CancelPlanResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlanResponse Clone() {
      return new CancelPlanResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlanResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the `ListUpcomingAvailablePasses` method.
  /// </summary>
  public sealed partial class ListUpcomingAvailablePassesRequest : pb::IMessage<ListUpcomingAvailablePassesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListUpcomingAvailablePassesRequest> _parser = new pb::MessageParser<ListUpcomingAvailablePassesRequest>(() => new ListUpcomingAvailablePassesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUpcomingAvailablePassesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesRequest(ListUpcomingAvailablePassesRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesRequest Clone() {
      return new ListUpcomingAvailablePassesRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite to list passes for. The ID of a satellite can be found on the
    /// StellarStation Console page for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUpcomingAvailablePassesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUpcomingAvailablePassesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUpcomingAvailablePassesRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the `ListUpcomingAvailablePasses` method.
  /// </summary>
  public sealed partial class ListUpcomingAvailablePassesResponse : pb::IMessage<ListUpcomingAvailablePassesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListUpcomingAvailablePassesResponse> _parser = new pb::MessageParser<ListUpcomingAvailablePassesResponse>(() => new ListUpcomingAvailablePassesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUpcomingAvailablePassesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesResponse(ListUpcomingAvailablePassesResponse other) : this() {
      pass_ = other.pass_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUpcomingAvailablePassesResponse Clone() {
      return new ListUpcomingAvailablePassesResponse(this);
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.Pass> _repeated_pass_codec
        = pb::FieldCodec.ForMessage(10, global::Stellarstation.Api.V1.Pass.Parser);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.Pass> pass_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.Pass>();
    /// <summary>
    /// The upcoming, schedulable passes for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.Pass> Pass {
      get { return pass_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUpcomingAvailablePassesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUpcomingAvailablePassesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pass_.Equals(other.pass_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pass_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pass_.WriteTo(output, _repeated_pass_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pass_.WriteTo(ref output, _repeated_pass_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pass_.CalculateSize(_repeated_pass_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUpcomingAvailablePassesResponse other) {
      if (other == null) {
        return;
      }
      pass_.Add(other.pass_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pass_.AddEntriesFrom(input, _repeated_pass_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pass_.AddEntriesFrom(ref input, _repeated_pass_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the `ReservePass` method.
  /// </summary>
  public sealed partial class ReservePassRequest : pb::IMessage<ReservePassRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReservePassRequest> _parser = new pb::MessageParser<ReservePassRequest>(() => new ReservePassRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservePassRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassRequest(ReservePassRequest other) : this() {
      reservationToken_ = other.reservationToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassRequest Clone() {
      return new ReservePassRequest(this);
    }

    /// <summary>Field number for the "reservation_token" field.</summary>
    public const int ReservationTokenFieldNumber = 1;
    private string reservationToken_ = "";
    /// <summary>
    /// The token that specifies the pass, as returned in `Pass.reservation_token` or one of the
    /// `Pass.channel_set_token.reservation_token` values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReservationToken {
      get { return reservationToken_; }
      set {
        reservationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservePassRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservePassRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReservationToken != other.ReservationToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReservationToken.Length != 0) hash ^= ReservationToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReservationToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReservationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReservationToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ReservationToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReservationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReservationToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservePassRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReservationToken.Length != 0) {
        ReservationToken = other.ReservationToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReservationToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ReservationToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the `ReservePass` method.
  /// </summary>
  public sealed partial class ReservePassResponse : pb::IMessage<ReservePassResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReservePassResponse> _parser = new pb::MessageParser<ReservePassResponse>(() => new ReservePassResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservePassResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassResponse(ReservePassResponse other) : this() {
      plan_ = other.plan_ != null ? other.plan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePassResponse Clone() {
      return new ReservePassResponse(this);
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 1;
    private global::Stellarstation.Api.V1.Plan plan_;
    /// <summary>
    /// The reserved plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Plan Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservePassResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservePassResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Plan, other.Plan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (plan_ != null) hash ^= Plan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (plan_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (plan_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservePassResponse other) {
      if (other == null) {
        return;
      }
      if (other.plan_ != null) {
        if (plan_ == null) {
          Plan = new global::Stellarstation.Api.V1.Plan();
        }
        Plan.MergeFrom(other.Plan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Plan();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Plan();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the `ListPlans` method.
  /// </summary>
  public sealed partial class ListPlansRequest : pb::IMessage<ListPlansRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPlansRequest> _parser = new pb::MessageParser<ListPlansRequest>(() => new ListPlansRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPlansRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansRequest(ListPlansRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      aosAfter_ = other.aosAfter_ != null ? other.aosAfter_.Clone() : null;
      aosBefore_ = other.aosBefore_ != null ? other.aosBefore_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansRequest Clone() {
      return new ListPlansRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite to list plans for. The ID can be found on the StellarStation
    /// Console page for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aos_after" field.</summary>
    public const int AosAfterFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp aosAfter_;
    /// <summary>
    /// The start time of the range of plans to list (inclusive). Only plans with an Acquisition of
    /// Signal (AOS) at or after this time will be returned. It is an error for the duration between
    /// `aos_after` and `aos_before` to be longer than 31 days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AosAfter {
      get { return aosAfter_; }
      set {
        aosAfter_ = value;
      }
    }

    /// <summary>Field number for the "aos_before" field.</summary>
    public const int AosBeforeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp aosBefore_;
    /// <summary>
    /// The end time of the range of plans to list (exclusive). Only plans with an Acquisition of
    /// Signal (AOS) before this time will be returned. It is an error for the duration between
    /// `aos_after` and `aos_before` to be longer than 31 days.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AosBefore {
      get { return aosBefore_; }
      set {
        aosBefore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPlansRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPlansRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      if (!object.Equals(AosAfter, other.AosAfter)) return false;
      if (!object.Equals(AosBefore, other.AosBefore)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (aosAfter_ != null) hash ^= AosAfter.GetHashCode();
      if (aosBefore_ != null) hash ^= AosBefore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (aosAfter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AosAfter);
      }
      if (aosBefore_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AosBefore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (aosAfter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AosAfter);
      }
      if (aosBefore_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AosBefore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (aosAfter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AosAfter);
      }
      if (aosBefore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AosBefore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPlansRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      if (other.aosAfter_ != null) {
        if (aosAfter_ == null) {
          AosAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AosAfter.MergeFrom(other.AosAfter);
      }
      if (other.aosBefore_ != null) {
        if (aosBefore_ == null) {
          AosBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AosBefore.MergeFrom(other.AosBefore);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            if (aosAfter_ == null) {
              AosAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosAfter);
            break;
          }
          case 26: {
            if (aosBefore_ == null) {
              AosBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosBefore);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            if (aosAfter_ == null) {
              AosAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosAfter);
            break;
          }
          case 26: {
            if (aosBefore_ == null) {
              AosBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosBefore);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A response from the `ListPlans` method.
  /// </summary>
  public sealed partial class ListPlansResponse : pb::IMessage<ListPlansResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPlansResponse> _parser = new pb::MessageParser<ListPlansResponse>(() => new ListPlansResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPlansResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansResponse(ListPlansResponse other) : this() {
      plan_ = other.plan_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPlansResponse Clone() {
      return new ListPlansResponse(this);
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.Plan> _repeated_plan_codec
        = pb::FieldCodec.ForMessage(10, global::Stellarstation.Api.V1.Plan.Parser);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.Plan> plan_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.Plan>();
    /// <summary>
    /// The requested list of plans for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.Plan> Plan {
      get { return plan_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPlansResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPlansResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plan_.Equals(other.plan_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plan_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plan_.WriteTo(output, _repeated_plan_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plan_.WriteTo(ref output, _repeated_plan_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plan_.CalculateSize(_repeated_plan_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPlansResponse other) {
      if (other == null) {
        return;
      }
      plan_.Add(other.plan_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plan_.AddEntriesFrom(input, _repeated_plan_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plan_.AddEntriesFrom(ref input, _repeated_plan_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A channel set defines one or both of the uplink and downlink `RadioDeviceConfiguration`s to be
  /// used when executing a pass. A channel set is unique to a specific satellite, and a satellite may
  /// have one or more channel sets.
  ///
  /// A common example is to have a channel set for TT&amp;C with both uplink and downlink configurations,
  /// and a second channel set only for mission downlink. In this case it is necessary to select the
  /// configuration that will be used during plan execution.
  /// </summary>
  public sealed partial class ChannelSet : pb::IMessage<ChannelSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelSet> _parser = new pb::MessageParser<ChannelSet>(() => new ChannelSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelSet(ChannelSet other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      uplink_ = other.uplink_ != null ? other.uplink_.Clone() : null;
      downlink_ = other.downlink_ != null ? other.downlink_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelSet Clone() {
      return new ChannelSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The unique ID of the channel set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name used to identify the channel set (for example, TT&amp;C UHF).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uplink" field.</summary>
    public const int UplinkFieldNumber = 3;
    private global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration uplink_;
    /// <summary>
    /// The radio device configuration used for uplinking.
    ///
    /// Optional if downlink is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration Uplink {
      get { return uplink_; }
      set {
        uplink_ = value;
      }
    }

    /// <summary>Field number for the "downlink" field.</summary>
    public const int DownlinkFieldNumber = 4;
    private global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration downlink_;
    /// <summary>
    /// The radio device configuration used for downlinking.
    ///
    /// Optional if uplink is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration Downlink {
      get { return downlink_; }
      set {
        downlink_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Uplink, other.Uplink)) return false;
      if (!object.Equals(Downlink, other.Downlink)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (uplink_ != null) hash ^= Uplink.GetHashCode();
      if (downlink_ != null) hash ^= Downlink.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (uplink_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uplink);
      }
      if (downlink_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Downlink);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (uplink_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uplink);
      }
      if (downlink_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Downlink);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (uplink_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uplink);
      }
      if (downlink_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Downlink);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.uplink_ != null) {
        if (uplink_ == null) {
          Uplink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
        }
        Uplink.MergeFrom(other.Uplink);
      }
      if (other.downlink_ != null) {
        if (downlink_ == null) {
          Downlink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
        }
        Downlink.MergeFrom(other.Downlink);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (uplink_ == null) {
              Uplink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
            }
            input.ReadMessage(Uplink);
            break;
          }
          case 34: {
            if (downlink_ == null) {
              Downlink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
            }
            input.ReadMessage(Downlink);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (uplink_ == null) {
              Uplink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
            }
            input.ReadMessage(Uplink);
            break;
          }
          case 34: {
            if (downlink_ == null) {
              Downlink = new global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration();
            }
            input.ReadMessage(Downlink);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A pass during which a satellite can be communicated with from a given ground station.
  ///
  /// Next ID: 14
  /// </summary>
  public sealed partial class Pass : pb::IMessage<Pass>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pass> _parser = new pb::MessageParser<Pass>(() => new Pass());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass(Pass other) : this() {
      aosTime_ = other.aosTime_ != null ? other.aosTime_.Clone() : null;
      losTime_ = other.losTime_ != null ? other.losTime_.Clone() : null;
      groundStationLatitude_ = other.groundStationLatitude_;
      groundStationLongitude_ = other.groundStationLongitude_;
      groundStationOrganizationName_ = other.groundStationOrganizationName_;
      groundStationId_ = other.groundStationId_;
      groundStationCountryCode_ = other.groundStationCountryCode_;
      maxElevationDegrees_ = other.maxElevationDegrees_;
      maxElevationTime_ = other.maxElevationTime_ != null ? other.maxElevationTime_.Clone() : null;
      channelSetToken_ = other.channelSetToken_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass Clone() {
      return new Pass(this);
    }

    /// <summary>Field number for the "aos_time" field.</summary>
    public const int AosTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp aosTime_;
    /// <summary>
    /// The time of Acquisition of Signal (AOS) between the ground station and satellite in this pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AosTime {
      get { return aosTime_; }
      set {
        aosTime_ = value;
      }
    }

    /// <summary>Field number for the "los_time" field.</summary>
    public const int LosTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp losTime_;
    /// <summary>
    /// The time of Loss of Signal (LOS) between the ground station and satellite in this pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LosTime {
      get { return losTime_; }
      set {
        losTime_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_latitude" field.</summary>
    public const int GroundStationLatitudeFieldNumber = 4;
    private double groundStationLatitude_;
    /// <summary>
    /// The latitude, in degrees, of the ground station's location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundStationLatitude {
      get { return groundStationLatitude_; }
      set {
        groundStationLatitude_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_longitude" field.</summary>
    public const int GroundStationLongitudeFieldNumber = 5;
    private double groundStationLongitude_;
    /// <summary>
    /// The longitude, in degrees, of the ground station's location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundStationLongitude {
      get { return groundStationLongitude_; }
      set {
        groundStationLongitude_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_organization_name" field.</summary>
    public const int GroundStationOrganizationNameFieldNumber = 12;
    private string groundStationOrganizationName_ = "";
    /// <summary>
    /// The organization name of the ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationOrganizationName {
      get { return groundStationOrganizationName_; }
      set {
        groundStationOrganizationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ground_station_id" field.</summary>
    public const int GroundStationIdFieldNumber = 13;
    private string groundStationId_ = "";
    /// <summary>
    /// The ID of the ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationId {
      get { return groundStationId_; }
      set {
        groundStationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ground_station_country_code" field.</summary>
    public const int GroundStationCountryCodeFieldNumber = 6;
    private string groundStationCountryCode_ = "";
    /// <summary>
    /// The ISO 3166-1 alpha-2 2-letter country code for the ground station's location.
    /// See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationCountryCode {
      get { return groundStationCountryCode_; }
      set {
        groundStationCountryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_elevation_degrees" field.</summary>
    public const int MaxElevationDegreesFieldNumber = 7;
    private double maxElevationDegrees_;
    /// <summary>
    /// The max elevation during the pass, in degrees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxElevationDegrees {
      get { return maxElevationDegrees_; }
      set {
        maxElevationDegrees_ = value;
      }
    }

    /// <summary>Field number for the "max_elevation_time" field.</summary>
    public const int MaxElevationTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxElevationTime_;
    /// <summary>
    /// The time of the max elevation during the pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxElevationTime {
      get { return maxElevationTime_; }
      set {
        maxElevationTime_ = value;
      }
    }

    /// <summary>Field number for the "channel_set_token" field.</summary>
    public const int ChannelSetTokenFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken> _repeated_channelSetToken_codec
        = pb::FieldCodec.ForMessage(90, global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken.Parser);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken> channelSetToken_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken>();
    /// <summary>
    /// List of channel set and corresponding reservation token groupings. Only channel sets that are
    /// compatible with this pass's ground station will be present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.Pass.Types.ChannelSetToken> ChannelSetToken {
      get { return channelSetToken_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AosTime, other.AosTime)) return false;
      if (!object.Equals(LosTime, other.LosTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundStationLatitude, other.GroundStationLatitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundStationLongitude, other.GroundStationLongitude)) return false;
      if (GroundStationOrganizationName != other.GroundStationOrganizationName) return false;
      if (GroundStationId != other.GroundStationId) return false;
      if (GroundStationCountryCode != other.GroundStationCountryCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxElevationDegrees, other.MaxElevationDegrees)) return false;
      if (!object.Equals(MaxElevationTime, other.MaxElevationTime)) return false;
      if(!channelSetToken_.Equals(other.channelSetToken_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aosTime_ != null) hash ^= AosTime.GetHashCode();
      if (losTime_ != null) hash ^= LosTime.GetHashCode();
      if (GroundStationLatitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundStationLatitude);
      if (GroundStationLongitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundStationLongitude);
      if (GroundStationOrganizationName.Length != 0) hash ^= GroundStationOrganizationName.GetHashCode();
      if (GroundStationId.Length != 0) hash ^= GroundStationId.GetHashCode();
      if (GroundStationCountryCode.Length != 0) hash ^= GroundStationCountryCode.GetHashCode();
      if (MaxElevationDegrees != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxElevationDegrees);
      if (maxElevationTime_ != null) hash ^= MaxElevationTime.GetHashCode();
      hash ^= channelSetToken_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (aosTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AosTime);
      }
      if (losTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GroundStationLatitude);
      }
      if (GroundStationLongitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GroundStationLongitude);
      }
      if (GroundStationCountryCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroundStationCountryCode);
      }
      if (MaxElevationDegrees != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MaxElevationDegrees);
      }
      if (maxElevationTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MaxElevationTime);
      }
      channelSetToken_.WriteTo(output, _repeated_channelSetToken_codec);
      if (GroundStationOrganizationName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GroundStationOrganizationName);
      }
      if (GroundStationId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(GroundStationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (aosTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AosTime);
      }
      if (losTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GroundStationLatitude);
      }
      if (GroundStationLongitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GroundStationLongitude);
      }
      if (GroundStationCountryCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroundStationCountryCode);
      }
      if (MaxElevationDegrees != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MaxElevationDegrees);
      }
      if (maxElevationTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MaxElevationTime);
      }
      channelSetToken_.WriteTo(ref output, _repeated_channelSetToken_codec);
      if (GroundStationOrganizationName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GroundStationOrganizationName);
      }
      if (GroundStationId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(GroundStationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aosTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AosTime);
      }
      if (losTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        size += 1 + 8;
      }
      if (GroundStationLongitude != 0D) {
        size += 1 + 8;
      }
      if (GroundStationOrganizationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroundStationOrganizationName);
      }
      if (GroundStationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroundStationId);
      }
      if (GroundStationCountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroundStationCountryCode);
      }
      if (MaxElevationDegrees != 0D) {
        size += 1 + 8;
      }
      if (maxElevationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxElevationTime);
      }
      size += channelSetToken_.CalculateSize(_repeated_channelSetToken_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pass other) {
      if (other == null) {
        return;
      }
      if (other.aosTime_ != null) {
        if (aosTime_ == null) {
          AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AosTime.MergeFrom(other.AosTime);
      }
      if (other.losTime_ != null) {
        if (losTime_ == null) {
          LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LosTime.MergeFrom(other.LosTime);
      }
      if (other.GroundStationLatitude != 0D) {
        GroundStationLatitude = other.GroundStationLatitude;
      }
      if (other.GroundStationLongitude != 0D) {
        GroundStationLongitude = other.GroundStationLongitude;
      }
      if (other.GroundStationOrganizationName.Length != 0) {
        GroundStationOrganizationName = other.GroundStationOrganizationName;
      }
      if (other.GroundStationId.Length != 0) {
        GroundStationId = other.GroundStationId;
      }
      if (other.GroundStationCountryCode.Length != 0) {
        GroundStationCountryCode = other.GroundStationCountryCode;
      }
      if (other.MaxElevationDegrees != 0D) {
        MaxElevationDegrees = other.MaxElevationDegrees;
      }
      if (other.maxElevationTime_ != null) {
        if (maxElevationTime_ == null) {
          MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxElevationTime.MergeFrom(other.MaxElevationTime);
      }
      channelSetToken_.Add(other.channelSetToken_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (aosTime_ == null) {
              AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosTime);
            break;
          }
          case 26: {
            if (losTime_ == null) {
              LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LosTime);
            break;
          }
          case 33: {
            GroundStationLatitude = input.ReadDouble();
            break;
          }
          case 41: {
            GroundStationLongitude = input.ReadDouble();
            break;
          }
          case 50: {
            GroundStationCountryCode = input.ReadString();
            break;
          }
          case 57: {
            MaxElevationDegrees = input.ReadDouble();
            break;
          }
          case 66: {
            if (maxElevationTime_ == null) {
              MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxElevationTime);
            break;
          }
          case 90: {
            channelSetToken_.AddEntriesFrom(input, _repeated_channelSetToken_codec);
            break;
          }
          case 98: {
            GroundStationOrganizationName = input.ReadString();
            break;
          }
          case 106: {
            GroundStationId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (aosTime_ == null) {
              AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosTime);
            break;
          }
          case 26: {
            if (losTime_ == null) {
              LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LosTime);
            break;
          }
          case 33: {
            GroundStationLatitude = input.ReadDouble();
            break;
          }
          case 41: {
            GroundStationLongitude = input.ReadDouble();
            break;
          }
          case 50: {
            GroundStationCountryCode = input.ReadString();
            break;
          }
          case 57: {
            MaxElevationDegrees = input.ReadDouble();
            break;
          }
          case 66: {
            if (maxElevationTime_ == null) {
              MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxElevationTime);
            break;
          }
          case 90: {
            channelSetToken_.AddEntriesFrom(ref input, _repeated_channelSetToken_codec);
            break;
          }
          case 98: {
            GroundStationOrganizationName = input.ReadString();
            break;
          }
          case 106: {
            GroundStationId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Pass message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A mapping of channel set to its unique reservation token.
      /// </summary>
      public sealed partial class ChannelSetToken : pb::IMessage<ChannelSetToken>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ChannelSetToken> _parser = new pb::MessageParser<ChannelSetToken>(() => new ChannelSetToken());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChannelSetToken> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Stellarstation.Api.V1.Pass.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChannelSetToken() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChannelSetToken(ChannelSetToken other) : this() {
          channelSet_ = other.channelSet_ != null ? other.channelSet_.Clone() : null;
          reservationToken_ = other.reservationToken_;
          unitPrice_ = other.unitPrice_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChannelSetToken Clone() {
          return new ChannelSetToken(this);
        }

        /// <summary>Field number for the "channel_set" field.</summary>
        public const int ChannelSetFieldNumber = 1;
        private global::Stellarstation.Api.V1.ChannelSet channelSet_;
        /// <summary>
        /// A channel set that can be reserved.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Stellarstation.Api.V1.ChannelSet ChannelSet {
          get { return channelSet_; }
          set {
            channelSet_ = value;
          }
        }

        /// <summary>Field number for the "reservation_token" field.</summary>
        public const int ReservationTokenFieldNumber = 2;
        private string reservationToken_ = "";
        /// <summary>
        /// A unique token for this pass, specific to this channel set, that can
        /// be used for scheduling it by copying to ReservePassRequest.reservation_token.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReservationToken {
          get { return reservationToken_; }
          set {
            reservationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unit_price" field.</summary>
        public const int UnitPriceFieldNumber = 3;
        private double unitPrice_;
        /// <summary>
        /// The price per minute (USD) for this pass and channel set combination.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double UnitPrice {
          get { return unitPrice_; }
          set {
            unitPrice_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChannelSetToken);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChannelSetToken other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ChannelSet, other.ChannelSet)) return false;
          if (ReservationToken != other.ReservationToken) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnitPrice, other.UnitPrice)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channelSet_ != null) hash ^= ChannelSet.GetHashCode();
          if (ReservationToken.Length != 0) hash ^= ReservationToken.GetHashCode();
          if (UnitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnitPrice);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (channelSet_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ChannelSet);
          }
          if (ReservationToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ReservationToken);
          }
          if (UnitPrice != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(UnitPrice);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (channelSet_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ChannelSet);
          }
          if (ReservationToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ReservationToken);
          }
          if (UnitPrice != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(UnitPrice);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channelSet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelSet);
          }
          if (ReservationToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ReservationToken);
          }
          if (UnitPrice != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChannelSetToken other) {
          if (other == null) {
            return;
          }
          if (other.channelSet_ != null) {
            if (channelSet_ == null) {
              ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
            }
            ChannelSet.MergeFrom(other.ChannelSet);
          }
          if (other.ReservationToken.Length != 0) {
            ReservationToken = other.ReservationToken;
          }
          if (other.UnitPrice != 0D) {
            UnitPrice = other.UnitPrice;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channelSet_ == null) {
                  ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
                }
                input.ReadMessage(ChannelSet);
                break;
              }
              case 18: {
                ReservationToken = input.ReadString();
                break;
              }
              case 25: {
                UnitPrice = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (channelSet_ == null) {
                  ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
                }
                input.ReadMessage(ChannelSet);
                break;
              }
              case 18: {
                ReservationToken = input.ReadString();
                break;
              }
              case 25: {
                UnitPrice = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Metadata for telemetry downlinked during a pass.
  /// </summary>
  public sealed partial class TelemetryMetadata : pb::IMessage<TelemetryMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TelemetryMetadata> _parser = new pb::MessageParser<TelemetryMetadata>(() => new TelemetryMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryMetadata(TelemetryMetadata other) : this() {
      url_ = other.url_;
      dataType_ = other.dataType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryMetadata Clone() {
      return new TelemetryMetadata(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// URL of the data. This URL is valid for one hour after being returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType dataType_ = global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw;
    /// <summary>
    /// The type of data received during downlinking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (DataType != other.DataType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (DataType != global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw) hash ^= DataType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (DataType != global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (DataType != global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (DataType != global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.DataType != global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType.Raw) {
        DataType = other.DataType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            DataType = (global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            DataType = (global::Stellarstation.Api.V1.TelemetryMetadata.Types.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TelemetryMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of data available at the above URL.
      /// </summary>
      public enum DataType {
        /// <summary>
        /// Raw IQ data.
        /// </summary>
        [pbr::OriginalName("RAW")] Raw = 0,
        /// <summary>
        /// Demodulated IQ data.
        /// </summary>
        [pbr::OriginalName("DEMODULATED")] Demodulated = 1,
        /// <summary>
        /// Decoded data.
        /// </summary>
        [pbr::OriginalName("DECODED")] Decoded = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A plan, specifying a time range within which a satellite will be communicated with.
  ///
  /// Next ID: 21
  /// </summary>
  public sealed partial class Plan : pb::IMessage<Plan>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Plan> _parser = new pb::MessageParser<Plan>(() => new Plan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plan(Plan other) : this() {
      id_ = other.id_;
      satelliteId_ = other.satelliteId_;
      satelliteOrganizationName_ = other.satelliteOrganizationName_;
      status_ = other.status_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      aosTime_ = other.aosTime_ != null ? other.aosTime_.Clone() : null;
      losTime_ = other.losTime_ != null ? other.losTime_.Clone() : null;
      groundStationLatitude_ = other.groundStationLatitude_;
      groundStationLongitude_ = other.groundStationLongitude_;
      groundStationCountryCode_ = other.groundStationCountryCode_;
      groundStationOrganizationName_ = other.groundStationOrganizationName_;
      groundStationId_ = other.groundStationId_;
      maxElevationDegrees_ = other.maxElevationDegrees_;
      maxElevationTime_ = other.maxElevationTime_ != null ? other.maxElevationTime_.Clone() : null;
      telemetryMetadata_ = other.telemetryMetadata_.Clone();
      channelSet_ = other.channelSet_ != null ? other.channelSet_.Clone() : null;
      unitPrice_ = other.unitPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plan Clone() {
      return new Plan(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The unique ID of the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 2;
    private string satelliteId_ = "";
    /// <summary>
    /// The id of the satellite to be tracked in the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "satellite_organization_name" field.</summary>
    public const int SatelliteOrganizationNameFieldNumber = 17;
    private string satelliteOrganizationName_ = "";
    /// <summary>
    /// The organization name of the satellite to be tracked in the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteOrganizationName {
      get { return satelliteOrganizationName_; }
      set {
        satelliteOrganizationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Stellarstation.Api.V1.Plan.Types.Status status_ = global::Stellarstation.Api.V1.Plan.Types.Status.Reserved;
    /// <summary>
    /// The status of this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Plan.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The start of the time window reserved for the plan. This value does not change over time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The end of the time window reserved for the plan. This value does not change over time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "aos_time" field.</summary>
    public const int AosTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp aosTime_;
    /// <summary>
    /// The time of Acquisition of Signal (AOS) between the ground station and satellite in this plan.
    ///
    /// This value is never before 'start_time'. It may change over time (for example, if updated
    /// TLE becomes available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AosTime {
      get { return aosTime_; }
      set {
        aosTime_ = value;
      }
    }

    /// <summary>Field number for the "los_time" field.</summary>
    public const int LosTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp losTime_;
    /// <summary>
    /// The time of Loss of Signal (LOS) between the ground station and satellite in this plan.
    ///
    /// This value is never after 'end_time'. It may change over time (for example, if updated
    /// TLE becomes available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LosTime {
      get { return losTime_; }
      set {
        losTime_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_latitude" field.</summary>
    public const int GroundStationLatitudeFieldNumber = 6;
    private double groundStationLatitude_;
    /// <summary>
    /// The latitude, in degrees, of the ground station's location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundStationLatitude {
      get { return groundStationLatitude_; }
      set {
        groundStationLatitude_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_longitude" field.</summary>
    public const int GroundStationLongitudeFieldNumber = 7;
    private double groundStationLongitude_;
    /// <summary>
    /// The longitude, in degrees, of the ground station's location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundStationLongitude {
      get { return groundStationLongitude_; }
      set {
        groundStationLongitude_ = value;
      }
    }

    /// <summary>Field number for the "ground_station_country_code" field.</summary>
    public const int GroundStationCountryCodeFieldNumber = 8;
    private string groundStationCountryCode_ = "";
    /// <summary>
    /// The ISO 3166-1 alpha-2 2-letter country code for the ground station's location.
    /// See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationCountryCode {
      get { return groundStationCountryCode_; }
      set {
        groundStationCountryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ground_station_organization_name" field.</summary>
    public const int GroundStationOrganizationNameFieldNumber = 18;
    private string groundStationOrganizationName_ = "";
    /// <summary>
    /// The organization name of the ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationOrganizationName {
      get { return groundStationOrganizationName_; }
      set {
        groundStationOrganizationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ground_station_id" field.</summary>
    public const int GroundStationIdFieldNumber = 20;
    private string groundStationId_ = "";
    /// <summary>
    /// The ID of the ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroundStationId {
      get { return groundStationId_; }
      set {
        groundStationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_elevation_degrees" field.</summary>
    public const int MaxElevationDegreesFieldNumber = 9;
    private double maxElevationDegrees_;
    /// <summary>
    /// The max elevation during the plan, in degrees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxElevationDegrees {
      get { return maxElevationDegrees_; }
      set {
        maxElevationDegrees_ = value;
      }
    }

    /// <summary>Field number for the "max_elevation_time" field.</summary>
    public const int MaxElevationTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxElevationTime_;
    /// <summary>
    /// The time of the max elevation during the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxElevationTime {
      get { return maxElevationTime_; }
      set {
        maxElevationTime_ = value;
      }
    }

    /// <summary>Field number for the "telemetry_metadata" field.</summary>
    public const int TelemetryMetadataFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Stellarstation.Api.V1.TelemetryMetadata> _repeated_telemetryMetadata_codec
        = pb::FieldCodec.ForMessage(106, global::Stellarstation.Api.V1.TelemetryMetadata.Parser);
    private readonly pbc::RepeatedField<global::Stellarstation.Api.V1.TelemetryMetadata> telemetryMetadata_ = new pbc::RepeatedField<global::Stellarstation.Api.V1.TelemetryMetadata>();
    /// <summary>
    /// Metadata for telemetry received during the pass. Only populated when the pass has completed
    /// successfully and data processing is complete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stellarstation.Api.V1.TelemetryMetadata> TelemetryMetadata {
      get { return telemetryMetadata_; }
    }

    /// <summary>Field number for the "channel_set" field.</summary>
    public const int ChannelSetFieldNumber = 16;
    private global::Stellarstation.Api.V1.ChannelSet channelSet_;
    /// <summary>
    /// The channel set used to reserve this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.ChannelSet ChannelSet {
      get { return channelSet_; }
      set {
        channelSet_ = value;
      }
    }

    /// <summary>Field number for the "unit_price" field.</summary>
    public const int UnitPriceFieldNumber = 19;
    private double unitPrice_;
    /// <summary>
    /// The price per minute (USD) for this plan set by the ground station owner at the time of reservation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnitPrice {
      get { return unitPrice_; }
      set {
        unitPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SatelliteId != other.SatelliteId) return false;
      if (SatelliteOrganizationName != other.SatelliteOrganizationName) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(AosTime, other.AosTime)) return false;
      if (!object.Equals(LosTime, other.LosTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundStationLatitude, other.GroundStationLatitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundStationLongitude, other.GroundStationLongitude)) return false;
      if (GroundStationCountryCode != other.GroundStationCountryCode) return false;
      if (GroundStationOrganizationName != other.GroundStationOrganizationName) return false;
      if (GroundStationId != other.GroundStationId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxElevationDegrees, other.MaxElevationDegrees)) return false;
      if (!object.Equals(MaxElevationTime, other.MaxElevationTime)) return false;
      if(!telemetryMetadata_.Equals(other.telemetryMetadata_)) return false;
      if (!object.Equals(ChannelSet, other.ChannelSet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnitPrice, other.UnitPrice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (SatelliteOrganizationName.Length != 0) hash ^= SatelliteOrganizationName.GetHashCode();
      if (Status != global::Stellarstation.Api.V1.Plan.Types.Status.Reserved) hash ^= Status.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (aosTime_ != null) hash ^= AosTime.GetHashCode();
      if (losTime_ != null) hash ^= LosTime.GetHashCode();
      if (GroundStationLatitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundStationLatitude);
      if (GroundStationLongitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundStationLongitude);
      if (GroundStationCountryCode.Length != 0) hash ^= GroundStationCountryCode.GetHashCode();
      if (GroundStationOrganizationName.Length != 0) hash ^= GroundStationOrganizationName.GetHashCode();
      if (GroundStationId.Length != 0) hash ^= GroundStationId.GetHashCode();
      if (MaxElevationDegrees != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxElevationDegrees);
      if (maxElevationTime_ != null) hash ^= MaxElevationTime.GetHashCode();
      hash ^= telemetryMetadata_.GetHashCode();
      if (channelSet_ != null) hash ^= ChannelSet.GetHashCode();
      if (UnitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnitPrice);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SatelliteId);
      }
      if (Status != global::Stellarstation.Api.V1.Plan.Types.Status.Reserved) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (aosTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AosTime);
      }
      if (losTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(GroundStationLatitude);
      }
      if (GroundStationLongitude != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(GroundStationLongitude);
      }
      if (GroundStationCountryCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroundStationCountryCode);
      }
      if (MaxElevationDegrees != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MaxElevationDegrees);
      }
      if (maxElevationTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MaxElevationTime);
      }
      telemetryMetadata_.WriteTo(output, _repeated_telemetryMetadata_codec);
      if (startTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EndTime);
      }
      if (channelSet_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ChannelSet);
      }
      if (SatelliteOrganizationName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SatelliteOrganizationName);
      }
      if (GroundStationOrganizationName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(GroundStationOrganizationName);
      }
      if (UnitPrice != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(UnitPrice);
      }
      if (GroundStationId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(GroundStationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SatelliteId);
      }
      if (Status != global::Stellarstation.Api.V1.Plan.Types.Status.Reserved) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (aosTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AosTime);
      }
      if (losTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(GroundStationLatitude);
      }
      if (GroundStationLongitude != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(GroundStationLongitude);
      }
      if (GroundStationCountryCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroundStationCountryCode);
      }
      if (MaxElevationDegrees != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MaxElevationDegrees);
      }
      if (maxElevationTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MaxElevationTime);
      }
      telemetryMetadata_.WriteTo(ref output, _repeated_telemetryMetadata_codec);
      if (startTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EndTime);
      }
      if (channelSet_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ChannelSet);
      }
      if (SatelliteOrganizationName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SatelliteOrganizationName);
      }
      if (GroundStationOrganizationName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(GroundStationOrganizationName);
      }
      if (UnitPrice != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(UnitPrice);
      }
      if (GroundStationId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(GroundStationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (SatelliteOrganizationName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SatelliteOrganizationName);
      }
      if (Status != global::Stellarstation.Api.V1.Plan.Types.Status.Reserved) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (aosTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AosTime);
      }
      if (losTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LosTime);
      }
      if (GroundStationLatitude != 0D) {
        size += 1 + 8;
      }
      if (GroundStationLongitude != 0D) {
        size += 1 + 8;
      }
      if (GroundStationCountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroundStationCountryCode);
      }
      if (GroundStationOrganizationName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GroundStationOrganizationName);
      }
      if (GroundStationId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GroundStationId);
      }
      if (MaxElevationDegrees != 0D) {
        size += 1 + 8;
      }
      if (maxElevationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxElevationTime);
      }
      size += telemetryMetadata_.CalculateSize(_repeated_telemetryMetadata_codec);
      if (channelSet_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChannelSet);
      }
      if (UnitPrice != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plan other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      if (other.SatelliteOrganizationName.Length != 0) {
        SatelliteOrganizationName = other.SatelliteOrganizationName;
      }
      if (other.Status != global::Stellarstation.Api.V1.Plan.Types.Status.Reserved) {
        Status = other.Status;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.aosTime_ != null) {
        if (aosTime_ == null) {
          AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AosTime.MergeFrom(other.AosTime);
      }
      if (other.losTime_ != null) {
        if (losTime_ == null) {
          LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LosTime.MergeFrom(other.LosTime);
      }
      if (other.GroundStationLatitude != 0D) {
        GroundStationLatitude = other.GroundStationLatitude;
      }
      if (other.GroundStationLongitude != 0D) {
        GroundStationLongitude = other.GroundStationLongitude;
      }
      if (other.GroundStationCountryCode.Length != 0) {
        GroundStationCountryCode = other.GroundStationCountryCode;
      }
      if (other.GroundStationOrganizationName.Length != 0) {
        GroundStationOrganizationName = other.GroundStationOrganizationName;
      }
      if (other.GroundStationId.Length != 0) {
        GroundStationId = other.GroundStationId;
      }
      if (other.MaxElevationDegrees != 0D) {
        MaxElevationDegrees = other.MaxElevationDegrees;
      }
      if (other.maxElevationTime_ != null) {
        if (maxElevationTime_ == null) {
          MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxElevationTime.MergeFrom(other.MaxElevationTime);
      }
      telemetryMetadata_.Add(other.telemetryMetadata_);
      if (other.channelSet_ != null) {
        if (channelSet_ == null) {
          ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
        }
        ChannelSet.MergeFrom(other.ChannelSet);
      }
      if (other.UnitPrice != 0D) {
        UnitPrice = other.UnitPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SatelliteId = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Stellarstation.Api.V1.Plan.Types.Status) input.ReadEnum();
            break;
          }
          case 34: {
            if (aosTime_ == null) {
              AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosTime);
            break;
          }
          case 42: {
            if (losTime_ == null) {
              LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LosTime);
            break;
          }
          case 49: {
            GroundStationLatitude = input.ReadDouble();
            break;
          }
          case 57: {
            GroundStationLongitude = input.ReadDouble();
            break;
          }
          case 66: {
            GroundStationCountryCode = input.ReadString();
            break;
          }
          case 73: {
            MaxElevationDegrees = input.ReadDouble();
            break;
          }
          case 82: {
            if (maxElevationTime_ == null) {
              MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxElevationTime);
            break;
          }
          case 106: {
            telemetryMetadata_.AddEntriesFrom(input, _repeated_telemetryMetadata_codec);
            break;
          }
          case 114: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 122: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 130: {
            if (channelSet_ == null) {
              ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
            }
            input.ReadMessage(ChannelSet);
            break;
          }
          case 138: {
            SatelliteOrganizationName = input.ReadString();
            break;
          }
          case 146: {
            GroundStationOrganizationName = input.ReadString();
            break;
          }
          case 153: {
            UnitPrice = input.ReadDouble();
            break;
          }
          case 162: {
            GroundStationId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SatelliteId = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Stellarstation.Api.V1.Plan.Types.Status) input.ReadEnum();
            break;
          }
          case 34: {
            if (aosTime_ == null) {
              AosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AosTime);
            break;
          }
          case 42: {
            if (losTime_ == null) {
              LosTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LosTime);
            break;
          }
          case 49: {
            GroundStationLatitude = input.ReadDouble();
            break;
          }
          case 57: {
            GroundStationLongitude = input.ReadDouble();
            break;
          }
          case 66: {
            GroundStationCountryCode = input.ReadString();
            break;
          }
          case 73: {
            MaxElevationDegrees = input.ReadDouble();
            break;
          }
          case 82: {
            if (maxElevationTime_ == null) {
              MaxElevationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxElevationTime);
            break;
          }
          case 106: {
            telemetryMetadata_.AddEntriesFrom(ref input, _repeated_telemetryMetadata_codec);
            break;
          }
          case 114: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 122: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 130: {
            if (channelSet_ == null) {
              ChannelSet = new global::Stellarstation.Api.V1.ChannelSet();
            }
            input.ReadMessage(ChannelSet);
            break;
          }
          case 138: {
            SatelliteOrganizationName = input.ReadString();
            break;
          }
          case 146: {
            GroundStationOrganizationName = input.ReadString();
            break;
          }
          case 153: {
            UnitPrice = input.ReadDouble();
            break;
          }
          case 162: {
            GroundStationId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Plan message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A description of the status of a plan.
      /// </summary>
      public enum Status {
        /// <summary>
        /// The plan is reserved for execution in the future at `aos_time`.
        /// </summary>
        [pbr::OriginalName("RESERVED")] Reserved = 0,
        /// <summary>
        /// The plan is currently executing and will end in the future at `los_time`.
        /// </summary>
        [pbr::OriginalName("EXECUTING")] Executing = 1,
        /// <summary>
        /// The plan already finished executing successfully.
        /// </summary>
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 2,
        /// <summary>
        /// The plan failed to execute correctly.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 3,
        /// <summary>
        /// The plan was canceled. This can be explicitly by calling `CancelPlan` or implicit due to
        /// cancellation by the ground station in the plan (e.g., due to bad weather).
        /// </summary>
        [pbr::OriginalName("CANCELED")] Canceled = 4,
        /// <summary>
        /// The plan completed execution and telemetry data is being processed.
        /// </summary>
        [pbr::OriginalName("PROCESSING")] Processing = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request for the 'AddTle' method.
  /// </summary>
  public sealed partial class AddTleRequest : pb::IMessage<AddTleRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddTleRequest> _parser = new pb::MessageParser<AddTleRequest>(() => new AddTleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleRequest(AddTleRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      tle_ = other.tle_ != null ? other.tle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleRequest Clone() {
      return new AddTleRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite to add TLE for. The ID can be found on the StellarStation
    /// Console page for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tle" field.</summary>
    public const int TleFieldNumber = 2;
    private global::Stellarstation.Api.V1.Orbit.Tle tle_;
    /// <summary>
    /// The TLE to be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Orbit.Tle Tle {
      get { return tle_; }
      set {
        tle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      if (!object.Equals(Tle, other.Tle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (tle_ != null) hash ^= Tle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (tle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (tle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (tle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTleRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      if (other.tle_ != null) {
        if (tle_ == null) {
          Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
        }
        Tle.MergeFrom(other.Tle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 18: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the `AddTle` method.
  /// </summary>
  public sealed partial class AddTleResponse : pb::IMessage<AddTleResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddTleResponse> _parser = new pb::MessageParser<AddTleResponse>(() => new AddTleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleResponse(AddTleResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTleResponse Clone() {
      return new AddTleResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTleResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the 'GetTle' method.
  /// </summary>
  public sealed partial class GetTleRequest : pb::IMessage<GetTleRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTleRequest> _parser = new pb::MessageParser<GetTleRequest>(() => new GetTleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleRequest(GetTleRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleRequest Clone() {
      return new GetTleRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite for which to fetch TLE. The ID can be found on the StellarStation
    /// Console page for the satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTleRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the 'GetTle' method.
  /// </summary>
  public sealed partial class GetTleResponse : pb::IMessage<GetTleResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTleResponse> _parser = new pb::MessageParser<GetTleResponse>(() => new GetTleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleResponse(GetTleResponse other) : this() {
      tle_ = other.tle_ != null ? other.tle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTleResponse Clone() {
      return new GetTleResponse(this);
    }

    /// <summary>Field number for the "tle" field.</summary>
    public const int TleFieldNumber = 1;
    private global::Stellarstation.Api.V1.Orbit.Tle tle_;
    /// <summary>
    /// The TLE for the given satellite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Orbit.Tle Tle {
      get { return tle_; }
      set {
        tle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tle, other.Tle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tle_ != null) hash ^= Tle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTleResponse other) {
      if (other == null) {
        return;
      }
      if (other.tle_ != null) {
        if (tle_ == null) {
          Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
        }
        Tle.MergeFrom(other.Tle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the `SetTleSource` method.
  /// </summary>
  public sealed partial class SetTleSourceRequest : pb::IMessage<SetTleSourceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetTleSourceRequest> _parser = new pb::MessageParser<SetTleSourceRequest>(() => new SetTleSourceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTleSourceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceRequest(SetTleSourceRequest other) : this() {
      satelliteId_ = other.satelliteId_;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceRequest Clone() {
      return new SetTleSourceRequest(this);
    }

    /// <summary>Field number for the "satellite_id" field.</summary>
    public const int SatelliteIdFieldNumber = 1;
    private string satelliteId_ = "";
    /// <summary>
    /// The ID of the satellite to set the TLE for.
    ///
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SatelliteId {
      get { return satelliteId_; }
      set {
        satelliteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source source_ = global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown;
    /// <summary>
    /// The source of the TLE the satellite will use for pass calculations.
    ///
    /// Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTleSourceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTleSourceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatelliteId != other.SatelliteId) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatelliteId.Length != 0) hash ^= SatelliteId.GetHashCode();
      if (Source != global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (Source != global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatelliteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SatelliteId);
      }
      if (Source != global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatelliteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SatelliteId);
      }
      if (Source != global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTleSourceRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatelliteId.Length != 0) {
        SatelliteId = other.SatelliteId;
      }
      if (other.Source != global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source.Unknown) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 16: {
            Source = (global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SatelliteId = input.ReadString();
            break;
          }
          case 16: {
            Source = (global::Stellarstation.Api.V1.SetTleSourceRequest.Types.Source) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SetTleSourceRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The source of the TLE.
      /// </summary>
      public enum Source {
        /// <summary>
        /// This is not allowed and will cause an error.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Provided by NORAD.
        /// </summary>
        [pbr::OriginalName("NORAD")] Norad = 1,
        /// <summary>
        /// Manually provided by the owner of the satellite.
        /// </summary>
        [pbr::OriginalName("MANUAL")] Manual = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Response for the `SetTleSource` method.
  /// </summary>
  public sealed partial class SetTleSourceResponse : pb::IMessage<SetTleSourceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetTleSourceResponse> _parser = new pb::MessageParser<SetTleSourceResponse>(() => new SetTleSourceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTleSourceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.StellarstationReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceResponse(SetTleSourceResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTleSourceResponse Clone() {
      return new SetTleSourceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTleSourceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTleSourceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTleSourceResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
