// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/transport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stellarstation.Api.V1 {

  /// <summary>Holder for reflection information generated from stellarstation/api/v1/transport.proto</summary>
  public static partial class TransportReflection {

    #region Descriptor
    /// <summary>File descriptor for stellarstation/api/v1/transport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVzdGVsbGFyc3RhdGlvbi9hcGkvdjEvdHJhbnNwb3J0LnByb3RvEhVzdGVs",
            "bGFyc3RhdGlvbi5hcGkudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAu",
            "cHJvdG8aMXN0ZWxsYXJzdGF0aW9uL2FwaS92MS9tb25pdG9yaW5nL21vbml0",
            "b3JpbmcucHJvdG8i+gEKCVRlbGVtZXRyeRIvCgdmcmFtaW5nGAEgASgOMh4u",
            "c3RlbGxhcnN0YXRpb24uYXBpLnYxLkZyYW1pbmcSDAoEZGF0YRgCIAEoDBId",
            "ChVkb3dubGlua19mcmVxdWVuY3lfaHoYAyABKAQSPAoYdGltZV9maXJzdF9i",
            "eXRlX3JlY2VpdmVkGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBI7Chd0aW1lX2xhc3RfYnl0ZV9yZWNlaXZlZBgFIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASFAoMZnJhbWVfaGVhZGVyGAYgASgMIvABCgtT",
            "dHJlYW1FdmVudBISCgpyZXF1ZXN0X2lkGAEgASgJElcKDGNvbW1hbmRfc2Vu",
            "dBgCIAEoCzI/LnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5TdHJlYW1FdmVudC5D",
            "b21tYW5kU2VudEZyb21Hcm91bmRTdGF0aW9uSAASSwoVcGxhbl9tb25pdG9y",
            "aW5nX2V2ZW50GAMgASgLMiouc3RlbGxhcnN0YXRpb24uYXBpLnYxLlBsYW5N",
            "b25pdG9yaW5nRXZlbnRIABoeChxDb21tYW5kU2VudEZyb21Hcm91bmRTdGF0",
            "aW9uQgcKBUV2ZW50IsACChNQbGFuTW9uaXRvcmluZ0V2ZW50Eg8KB3BsYW5f",
            "aWQYASABKAkSZAocZ3JvdW5kX3N0YXRpb25fY29uZmlndXJhdGlvbhgCIAEo",
            "CzI8LnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5tb25pdG9yaW5nLkdyb3VuZFN0",
            "YXRpb25Db25maWd1cmF0aW9uSAASVAoUZ3JvdW5kX3N0YXRpb25fc3RhdGUY",
            "AyABKAsyNC5zdGVsbGFyc3RhdGlvbi5hcGkudjEubW9uaXRvcmluZy5Hcm91",
            "bmRTdGF0aW9uU3RhdGVIABJUChRncm91bmRfc3RhdGlvbl9ldmVudBgEIAEo",
            "CzI0LnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5tb25pdG9yaW5nLkdyb3VuZFN0",
            "YXRpb25FdmVudEgAQgYKBEluZm8qbAoHRnJhbWluZxINCglCSVRTVFJFQU0Q",
            "ABIICgRBWDI1EAESBgoCSVEQAhINCglJTUFHRV9QTkcQAxIOCgpJTUFHRV9K",
            "UEVHEAQSEgoORlJFRV9URVhUX1VURjgQBRINCglXQVRFUkZBTEwQBkJhChlj",
            "b20uc3RlbGxhcnN0YXRpb24uYXBpLnYxQg5UcmFuc3BvcnRQcm90b1ABWjJn",
            "aXRodWIuY29tL2luZm9zdGVsbGFyaW5jL2dvLXN0ZWxsYXJzdGF0aW9uL2Fw",
            "aS92MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stellarstation.Api.V1.Framing), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Telemetry), global::Stellarstation.Api.V1.Telemetry.Parser, new[]{ "Framing", "Data", "DownlinkFrequencyHz", "TimeFirstByteReceived", "TimeLastByteReceived", "FrameHeader" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.StreamEvent), global::Stellarstation.Api.V1.StreamEvent.Parser, new[]{ "RequestId", "CommandSent", "PlanMonitoringEvent" }, new[]{ "Event" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation), global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation.Parser, null, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.PlanMonitoringEvent), global::Stellarstation.Api.V1.PlanMonitoringEvent.Parser, new[]{ "PlanId", "GroundStationConfiguration", "GroundStationState", "GroundStationEvent" }, new[]{ "Info" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A type of framing of a binary payload used in satellite communicaation.
  /// </summary>
  public enum Framing {
    /// <summary>
    /// No framing done in the API. All payloads are assumed to be pre-framed and ready for
    /// transmission to the satellite or API client with no additional processing.
    /// </summary>
    [pbr::OriginalName("BITSTREAM")] Bitstream = 0,
    /// <summary>
    /// AX.25 (Amateur X.25) framing - https://en.wikipedia.org/wiki/AX.25
    /// </summary>
    [pbr::OriginalName("AX25")] Ax25 = 1,
    /// <summary>
    /// No framing or demodulation done in the API. Raw IQ data is sent to the API client with no
    /// additional processing.
    /// </summary>
    [pbr::OriginalName("IQ")] Iq = 2,
    /// <summary>
    /// A decoded PNG image frame.
    /// </summary>
    [pbr::OriginalName("IMAGE_PNG")] ImagePng = 3,
    /// <summary>
    /// A decoded JPEG image.
    /// </summary>
    [pbr::OriginalName("IMAGE_JPEG")] ImageJpeg = 4,
    /// <summary>
    /// Completely arbitrary, freeform text contained in a frame.
    /// </summary>
    [pbr::OriginalName("FREE_TEXT_UTF8")] FreeTextUtf8 = 5,
    /// <summary>
    /// A waterfall diagram. This is actually for the whole plan and does not correspond to an
    /// individual frame.
    /// </summary>
    [pbr::OriginalName("WATERFALL")] Waterfall = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A chunk or frame of telemetry data that has been received from a satellite.
  /// </summary>
  public sealed partial class Telemetry : pb::IMessage<Telemetry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Telemetry> _parser = new pb::MessageParser<Telemetry>(() => new Telemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Telemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.TransportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry(Telemetry other) : this() {
      framing_ = other.framing_;
      data_ = other.data_;
      downlinkFrequencyHz_ = other.downlinkFrequencyHz_;
      timeFirstByteReceived_ = other.timeFirstByteReceived_ != null ? other.timeFirstByteReceived_.Clone() : null;
      timeLastByteReceived_ = other.timeLastByteReceived_ != null ? other.timeLastByteReceived_.Clone() : null;
      frameHeader_ = other.frameHeader_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Telemetry Clone() {
      return new Telemetry(this);
    }

    /// <summary>Field number for the "framing" field.</summary>
    public const int FramingFieldNumber = 1;
    private global::Stellarstation.Api.V1.Framing framing_ = global::Stellarstation.Api.V1.Framing.Bitstream;
    /// <summary>
    /// The framing of this telemetry data. If `RAW`, this telemetry will be an arbitrarily sized
    /// chunk of the bitstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Framing Framing {
      get { return framing_; }
      set {
        framing_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// The payload of this telemetry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downlink_frequency_hz" field.</summary>
    public const int DownlinkFrequencyHzFieldNumber = 3;
    private ulong downlinkFrequencyHz_;
    /// <summary>
    /// The actual downlink frequency, in Hz, used when receiving `data`, including adjustments for
    /// doppler shift.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DownlinkFrequencyHz {
      get { return downlinkFrequencyHz_; }
      set {
        downlinkFrequencyHz_ = value;
      }
    }

    /// <summary>Field number for the "time_first_byte_received" field.</summary>
    public const int TimeFirstByteReceivedFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timeFirstByteReceived_;
    /// <summary>
    /// Timestamp when the first byte of `data` was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimeFirstByteReceived {
      get { return timeFirstByteReceived_; }
      set {
        timeFirstByteReceived_ = value;
      }
    }

    /// <summary>Field number for the "time_last_byte_received" field.</summary>
    public const int TimeLastByteReceivedFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timeLastByteReceived_;
    /// <summary>
    /// Timestamp when the last byte of `data` was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimeLastByteReceived {
      get { return timeLastByteReceived_; }
      set {
        timeLastByteReceived_ = value;
      }
    }

    /// <summary>Field number for the "frame_header" field.</summary>
    public const int FrameHeaderFieldNumber = 6;
    private pb::ByteString frameHeader_ = pb::ByteString.Empty;
    /// <summary>
    /// The binary header of the telemetry frame, if `framing` is not `RAW`.
    ///
    /// * AX25 - This is either Address + Control, or Address + Control + PID. The checksum is not
    ///          returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FrameHeader {
      get { return frameHeader_; }
      set {
        frameHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Telemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Telemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Framing != other.Framing) return false;
      if (Data != other.Data) return false;
      if (DownlinkFrequencyHz != other.DownlinkFrequencyHz) return false;
      if (!object.Equals(TimeFirstByteReceived, other.TimeFirstByteReceived)) return false;
      if (!object.Equals(TimeLastByteReceived, other.TimeLastByteReceived)) return false;
      if (FrameHeader != other.FrameHeader) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Framing != global::Stellarstation.Api.V1.Framing.Bitstream) hash ^= Framing.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (DownlinkFrequencyHz != 0UL) hash ^= DownlinkFrequencyHz.GetHashCode();
      if (timeFirstByteReceived_ != null) hash ^= TimeFirstByteReceived.GetHashCode();
      if (timeLastByteReceived_ != null) hash ^= TimeLastByteReceived.GetHashCode();
      if (FrameHeader.Length != 0) hash ^= FrameHeader.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Framing != global::Stellarstation.Api.V1.Framing.Bitstream) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Framing);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (DownlinkFrequencyHz != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DownlinkFrequencyHz);
      }
      if (timeFirstByteReceived_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeFirstByteReceived);
      }
      if (timeLastByteReceived_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimeLastByteReceived);
      }
      if (FrameHeader.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(FrameHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Framing != global::Stellarstation.Api.V1.Framing.Bitstream) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Framing);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (DownlinkFrequencyHz != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DownlinkFrequencyHz);
      }
      if (timeFirstByteReceived_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeFirstByteReceived);
      }
      if (timeLastByteReceived_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimeLastByteReceived);
      }
      if (FrameHeader.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(FrameHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Framing != global::Stellarstation.Api.V1.Framing.Bitstream) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Framing);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (DownlinkFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DownlinkFrequencyHz);
      }
      if (timeFirstByteReceived_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeFirstByteReceived);
      }
      if (timeLastByteReceived_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeLastByteReceived);
      }
      if (FrameHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FrameHeader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Telemetry other) {
      if (other == null) {
        return;
      }
      if (other.Framing != global::Stellarstation.Api.V1.Framing.Bitstream) {
        Framing = other.Framing;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.DownlinkFrequencyHz != 0UL) {
        DownlinkFrequencyHz = other.DownlinkFrequencyHz;
      }
      if (other.timeFirstByteReceived_ != null) {
        if (timeFirstByteReceived_ == null) {
          TimeFirstByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimeFirstByteReceived.MergeFrom(other.TimeFirstByteReceived);
      }
      if (other.timeLastByteReceived_ != null) {
        if (timeLastByteReceived_ == null) {
          TimeLastByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TimeLastByteReceived.MergeFrom(other.TimeLastByteReceived);
      }
      if (other.FrameHeader.Length != 0) {
        FrameHeader = other.FrameHeader;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Framing = (global::Stellarstation.Api.V1.Framing) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 24: {
            DownlinkFrequencyHz = input.ReadUInt64();
            break;
          }
          case 34: {
            if (timeFirstByteReceived_ == null) {
              TimeFirstByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimeFirstByteReceived);
            break;
          }
          case 42: {
            if (timeLastByteReceived_ == null) {
              TimeLastByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimeLastByteReceived);
            break;
          }
          case 50: {
            FrameHeader = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Framing = (global::Stellarstation.Api.V1.Framing) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 24: {
            DownlinkFrequencyHz = input.ReadUInt64();
            break;
          }
          case 34: {
            if (timeFirstByteReceived_ == null) {
              TimeFirstByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimeFirstByteReceived);
            break;
          }
          case 42: {
            if (timeLastByteReceived_ == null) {
              TimeLastByteReceived = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TimeLastByteReceived);
            break;
          }
          case 50: {
            FrameHeader = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An event that occurred while processing the stream. A `StreamEvent` will have one of several
  /// types of event payloads corresponding to event types. Many of these payloads will be empty,
  /// depending on the context of an event, but are still returned as messages to allow future
  /// extension.
  /// </summary>
  public sealed partial class StreamEvent : pb::IMessage<StreamEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamEvent> _parser = new pb::MessageParser<StreamEvent>(() => new StreamEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.TransportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent(StreamEvent other) : this() {
      requestId_ = other.requestId_;
      switch (other.EventCase) {
        case EventOneofCase.CommandSent:
          CommandSent = other.CommandSent.Clone();
          break;
        case EventOneofCase.PlanMonitoringEvent:
          PlanMonitoringEvent = other.PlanMonitoringEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent Clone() {
      return new StreamEvent(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private string requestId_ = "";
    /// <summary>
    /// The ID of the request this event corresponds to, copied from
    /// `SatelliteStreamRequest.request_id` when present. If the event doesn't correspond to a request,
    /// this is always empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_sent" field.</summary>
    public const int CommandSentFieldNumber = 2;
    /// <summary>
    /// An event indicating the commands in the request were sent by the ground station through its
    /// radio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation CommandSent {
      get { return eventCase_ == EventOneofCase.CommandSent ? (global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.CommandSent;
      }
    }

    /// <summary>Field number for the "plan_monitoring_event" field.</summary>
    public const int PlanMonitoringEventFieldNumber = 3;
    /// <summary>
    /// An event with monitoring information for a particular executed plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.PlanMonitoringEvent PlanMonitoringEvent {
      get { return eventCase_ == EventOneofCase.PlanMonitoringEvent ? (global::Stellarstation.Api.V1.PlanMonitoringEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.PlanMonitoringEvent;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "Event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      CommandSent = 2,
      PlanMonitoringEvent = 3,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(CommandSent, other.CommandSent)) return false;
      if (!object.Equals(PlanMonitoringEvent, other.PlanMonitoringEvent)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (eventCase_ == EventOneofCase.CommandSent) hash ^= CommandSent.GetHashCode();
      if (eventCase_ == EventOneofCase.PlanMonitoringEvent) hash ^= PlanMonitoringEvent.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (eventCase_ == EventOneofCase.CommandSent) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandSent);
      }
      if (eventCase_ == EventOneofCase.PlanMonitoringEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(PlanMonitoringEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (eventCase_ == EventOneofCase.CommandSent) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandSent);
      }
      if (eventCase_ == EventOneofCase.PlanMonitoringEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(PlanMonitoringEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (eventCase_ == EventOneofCase.CommandSent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandSent);
      }
      if (eventCase_ == EventOneofCase.PlanMonitoringEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlanMonitoringEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamEvent other) {
      if (other == null) {
        return;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      switch (other.EventCase) {
        case EventOneofCase.CommandSent:
          if (CommandSent == null) {
            CommandSent = new global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation();
          }
          CommandSent.MergeFrom(other.CommandSent);
          break;
        case EventOneofCase.PlanMonitoringEvent:
          if (PlanMonitoringEvent == null) {
            PlanMonitoringEvent = new global::Stellarstation.Api.V1.PlanMonitoringEvent();
          }
          PlanMonitoringEvent.MergeFrom(other.PlanMonitoringEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation subBuilder = new global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation();
            if (eventCase_ == EventOneofCase.CommandSent) {
              subBuilder.MergeFrom(CommandSent);
            }
            input.ReadMessage(subBuilder);
            CommandSent = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.PlanMonitoringEvent subBuilder = new global::Stellarstation.Api.V1.PlanMonitoringEvent();
            if (eventCase_ == EventOneofCase.PlanMonitoringEvent) {
              subBuilder.MergeFrom(PlanMonitoringEvent);
            }
            input.ReadMessage(subBuilder);
            PlanMonitoringEvent = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation subBuilder = new global::Stellarstation.Api.V1.StreamEvent.Types.CommandSentFromGroundStation();
            if (eventCase_ == EventOneofCase.CommandSent) {
              subBuilder.MergeFrom(CommandSent);
            }
            input.ReadMessage(subBuilder);
            CommandSent = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.PlanMonitoringEvent subBuilder = new global::Stellarstation.Api.V1.PlanMonitoringEvent();
            if (eventCase_ == EventOneofCase.PlanMonitoringEvent) {
              subBuilder.MergeFrom(PlanMonitoringEvent);
            }
            input.ReadMessage(subBuilder);
            PlanMonitoringEvent = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StreamEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// An event indicating the commands in the request were sent by the ground station through its
      /// radio.
      /// </summary>
      public sealed partial class CommandSentFromGroundStation : pb::IMessage<CommandSentFromGroundStation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CommandSentFromGroundStation> _parser = new pb::MessageParser<CommandSentFromGroundStation>(() => new CommandSentFromGroundStation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CommandSentFromGroundStation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Stellarstation.Api.V1.StreamEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandSentFromGroundStation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandSentFromGroundStation(CommandSentFromGroundStation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CommandSentFromGroundStation Clone() {
          return new CommandSentFromGroundStation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CommandSentFromGroundStation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CommandSentFromGroundStation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CommandSentFromGroundStation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// A monitoring event that occurred during the execution of the plan. Information about the current
  /// configuration of the ground station and state of components is returned to provide information
  /// that can help to troubleshoot issues with the plan.
  /// </summary>
  public sealed partial class PlanMonitoringEvent : pb::IMessage<PlanMonitoringEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlanMonitoringEvent> _parser = new pb::MessageParser<PlanMonitoringEvent>(() => new PlanMonitoringEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanMonitoringEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.TransportReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanMonitoringEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanMonitoringEvent(PlanMonitoringEvent other) : this() {
      planId_ = other.planId_;
      switch (other.InfoCase) {
        case InfoOneofCase.GroundStationConfiguration:
          GroundStationConfiguration = other.GroundStationConfiguration.Clone();
          break;
        case InfoOneofCase.GroundStationState:
          GroundStationState = other.GroundStationState.Clone();
          break;
        case InfoOneofCase.GroundStationEvent:
          GroundStationEvent = other.GroundStationEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanMonitoringEvent Clone() {
      return new PlanMonitoringEvent(this);
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 1;
    private string planId_ = "";
    /// <summary>
    /// The ID of the plan being monitored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlanId {
      get { return planId_; }
      set {
        planId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ground_station_configuration" field.</summary>
    public const int GroundStationConfigurationFieldNumber = 2;
    /// <summary>
    /// Information about the current configuration of the ground station when beginning to execute
    /// a plan. This will only be returned once at the beginning of execution. Information that is
    /// provided by the ground station executing the plan will be returned - any fields that are not
    /// supported by the ground station will be left unfilled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration GroundStationConfiguration {
      get { return infoCase_ == InfoOneofCase.GroundStationConfiguration ? (global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration) info_ : null; }
      set {
        info_ = value;
        infoCase_ = value == null ? InfoOneofCase.None : InfoOneofCase.GroundStationConfiguration;
      }
    }

    /// <summary>Field number for the "ground_station_state" field.</summary>
    public const int GroundStationStateFieldNumber = 3;
    /// <summary>
    /// Information about the current state of the ground station while executing a plan. This will
    /// be returned periodically during execution of the plan. Information that is provided by the
    /// ground station executing the plan will be returned - any fields that are not supported by
    /// the ground station will be left unfilled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.GroundStationState GroundStationState {
      get { return infoCase_ == InfoOneofCase.GroundStationState ? (global::Stellarstation.Api.V1.Monitoring.GroundStationState) info_ : null; }
      set {
        info_ = value;
        infoCase_ = value == null ? InfoOneofCase.None : InfoOneofCase.GroundStationState;
      }
    }

    /// <summary>Field number for the "ground_station_event" field.</summary>
    public const int GroundStationEventFieldNumber = 4;
    /// <summary>
    /// Information about events generated by the ground station while executing a plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.GroundStationEvent GroundStationEvent {
      get { return infoCase_ == InfoOneofCase.GroundStationEvent ? (global::Stellarstation.Api.V1.Monitoring.GroundStationEvent) info_ : null; }
      set {
        info_ = value;
        infoCase_ = value == null ? InfoOneofCase.None : InfoOneofCase.GroundStationEvent;
      }
    }

    private object info_;
    /// <summary>Enum of possible cases for the "Info" oneof.</summary>
    public enum InfoOneofCase {
      None = 0,
      GroundStationConfiguration = 2,
      GroundStationState = 3,
      GroundStationEvent = 4,
    }
    private InfoOneofCase infoCase_ = InfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoOneofCase InfoCase {
      get { return infoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      infoCase_ = InfoOneofCase.None;
      info_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanMonitoringEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanMonitoringEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanId != other.PlanId) return false;
      if (!object.Equals(GroundStationConfiguration, other.GroundStationConfiguration)) return false;
      if (!object.Equals(GroundStationState, other.GroundStationState)) return false;
      if (!object.Equals(GroundStationEvent, other.GroundStationEvent)) return false;
      if (InfoCase != other.InfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlanId.Length != 0) hash ^= PlanId.GetHashCode();
      if (infoCase_ == InfoOneofCase.GroundStationConfiguration) hash ^= GroundStationConfiguration.GetHashCode();
      if (infoCase_ == InfoOneofCase.GroundStationState) hash ^= GroundStationState.GetHashCode();
      if (infoCase_ == InfoOneofCase.GroundStationEvent) hash ^= GroundStationEvent.GetHashCode();
      hash ^= (int) infoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlanId);
      }
      if (infoCase_ == InfoOneofCase.GroundStationConfiguration) {
        output.WriteRawTag(18);
        output.WriteMessage(GroundStationConfiguration);
      }
      if (infoCase_ == InfoOneofCase.GroundStationState) {
        output.WriteRawTag(26);
        output.WriteMessage(GroundStationState);
      }
      if (infoCase_ == InfoOneofCase.GroundStationEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(GroundStationEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlanId);
      }
      if (infoCase_ == InfoOneofCase.GroundStationConfiguration) {
        output.WriteRawTag(18);
        output.WriteMessage(GroundStationConfiguration);
      }
      if (infoCase_ == InfoOneofCase.GroundStationState) {
        output.WriteRawTag(26);
        output.WriteMessage(GroundStationState);
      }
      if (infoCase_ == InfoOneofCase.GroundStationEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(GroundStationEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlanId);
      }
      if (infoCase_ == InfoOneofCase.GroundStationConfiguration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundStationConfiguration);
      }
      if (infoCase_ == InfoOneofCase.GroundStationState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundStationState);
      }
      if (infoCase_ == InfoOneofCase.GroundStationEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroundStationEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanMonitoringEvent other) {
      if (other == null) {
        return;
      }
      if (other.PlanId.Length != 0) {
        PlanId = other.PlanId;
      }
      switch (other.InfoCase) {
        case InfoOneofCase.GroundStationConfiguration:
          if (GroundStationConfiguration == null) {
            GroundStationConfiguration = new global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration();
          }
          GroundStationConfiguration.MergeFrom(other.GroundStationConfiguration);
          break;
        case InfoOneofCase.GroundStationState:
          if (GroundStationState == null) {
            GroundStationState = new global::Stellarstation.Api.V1.Monitoring.GroundStationState();
          }
          GroundStationState.MergeFrom(other.GroundStationState);
          break;
        case InfoOneofCase.GroundStationEvent:
          if (GroundStationEvent == null) {
            GroundStationEvent = new global::Stellarstation.Api.V1.Monitoring.GroundStationEvent();
          }
          GroundStationEvent.MergeFrom(other.GroundStationEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlanId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration();
            if (infoCase_ == InfoOneofCase.GroundStationConfiguration) {
              subBuilder.MergeFrom(GroundStationConfiguration);
            }
            input.ReadMessage(subBuilder);
            GroundStationConfiguration = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationState subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationState();
            if (infoCase_ == InfoOneofCase.GroundStationState) {
              subBuilder.MergeFrom(GroundStationState);
            }
            input.ReadMessage(subBuilder);
            GroundStationState = subBuilder;
            break;
          }
          case 34: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationEvent subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationEvent();
            if (infoCase_ == InfoOneofCase.GroundStationEvent) {
              subBuilder.MergeFrom(GroundStationEvent);
            }
            input.ReadMessage(subBuilder);
            GroundStationEvent = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlanId = input.ReadString();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration();
            if (infoCase_ == InfoOneofCase.GroundStationConfiguration) {
              subBuilder.MergeFrom(GroundStationConfiguration);
            }
            input.ReadMessage(subBuilder);
            GroundStationConfiguration = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationState subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationState();
            if (infoCase_ == InfoOneofCase.GroundStationState) {
              subBuilder.MergeFrom(GroundStationState);
            }
            input.ReadMessage(subBuilder);
            GroundStationState = subBuilder;
            break;
          }
          case 34: {
            global::Stellarstation.Api.V1.Monitoring.GroundStationEvent subBuilder = new global::Stellarstation.Api.V1.Monitoring.GroundStationEvent();
            if (infoCase_ == InfoOneofCase.GroundStationEvent) {
              subBuilder.MergeFrom(GroundStationEvent);
            }
            input.ReadMessage(subBuilder);
            GroundStationEvent = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
