// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/antenna/antenna.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stellarstation.Api.V1.Antenna {

  /// <summary>Holder for reflection information generated from stellarstation/api/v1/antenna/antenna.proto</summary>
  public static partial class AntennaReflection {

    #region Descriptor
    /// <summary>File descriptor for stellarstation/api/v1/antenna/antenna.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AntennaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitzdGVsbGFyc3RhdGlvbi9hcGkvdjEvYW50ZW5uYS9hbnRlbm5hLnByb3Rv",
            "Eh1zdGVsbGFyc3RhdGlvbi5hcGkudjEuYW50ZW5uYSJvChRBbnRlbm5hQ29u",
            "ZmlndXJhdGlvbhIQCghsYXRpdHVkZRgBIAEoARIRCglsb25naXR1ZGUYAiAB",
            "KAESFwoPYWx0aXR1ZGVfbWV0ZXJzGAMgASgBEhkKEWJlYW13aWR0aF9kZWdy",
            "ZWVzGAQgASgBKkcKE0FudGVubmFQb2xhcml6YXRpb24SDgoKSE9SSVpPTlRB",
            "TBAAEgwKCFZFUlRJQ0FMEAESCAoETEhDUBACEggKBFJIQ1AQA0JvCiFjb20u",
            "c3RlbGxhcnN0YXRpb24uYXBpLnYxLmFudGVubmFCDEFudGVubmFQcm90b1AB",
            "WjpnaXRodWIuY29tL2luZm9zdGVsbGFyaW5jL2dvLXN0ZWxsYXJzdGF0aW9u",
            "L2FwaS92MS9hbnRlbm5hYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stellarstation.Api.V1.Antenna.AntennaPolarization), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Antenna.AntennaConfiguration), global::Stellarstation.Api.V1.Antenna.AntennaConfiguration.Parser, new[]{ "Latitude", "Longitude", "AltitudeMeters", "BeamwidthDegrees" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The polarization of an antenna.
  /// https://en.wikipedia.org/wiki/Antenna_(radio)#Polarization
  /// </summary>
  public enum AntennaPolarization {
    /// <summary>
    /// Horizontal polarization.
    /// </summary>
    [pbr::OriginalName("HORIZONTAL")] Horizontal = 0,
    /// <summary>
    /// Vertical polarization.
    /// </summary>
    [pbr::OriginalName("VERTICAL")] Vertical = 1,
    /// <summary>
    /// Left-handed circular polarization.
    /// </summary>
    [pbr::OriginalName("LHCP")] Lhcp = 2,
    /// <summary>
    /// Right-handed circular polarization.
    /// </summary>
    [pbr::OriginalName("RHCP")] Rhcp = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The static configuration of an antenna. These are the physical parameters of the antenna.
  /// </summary>
  public sealed partial class AntennaConfiguration : pb::IMessage<AntennaConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AntennaConfiguration> _parser = new pb::MessageParser<AntennaConfiguration>(() => new AntennaConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AntennaConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Antenna.AntennaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaConfiguration(AntennaConfiguration other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitudeMeters_ = other.altitudeMeters_;
      beamwidthDegrees_ = other.beamwidthDegrees_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaConfiguration Clone() {
      return new AntennaConfiguration(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 1;
    private double latitude_;
    /// <summary>
    /// The latitude of the antenna, in degrees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private double longitude_;
    /// <summary>
    /// The longitude of the antenna, in degrees.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude_meters" field.</summary>
    public const int AltitudeMetersFieldNumber = 3;
    private double altitudeMeters_;
    /// <summary>
    /// The altitude of the antenna above mean sea level, in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AltitudeMeters {
      get { return altitudeMeters_; }
      set {
        altitudeMeters_ = value;
      }
    }

    /// <summary>Field number for the "beamwidth_degrees" field.</summary>
    public const int BeamwidthDegreesFieldNumber = 4;
    private double beamwidthDegrees_;
    /// <summary>
    /// The beamwidth, in degrees.
    /// https://en.wikipedia.org/wiki/Beamwidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BeamwidthDegrees {
      get { return beamwidthDegrees_; }
      set {
        beamwidthDegrees_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AntennaConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AntennaConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AltitudeMeters, other.AltitudeMeters)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BeamwidthDegrees, other.BeamwidthDegrees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (AltitudeMeters != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AltitudeMeters);
      if (BeamwidthDegrees != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BeamwidthDegrees);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Latitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Longitude);
      }
      if (AltitudeMeters != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AltitudeMeters);
      }
      if (BeamwidthDegrees != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(BeamwidthDegrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Latitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Longitude);
      }
      if (AltitudeMeters != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AltitudeMeters);
      }
      if (BeamwidthDegrees != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(BeamwidthDegrees);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (AltitudeMeters != 0D) {
        size += 1 + 8;
      }
      if (BeamwidthDegrees != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AntennaConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.AltitudeMeters != 0D) {
        AltitudeMeters = other.AltitudeMeters;
      }
      if (other.BeamwidthDegrees != 0D) {
        BeamwidthDegrees = other.BeamwidthDegrees;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Latitude = input.ReadDouble();
            break;
          }
          case 17: {
            Longitude = input.ReadDouble();
            break;
          }
          case 25: {
            AltitudeMeters = input.ReadDouble();
            break;
          }
          case 33: {
            BeamwidthDegrees = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Latitude = input.ReadDouble();
            break;
          }
          case 17: {
            Longitude = input.ReadDouble();
            break;
          }
          case 25: {
            AltitudeMeters = input.ReadDouble();
            break;
          }
          case 33: {
            BeamwidthDegrees = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
