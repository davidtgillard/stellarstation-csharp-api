// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/groundstation/groundstation.proto
// </auto-generated>
// Original file comments:
//
// Copyright 2019 Infostellar, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Stellarstation.Api.V1.Groundstation {
  /// <summary>
  /// The public API of StellarStation for use by ground station operators integrating with the
  /// StellarStation ground network. It is invalid to specify ground station IDs that the operator
  /// does not own. Only using IDs shown on the StellarStation Console or returned in API responses
  /// will ensure all inputs are valid.
  ///
  /// A pass is a time range where an ground station and satellite can communicate with each other, i.e.,
  /// the period between Acquisition of Signal (AOS) and Loss of Signal (LOS) of the ground station and
  /// satellite pair.
  ///
  /// A plan is a scheduled pass that will be executed to send and receive data between the ground
  /// station and satellite during the time range.
  /// </summary>
  public static partial class GroundStationService
  {
    static readonly string __ServiceName = "stellarstation.api.v1.groundstation.GroundStationService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest> __Marshaller_stellarstation_api_v1_groundstation_AddUnavailabilityWindowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse> __Marshaller_stellarstation_api_v1_groundstation_AddUnavailabilityWindowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest> __Marshaller_stellarstation_api_v1_groundstation_CancelPlanRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse> __Marshaller_stellarstation_api_v1_groundstation_CancelPlanResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest> __Marshaller_stellarstation_api_v1_groundstation_DeleteUnavailabilityWindowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse> __Marshaller_stellarstation_api_v1_groundstation_DeleteUnavailabilityWindowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.ListPlansRequest> __Marshaller_stellarstation_api_v1_groundstation_ListPlansRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.ListPlansRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.ListPlansResponse> __Marshaller_stellarstation_api_v1_groundstation_ListPlansResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.ListPlansResponse.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest> __Marshaller_stellarstation_api_v1_groundstation_ListUnavailabilityWindowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse> __Marshaller_stellarstation_api_v1_groundstation_ListUnavailabilityWindowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest> __Marshaller_stellarstation_api_v1_groundstation_GroundStationStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest.Parser));
    static readonly grpc::Marshaller<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse> __Marshaller_stellarstation_api_v1_groundstation_GroundStationStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse.Parser));

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse> __Method_AddUnavailabilityWindow = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddUnavailabilityWindow",
        __Marshaller_stellarstation_api_v1_groundstation_AddUnavailabilityWindowRequest,
        __Marshaller_stellarstation_api_v1_groundstation_AddUnavailabilityWindowResponse);

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest, global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse> __Method_CancelPlan = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest, global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelPlan",
        __Marshaller_stellarstation_api_v1_groundstation_CancelPlanRequest,
        __Marshaller_stellarstation_api_v1_groundstation_CancelPlanResponse);

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse> __Method_DeleteUnavailabilityWindow = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUnavailabilityWindow",
        __Marshaller_stellarstation_api_v1_groundstation_DeleteUnavailabilityWindowRequest,
        __Marshaller_stellarstation_api_v1_groundstation_DeleteUnavailabilityWindowResponse);

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.ListPlansRequest, global::Stellarstation.Api.V1.Groundstation.ListPlansResponse> __Method_ListPlans = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.ListPlansRequest, global::Stellarstation.Api.V1.Groundstation.ListPlansResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPlans",
        __Marshaller_stellarstation_api_v1_groundstation_ListPlansRequest,
        __Marshaller_stellarstation_api_v1_groundstation_ListPlansResponse);

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest, global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse> __Method_ListUnavailabilityWindows = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest, global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUnavailabilityWindows",
        __Marshaller_stellarstation_api_v1_groundstation_ListUnavailabilityWindowsRequest,
        __Marshaller_stellarstation_api_v1_groundstation_ListUnavailabilityWindowsResponse);

    static readonly grpc::Method<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse> __Method_OpenGroundStationStream = new grpc::Method<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "OpenGroundStationStream",
        __Marshaller_stellarstation_api_v1_groundstation_GroundStationStreamRequest,
        __Marshaller_stellarstation_api_v1_groundstation_GroundStationStreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Stellarstation.Api.V1.Groundstation.GroundstationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GroundStationService</summary>
    [grpc::BindServiceMethod(typeof(GroundStationService), "BindService")]
    public abstract partial class GroundStationServiceBase
    {
      /// <summary>
      /// Adds a new unavailability window to the requested ground station.
      ///
      /// Existing plans that overlap the unavailability window will not be canceled and the request will
      /// be closed with a 'FAILED_PRECONDITION' status. In this case you will need to list any existing
      /// plans with ListPlans and then cancel the plans with CancelPlan.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse> AddUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
      /// executed. This action cannot be undone, but it is still possible for the pass to be reserved
      /// again. The plan cannot be cancelled less than ten minutes before AOS.
      ///
      /// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
      /// for details.
      ///
      /// If the plan is not found, the request will return a `NOT_FOUND` error.
      ///
      /// If the plan has already been canceled or is less than ten minutes away from its AOS, the
      /// request will return a `FAILED_PRECONDITION` error.
      ///
      /// If the plan is ongoing or has already finished executing, the request will return a
      /// `OUT_OF_RANGE` error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse> CancelPlan(global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing unavailability window of the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
      /// or invalid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse> DeleteUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the plans for a particular ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
      /// 31 days.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Stellarstation.Api.V1.Groundstation.ListPlansResponse> ListPlans(global::Stellarstation.Api.V1.Groundstation.ListPlansRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of unavailability windows for the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse> ListUnavailabilityWindows(global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Open a stream from a ground station. The returned stream is bi-directional - it is used by
      /// the ground station to send telemetry received from a satellite and receive commands to send to
      /// the satellite. The ground station must keep this stream open while it is connected to the
      /// StellarStation network for use in executing plans - if the stream is cut, it must be
      /// reconnected with exponential backoff.
      ///
      /// The first `GroundStationStreamRequest` sent on the stream is used for configuring the stream.
      /// Unless otherwise specified, all configuration is taken from the first request and configuration
      /// values in subsequent requests will be ignored.
      ///
      /// There is no restriction on the number of active streams from a ground station (i.e., streams
      /// opened with the same `ground_station_id`). Most ground stations will issue a single stream to
      /// receive commands and send telemetry, but in certain cases, such as if uplink and downlink are
      /// handled by different computers, it can be appropriate to have multiple processes with their
      /// own stream. If opening multiple streams for a single ground station, it is the client's
      /// responsibility to handle the streams appropriately, for example by ensuring only one stream
      /// sends commands so they are not duplicated.
      ///
      /// If the ground station is not found or the API client is not authorized for it, the stream will
      /// be closed with a `NOT_FOUND` error.
      ///
      /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
      ///         incompatible ways in the future.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task OpenGroundStationStream(grpc::IAsyncStreamReader<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest> requestStream, grpc::IServerStreamWriter<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GroundStationService</summary>
    public partial class GroundStationServiceClient : grpc::ClientBase<GroundStationServiceClient>
    {
      /// <summary>Creates a new client for GroundStationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GroundStationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GroundStationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GroundStationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GroundStationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GroundStationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Adds a new unavailability window to the requested ground station.
      ///
      /// Existing plans that overlap the unavailability window will not be canceled and the request will
      /// be closed with a 'FAILED_PRECONDITION' status. In this case you will need to list any existing
      /// plans with ListPlans and then cancel the plans with CancelPlan.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse AddUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUnavailabilityWindow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new unavailability window to the requested ground station.
      ///
      /// Existing plans that overlap the unavailability window will not be canceled and the request will
      /// be closed with a 'FAILED_PRECONDITION' status. In this case you will need to list any existing
      /// plans with ListPlans and then cancel the plans with CancelPlan.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse AddUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddUnavailabilityWindow, null, options, request);
      }
      /// <summary>
      /// Adds a new unavailability window to the requested ground station.
      ///
      /// Existing plans that overlap the unavailability window will not be canceled and the request will
      /// be closed with a 'FAILED_PRECONDITION' status. In this case you will need to list any existing
      /// plans with ListPlans and then cancel the plans with CancelPlan.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse> AddUnavailabilityWindowAsync(global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUnavailabilityWindowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a new unavailability window to the requested ground station.
      ///
      /// Existing plans that overlap the unavailability window will not be canceled and the request will
      /// be closed with a 'FAILED_PRECONDITION' status. In this case you will need to list any existing
      /// plans with ListPlans and then cancel the plans with CancelPlan.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse> AddUnavailabilityWindowAsync(global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddUnavailabilityWindow, null, options, request);
      }
      /// <summary>
      /// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
      /// executed. This action cannot be undone, but it is still possible for the pass to be reserved
      /// again. The plan cannot be cancelled less than ten minutes before AOS.
      ///
      /// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
      /// for details.
      ///
      /// If the plan is not found, the request will return a `NOT_FOUND` error.
      ///
      /// If the plan has already been canceled or is less than ten minutes away from its AOS, the
      /// request will return a `FAILED_PRECONDITION` error.
      ///
      /// If the plan is ongoing or has already finished executing, the request will return a
      /// `OUT_OF_RANGE` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse CancelPlan(global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelPlan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
      /// executed. This action cannot be undone, but it is still possible for the pass to be reserved
      /// again. The plan cannot be cancelled less than ten minutes before AOS.
      ///
      /// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
      /// for details.
      ///
      /// If the plan is not found, the request will return a `NOT_FOUND` error.
      ///
      /// If the plan has already been canceled or is less than ten minutes away from its AOS, the
      /// request will return a `FAILED_PRECONDITION` error.
      ///
      /// If the plan is ongoing or has already finished executing, the request will return a
      /// `OUT_OF_RANGE` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse CancelPlan(global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelPlan, null, options, request);
      }
      /// <summary>
      /// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
      /// executed. This action cannot be undone, but it is still possible for the pass to be reserved
      /// again. The plan cannot be cancelled less than ten minutes before AOS.
      ///
      /// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
      /// for details.
      ///
      /// If the plan is not found, the request will return a `NOT_FOUND` error.
      ///
      /// If the plan has already been canceled or is less than ten minutes away from its AOS, the
      /// request will return a `FAILED_PRECONDITION` error.
      ///
      /// If the plan is ongoing or has already finished executing, the request will return a
      /// `OUT_OF_RANGE` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse> CancelPlanAsync(global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelPlanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
      /// executed. This action cannot be undone, but it is still possible for the pass to be reserved
      /// again. The plan cannot be cancelled less than ten minutes before AOS.
      ///
      /// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
      /// for details.
      ///
      /// If the plan is not found, the request will return a `NOT_FOUND` error.
      ///
      /// If the plan has already been canceled or is less than ten minutes away from its AOS, the
      /// request will return a `FAILED_PRECONDITION` error.
      ///
      /// If the plan is ongoing or has already finished executing, the request will return a
      /// `OUT_OF_RANGE` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse> CancelPlanAsync(global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelPlan, null, options, request);
      }
      /// <summary>
      /// Deletes an existing unavailability window of the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
      /// or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse DeleteUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUnavailabilityWindow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing unavailability window of the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
      /// or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse DeleteUnavailabilityWindow(global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUnavailabilityWindow, null, options, request);
      }
      /// <summary>
      /// Deletes an existing unavailability window of the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
      /// or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse> DeleteUnavailabilityWindowAsync(global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUnavailabilityWindowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing unavailability window of the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `window_id` is missing
      /// or invalid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse> DeleteUnavailabilityWindowAsync(global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUnavailabilityWindow, null, options, request);
      }
      /// <summary>
      /// Lists the plans for a particular ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
      /// 31 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.ListPlansResponse ListPlans(global::Stellarstation.Api.V1.Groundstation.ListPlansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPlans(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the plans for a particular ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
      /// 31 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.ListPlansResponse ListPlans(global::Stellarstation.Api.V1.Groundstation.ListPlansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPlans, null, options, request);
      }
      /// <summary>
      /// Lists the plans for a particular ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
      /// 31 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.ListPlansResponse> ListPlansAsync(global::Stellarstation.Api.V1.Groundstation.ListPlansRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPlansAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the plans for a particular ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
      /// 31 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.ListPlansResponse> ListPlansAsync(global::Stellarstation.Api.V1.Groundstation.ListPlansRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPlans, null, options, request);
      }
      /// <summary>
      /// Returns a list of unavailability windows for the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse ListUnavailabilityWindows(global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnavailabilityWindows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of unavailability windows for the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse ListUnavailabilityWindows(global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUnavailabilityWindows, null, options, request);
      }
      /// <summary>
      /// Returns a list of unavailability windows for the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse> ListUnavailabilityWindowsAsync(global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnavailabilityWindowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of unavailability windows for the requested ground station.
      ///
      /// The request will be closed with an `INVALID_ARGUMENT` status if `ground_station_id`,
      /// `start_time`, or `end_time` are missing, or 'end_time' is not after 'start_time'.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse> ListUnavailabilityWindowsAsync(global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUnavailabilityWindows, null, options, request);
      }
      /// <summary>
      /// Open a stream from a ground station. The returned stream is bi-directional - it is used by
      /// the ground station to send telemetry received from a satellite and receive commands to send to
      /// the satellite. The ground station must keep this stream open while it is connected to the
      /// StellarStation network for use in executing plans - if the stream is cut, it must be
      /// reconnected with exponential backoff.
      ///
      /// The first `GroundStationStreamRequest` sent on the stream is used for configuring the stream.
      /// Unless otherwise specified, all configuration is taken from the first request and configuration
      /// values in subsequent requests will be ignored.
      ///
      /// There is no restriction on the number of active streams from a ground station (i.e., streams
      /// opened with the same `ground_station_id`). Most ground stations will issue a single stream to
      /// receive commands and send telemetry, but in certain cases, such as if uplink and downlink are
      /// handled by different computers, it can be appropriate to have multiple processes with their
      /// own stream. If opening multiple streams for a single ground station, it is the client's
      /// responsibility to handle the streams appropriately, for example by ensuring only one stream
      /// sends commands so they are not duplicated.
      ///
      /// If the ground station is not found or the API client is not authorized for it, the stream will
      /// be closed with a `NOT_FOUND` error.
      ///
      /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
      ///         incompatible ways in the future.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse> OpenGroundStationStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenGroundStationStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Open a stream from a ground station. The returned stream is bi-directional - it is used by
      /// the ground station to send telemetry received from a satellite and receive commands to send to
      /// the satellite. The ground station must keep this stream open while it is connected to the
      /// StellarStation network for use in executing plans - if the stream is cut, it must be
      /// reconnected with exponential backoff.
      ///
      /// The first `GroundStationStreamRequest` sent on the stream is used for configuring the stream.
      /// Unless otherwise specified, all configuration is taken from the first request and configuration
      /// values in subsequent requests will be ignored.
      ///
      /// There is no restriction on the number of active streams from a ground station (i.e., streams
      /// opened with the same `ground_station_id`). Most ground stations will issue a single stream to
      /// receive commands and send telemetry, but in certain cases, such as if uplink and downlink are
      /// handled by different computers, it can be appropriate to have multiple processes with their
      /// own stream. If opening multiple streams for a single ground station, it is the client's
      /// responsibility to handle the streams appropriately, for example by ensuring only one stream
      /// sends commands so they are not duplicated.
      ///
      /// If the ground station is not found or the API client is not authorized for it, the stream will
      /// be closed with a `NOT_FOUND` error.
      ///
      /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
      ///         incompatible ways in the future.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse> OpenGroundStationStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_OpenGroundStationStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GroundStationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GroundStationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GroundStationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddUnavailabilityWindow, serviceImpl.AddUnavailabilityWindow)
          .AddMethod(__Method_CancelPlan, serviceImpl.CancelPlan)
          .AddMethod(__Method_DeleteUnavailabilityWindow, serviceImpl.DeleteUnavailabilityWindow)
          .AddMethod(__Method_ListPlans, serviceImpl.ListPlans)
          .AddMethod(__Method_ListUnavailabilityWindows, serviceImpl.ListUnavailabilityWindows)
          .AddMethod(__Method_OpenGroundStationStream, serviceImpl.OpenGroundStationStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GroundStationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddUnavailabilityWindow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.AddUnavailabilityWindowResponse>(serviceImpl.AddUnavailabilityWindow));
      serviceBinder.AddMethod(__Method_CancelPlan, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Stellarstation.Api.V1.Groundstation.CancelPlanRequest, global::Stellarstation.Api.V1.Groundstation.CancelPlanResponse>(serviceImpl.CancelPlan));
      serviceBinder.AddMethod(__Method_DeleteUnavailabilityWindow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowRequest, global::Stellarstation.Api.V1.Groundstation.DeleteUnavailabilityWindowResponse>(serviceImpl.DeleteUnavailabilityWindow));
      serviceBinder.AddMethod(__Method_ListPlans, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Stellarstation.Api.V1.Groundstation.ListPlansRequest, global::Stellarstation.Api.V1.Groundstation.ListPlansResponse>(serviceImpl.ListPlans));
      serviceBinder.AddMethod(__Method_ListUnavailabilityWindows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsRequest, global::Stellarstation.Api.V1.Groundstation.ListUnavailabilityWindowsResponse>(serviceImpl.ListUnavailabilityWindows));
      serviceBinder.AddMethod(__Method_OpenGroundStationStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Stellarstation.Api.V1.Groundstation.GroundStationStreamRequest, global::Stellarstation.Api.V1.Groundstation.GroundStationStreamResponse>(serviceImpl.OpenGroundStationStream));
    }

  }
}
#endregion
