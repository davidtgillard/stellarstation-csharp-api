// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/radio/radio.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stellarstation.Api.V1.Radio {

  /// <summary>Holder for reflection information generated from stellarstation/api/v1/radio/radio.proto</summary>
  public static partial class RadioReflection {

    #region Descriptor
    /// <summary>File descriptor for stellarstation/api/v1/radio/radio.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RadioReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidzdGVsbGFyc3RhdGlvbi9hcGkvdjEvcmFkaW8vcmFkaW8ucHJvdG8SG3N0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5yYWRpbxorc3RlbGxhcnN0YXRpb24vYXBp",
            "L3YxL2FudGVubmEvYW50ZW5uYS5wcm90byKVAgoYUmFkaW9EZXZpY2VDb25m",
            "aWd1cmF0aW9uEhsKE2NlbnRlcl9mcmVxdWVuY3lfaHoYASABKAQSOwoKbW9k",
            "dWxhdGlvbhgCIAEoDjInLnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5yYWRpby5N",
            "b2R1bGF0aW9uEg8KB2JpdHJhdGUYAyABKAQSRAoIcHJvdG9jb2wYBCABKAsy",
            "Mi5zdGVsbGFyc3RhdGlvbi5hcGkudjEucmFkaW8uQ29tbXVuaWNhdGlvblBy",
            "b3RvY29sEkgKDHBvbGFyaXphdGlvbhgFIAEoDjIyLnN0ZWxsYXJzdGF0aW9u",
            "LmFwaS52MS5hbnRlbm5hLkFudGVubmFQb2xhcml6YXRpb24ikAIKFUNvbW11",
            "bmljYXRpb25Qcm90b2NvbBIxCgRheDI1GAEgASgLMiEuc3RlbGxhcnN0YXRp",
            "b24uYXBpLnYxLnJhZGlvLkFYMjVIABJACgVjY3NkcxgCIAEoCzIvLnN0ZWxs",
            "YXJzdGF0aW9uLmFwaS52MS5yYWRpby5DQ1NEU1RyYW5zZmVyRnJhbWVIABI7",
            "CgliaXRzdHJlYW0YAyABKAsyJi5zdGVsbGFyc3RhdGlvbi5hcGkudjEucmFk",
            "aW8uQml0c3RyZWFtSAASOgoJYXNtX2dvbGF5GAQgASgLMiUuc3RlbGxhcnN0",
            "YXRpb24uYXBpLnYxLnJhZGlvLkFTTUdvbGF5SABCCQoHRnJhbWluZyLEAwoe",
            "Q0NTRFNDb252b2x1dGlvbmFsQ29kaW5nUGFyYW1zEm0KFHBvbHlub21pYWxf",
            "aW52ZXJzaW9uGAEgASgOMk8uc3RlbGxhcnN0YXRpb24uYXBpLnYxLnJhZGlv",
            "LkNDU0RTQ29udm9sdXRpb25hbENvZGluZ1BhcmFtcy5Qb2x5bm9taWFsSW52",
            "ZXJzaW9uEloKCnB1bmN0dXJpbmcYAiABKA4yRi5zdGVsbGFyc3RhdGlvbi5h",
            "cGkudjEucmFkaW8uQ0NTRFNDb252b2x1dGlvbmFsQ29kaW5nUGFyYW1zLlB1",
            "bmN0dXJpbmciUwoTUG9seW5vbWlhbEludmVyc2lvbhIJCgVHMV9HMhAAEhIK",
            "DkcxX0cyX0lOVkVSVEVEEAESEgoORzJfSU5WRVJURURfRzEQAhIJCgVHMl9H",
            "MRADIoEBCgpQdW5jdHVyaW5nEgcKA09GRhAAEhAKDFBVTkNUVVJFXzJfMxAB",
            "EhAKDFBVTkNUVVJFXzNfNBACEhAKDFBVTkNUVVJFXzRfNRADEhAKDFBVTkNU",
            "VVJFXzVfNhAEEhAKDFBVTkNUVVJFXzZfNxAFEhAKDFBVTkNUVVJFXzdfOBAG",
            "IhcKFUNDU0RTU2NyYW1ibGluZ1BhcmFtcyKrAQoWQ0NTRFNSZWVkU29sb21v",
            "blBhcmFtcxJeChFibG9ja19sZW5ndGhfdHlwZRgBIAEoDjJDLnN0ZWxsYXJz",
            "dGF0aW9uLmFwaS52MS5yYWRpby5DQ1NEU1JlZWRTb2xvbW9uUGFyYW1zLkJs",
            "b2NrTGVuZ3RoVHlwZSIxCg9CbG9ja0xlbmd0aFR5cGUSDgoKUlNfMjIzXzI1",
            "NRAAEg4KClJTXzIzOV8yNTUQASLFAwoSQ0NTRFNUcmFuc2ZlckZyYW1lElIK",
            "FnN5bmNocm9uaXphdGlvbl9wYXJhbXMYASABKAsyMi5zdGVsbGFyc3RhdGlv",
            "bi5hcGkudjEucmFkaW8uU3luY2hyb25pemF0aW9uUGFyYW1zEmAKG2NvbnZv",
            "bHV0aW9uYWxfY29kaW5nX3BhcmFtcxgCIAEoCzI7LnN0ZWxsYXJzdGF0aW9u",
            "LmFwaS52MS5yYWRpby5DQ1NEU0NvbnZvbHV0aW9uYWxDb2RpbmdQYXJhbXMS",
            "TQoRc2NyYW1ibGluZ19wYXJhbXMYAyABKAsyMi5zdGVsbGFyc3RhdGlvbi5h",
            "cGkudjEucmFkaW8uQ0NTRFNTY3JhbWJsaW5nUGFyYW1zElAKE3JlZWRfc29s",
            "b21vbl9wYXJhbXMYBCABKAsyMy5zdGVsbGFyc3RhdGlvbi5hcGkudjEucmFk",
            "aW8uQ0NTRFNSZWVkU29sb21vblBhcmFtcxIaChJmcmFtZV9sZW5ndGhfYnl0",
            "ZXMYBSABKA0SPAoLbGluZV9jb2RpbmcYBiABKA4yJy5zdGVsbGFyc3RhdGlv",
            "bi5hcGkudjEucmFkaW8uTGluZUNvZGluZyK0AQoIQVNNR29sYXkSUgoWc3lu",
            "Y2hyb25pemF0aW9uX3BhcmFtcxgBIAEoCzIyLnN0ZWxsYXJzdGF0aW9uLmFw",
            "aS52MS5yYWRpby5TeW5jaHJvbml6YXRpb25QYXJhbXMSHQoVZW5hYmxlX2Nj",
            "c2RzX3NjcmFtYmxlGAIgASgIEhsKE2VuYWJsZV9yZWVkX3NvbG9tb24YAyAB",
            "KAgSGAoQZW5hYmxlX2NyY19jaGVjaxgEIAEoCCK5AQoJQml0c3RyZWFtElIK",
            "FnN5bmNocm9uaXphdGlvbl9wYXJhbXMYASABKAsyMi5zdGVsbGFyc3RhdGlv",
            "bi5hcGkudjEucmFkaW8uU3luY2hyb25pemF0aW9uUGFyYW1zEhoKEmZyYW1l",
            "X2xlbmd0aF9ieXRlcxgCIAEoDRI8CgtsaW5lX2NvZGluZxgDIAEoDjInLnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5yYWRpby5MaW5lQ29kaW5nIkoKFVN5bmNo",
            "cm9uaXphdGlvblBhcmFtcxIcChRzeW5jaHJvbml6YXRpb25fd29yZBgBIAEo",
            "DBITCgtsZW5ndGhfYml0cxgCIAEoDSJ7CgRBWDI1Eg0KBWczcnVoGAEgASgI",
            "EhwKFGRlc3RpbmF0aW9uX2NhbGxzaWduGAIgASgJEhgKEGRlc3RpbmF0aW9u",
            "X3NzaWQYAyABKA0SFwoPc291cmNlX2NhbGxzaWduGAQgASgJEhMKC3NvdXJj",
            "ZV9zc2lkGAUgASgNIlAKGUNvbnZvbHV0aW9uYWxDb2RpbmdQYXJhbXMSCQoB",
            "axgBIAEoDRIUCgxpbnZlcnNlX3JhdGUYAiABKA0SEgoKcG9seW5vbWlhbBgD",
            "IAMoDCKsAQoQU2NyYW1ibGluZ1BhcmFtcxJACgR0eXBlGAEgASgOMjIuc3Rl",
            "bGxhcnN0YXRpb24uYXBpLnYxLnJhZGlvLlNjcmFtYmxpbmdQYXJhbXMuVHlw",
            "ZRIQCghudW1fYml0cxgCIAEoDRIMCgRtYXNrGAMgASgMEgwKBHNlZWQYBCAB",
            "KAwiKAoEVHlwZRIMCghBRERJVElWRRAAEhIKDk1VTFRJUExJQ0FUSVZFEAEq",
            "rgIKCk1vZHVsYXRpb24SDAoIRElTQUJMRUQQABIHCgNGU0sQARIICgRBRlNL",
            "EAISCAoEQlBTSxADEggKBE1GU0sQBBIICgRRUFNLEAUSCAoEUFNLOBAGEgkK",
            "BVBTSzE2EAcSCQoFUFNLMzIQCBIJCgVQU0s2NBAJEgoKBlBTSzEyOBAKEgoK",
            "BlBTSzI1NhALEgkKBU9RUFNLEAwSCAoEUUFNOBANEgkKBVFBTTE2EA4SCQoF",
            "UUFNMzIQDxIJCgVRQU02NBAQEgoKBlFBTTEyOBAREgoKBlFBTTI1NhASEgcK",
            "A01TSxATEggKBEdNU0sQFBIGCgJBTRAVEgYKAkZNEBYSBgoCUE0QFxIOCgpQ",
            "Q01fUFNLX1BNEBgSFQoRUENNX1BNX0JJX1BIQVNFX0wQGSpVCgpMaW5lQ29k",
            "aW5nEgkKBU5SWl9MEAASCQoFTlJaX00QARIJCgVOUlpfUxACEggKBEROUloQ",
            "AxIICgRCUF9MEAQSCAoEQlBfTRAFEggKBEJQX1MQBkJpCh9jb20uc3RlbGxh",
            "cnN0YXRpb24uYXBpLnYxLnJhZGlvQgpSYWRpb1Byb3RvUAFaOGdpdGh1Yi5j",
            "b20vaW5mb3N0ZWxsYXJpbmMvZ28tc3RlbGxhcnN0YXRpb24vYXBpL3YxL3Jh",
            "ZGlvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Stellarstation.Api.V1.Antenna.AntennaReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stellarstation.Api.V1.Radio.Modulation), typeof(global::Stellarstation.Api.V1.Radio.LineCoding), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration), global::Stellarstation.Api.V1.Radio.RadioDeviceConfiguration.Parser, new[]{ "CenterFrequencyHz", "Modulation", "Bitrate", "Protocol", "Polarization" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.CommunicationProtocol), global::Stellarstation.Api.V1.Radio.CommunicationProtocol.Parser, new[]{ "Ax25", "Ccsds", "Bitstream", "AsmGolay" }, new[]{ "Framing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams), global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Parser, new[]{ "PolynomialInversion", "Puncturing" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion), typeof(global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams), global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams), global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Parser, new[]{ "BlockLengthType" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame), global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame.Parser, new[]{ "SynchronizationParams", "ConvolutionalCodingParams", "ScramblingParams", "ReedSolomonParams", "FrameLengthBytes", "LineCoding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.ASMGolay), global::Stellarstation.Api.V1.Radio.ASMGolay.Parser, new[]{ "SynchronizationParams", "EnableCcsdsScramble", "EnableReedSolomon", "EnableCrcCheck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.Bitstream), global::Stellarstation.Api.V1.Radio.Bitstream.Parser, new[]{ "SynchronizationParams", "FrameLengthBytes", "LineCoding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.SynchronizationParams), global::Stellarstation.Api.V1.Radio.SynchronizationParams.Parser, new[]{ "SynchronizationWord", "LengthBits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.AX25), global::Stellarstation.Api.V1.Radio.AX25.Parser, new[]{ "G3Ruh", "DestinationCallsign", "DestinationSsid", "SourceCallsign", "SourceSsid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.ConvolutionalCodingParams), global::Stellarstation.Api.V1.Radio.ConvolutionalCodingParams.Parser, new[]{ "K", "InverseRate", "Polynomial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Radio.ScramblingParams), global::Stellarstation.Api.V1.Radio.ScramblingParams.Parser, new[]{ "Type", "NumBits", "Mask", "Seed" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Type of modulation. Modulation is the process of converting binary data (0's and 1's) to
  /// an analog wave for use in radio communication.
  /// Next ID: 26.
  /// </summary>
  public enum Modulation {
    /// <summary>
    /// Indicates modulation is disabled and raw I/Q is being used.
    /// </summary>
    [pbr::OriginalName("DISABLED")] Disabled = 0,
    /// <summary>
    /// Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying
    /// </summary>
    [pbr::OriginalName("FSK")] Fsk = 1,
    /// <summary>
    /// Audio Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying#Audio_FSK
    /// </summary>
    [pbr::OriginalName("AFSK")] Afsk = 2,
    /// <summary>
    /// Binary Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)
    /// </summary>
    [pbr::OriginalName("BPSK")] Bpsk = 3,
    /// <summary>
    /// Multiple Frequency Shift Keying. https://en.wikipedia.org/wiki/Multiple_frequency-shift_keying
    /// </summary>
    [pbr::OriginalName("MFSK")] Mfsk = 4,
    /// <summary>
    /// Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Quadrature_phase-shift_keying_(QPSK)
    /// </summary>
    [pbr::OriginalName("QPSK")] Qpsk = 5,
    /// <summary>
    /// 8-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK8")] Psk8 = 6,
    /// <summary>
    /// 16-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK16")] Psk16 = 7,
    /// <summary>
    /// 32-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK32")] Psk32 = 8,
    /// <summary>
    /// 64-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK64")] Psk64 = 9,
    /// <summary>
    /// 128-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK128")] Psk128 = 10,
    /// <summary>
    /// 256-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
    /// </summary>
    [pbr::OriginalName("PSK256")] Psk256 = 11,
    /// <summary>
    /// Offset Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Offset_QPSK_(OQPSK)
    /// </summary>
    [pbr::OriginalName("OQPSK")] Oqpsk = 12,
    /// <summary>
    /// 8-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM8")] Qam8 = 13,
    /// <summary>
    /// 16-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM16")] Qam16 = 14,
    /// <summary>
    /// 32-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM32")] Qam32 = 15,
    /// <summary>
    /// 64-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM64")] Qam64 = 16,
    /// <summary>
    /// 128-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM128")] Qam128 = 17,
    /// <summary>
    /// 256-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
    /// </summary>
    [pbr::OriginalName("QAM256")] Qam256 = 18,
    /// <summary>
    /// Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying
    /// </summary>
    [pbr::OriginalName("MSK")] Msk = 19,
    /// <summary>
    /// Gaussian Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying#Gaussian_minimum-shift_keying
    /// </summary>
    [pbr::OriginalName("GMSK")] Gmsk = 20,
    /// <summary>
    /// Amplitude modulation (generic)
    /// </summary>
    [pbr::OriginalName("AM")] Am = 21,
    /// <summary>
    /// Frequency modulation (generic)
    /// </summary>
    [pbr::OriginalName("FM")] Fm = 22,
    /// <summary>
    /// Phase modulation (generic)
    /// </summary>
    [pbr::OriginalName("PM")] Pm = 23,
    /// <summary>
    /// PCM/PSK/PM as specified by CCSDS. https://public.ccsds.org/Pubs/401x0b29.pdf
    /// </summary>
    [pbr::OriginalName("PCM_PSK_PM")] PcmPskPm = 24,
    /// <summary>
    /// PCM/PM/bi-phase-L as specified by CCSDS. https://public.ccsds.org/Pubs/401x0b29.pdf
    /// </summary>
    [pbr::OriginalName("PCM_PM_BI_PHASE_L")] PcmPmBiPhaseL = 25,
  }

  /// <summary>
  /// Line coding applied during modulation. Line coding is the technique for modeling binary 0 and 1
  /// within a modulated waveform.
  /// </summary>
  public enum LineCoding {
    /// <summary>
    /// Non-return-to-zero level.
    /// https://en.wikipedia.org/wiki/Non-return-to-zero
    /// </summary>
    [pbr::OriginalName("NRZ_L")] NrzL = 0,
    /// <summary>
    /// Non-return-to-zero mark (i.e., differential encoding).
    /// https://en.wikipedia.org/wiki/Non-return-to-zero
    /// </summary>
    [pbr::OriginalName("NRZ_M")] NrzM = 1,
    /// <summary>
    /// Non-return-to-zero space (i.e., non-differential-encoding).
    /// https://en.wikipedia.org/wiki/Non-return-to-zero
    /// </summary>
    [pbr::OriginalName("NRZ_S")] NrzS = 2,
    /// <summary>
    /// Differential non-return-to-zero.
    /// https://en.wikipedia.org/wiki/Return-to-zero
    /// </summary>
    [pbr::OriginalName("DNRZ")] Dnrz = 3,
    /// <summary>
    /// Bipolar return-to-zero level.
    /// https://en.wikipedia.org/wiki/Bipolar_encoding
    /// </summary>
    [pbr::OriginalName("BP_L")] BpL = 4,
    /// <summary>
    /// Bipolar return-to-zero mark (i.e., differential encoding).
    /// https://en.wikipedia.org/wiki/Bipolar_encoding
    /// </summary>
    [pbr::OriginalName("BP_M")] BpM = 5,
    /// <summary>
    /// Bipolar return-to-zero space (i.e., non-differential encoding).
    /// https://en.wikipedia.org/wiki/Bipolar_encoding
    /// </summary>
    [pbr::OriginalName("BP_S")] BpS = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A radio device for RF communication. Usually, a satellite will have one or more radio devices for
  /// communicating with the ground and a ground station will have one or more radio devices for
  /// communicating with the satellite. Such devices may not actually correspond to actual hardware
  /// devices, i.e., in the case of Software Defined Radio (SDR).
  /// </summary>
  public sealed partial class RadioDeviceConfiguration : pb::IMessage<RadioDeviceConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RadioDeviceConfiguration> _parser = new pb::MessageParser<RadioDeviceConfiguration>(() => new RadioDeviceConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadioDeviceConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioDeviceConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioDeviceConfiguration(RadioDeviceConfiguration other) : this() {
      centerFrequencyHz_ = other.centerFrequencyHz_;
      modulation_ = other.modulation_;
      bitrate_ = other.bitrate_;
      protocol_ = other.protocol_ != null ? other.protocol_.Clone() : null;
      polarization_ = other.polarization_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioDeviceConfiguration Clone() {
      return new RadioDeviceConfiguration(this);
    }

    /// <summary>Field number for the "center_frequency_hz" field.</summary>
    public const int CenterFrequencyHzFieldNumber = 1;
    private ulong centerFrequencyHz_;
    /// <summary>
    /// The center frequency of the device, in Hz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CenterFrequencyHz {
      get { return centerFrequencyHz_; }
      set {
        centerFrequencyHz_ = value;
      }
    }

    /// <summary>Field number for the "modulation" field.</summary>
    public const int ModulationFieldNumber = 2;
    private global::Stellarstation.Api.V1.Radio.Modulation modulation_ = global::Stellarstation.Api.V1.Radio.Modulation.Disabled;
    /// <summary>
    /// The type of modulation used by this radio device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.Modulation Modulation {
      get { return modulation_; }
      set {
        modulation_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 3;
    private ulong bitrate_;
    /// <summary>
    /// The bitrate used during modulation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private global::Stellarstation.Api.V1.Radio.CommunicationProtocol protocol_;
    /// <summary>
    /// The protocol used by this device when doing RF communication. If unset, the device is only
    /// demodulating / modulating without applying any higher-level communication protocol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CommunicationProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "polarization" field.</summary>
    public const int PolarizationFieldNumber = 5;
    private global::Stellarstation.Api.V1.Antenna.AntennaPolarization polarization_ = global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal;
    /// <summary>
    /// The polarization of the antenna.
    ///
    /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
    ///         incompatible ways in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Antenna.AntennaPolarization Polarization {
      get { return polarization_; }
      set {
        polarization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadioDeviceConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadioDeviceConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CenterFrequencyHz != other.CenterFrequencyHz) return false;
      if (Modulation != other.Modulation) return false;
      if (Bitrate != other.Bitrate) return false;
      if (!object.Equals(Protocol, other.Protocol)) return false;
      if (Polarization != other.Polarization) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CenterFrequencyHz != 0UL) hash ^= CenterFrequencyHz.GetHashCode();
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) hash ^= Modulation.GetHashCode();
      if (Bitrate != 0UL) hash ^= Bitrate.GetHashCode();
      if (protocol_ != null) hash ^= Protocol.GetHashCode();
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) hash ^= Polarization.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Modulation);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Bitrate);
      }
      if (protocol_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Protocol);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Polarization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Modulation);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Bitrate);
      }
      if (protocol_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Protocol);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Polarization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CenterFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CenterFrequencyHz);
      }
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Modulation);
      }
      if (Bitrate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitrate);
      }
      if (protocol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Protocol);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Polarization);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadioDeviceConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.CenterFrequencyHz != 0UL) {
        CenterFrequencyHz = other.CenterFrequencyHz;
      }
      if (other.Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        Modulation = other.Modulation;
      }
      if (other.Bitrate != 0UL) {
        Bitrate = other.Bitrate;
      }
      if (other.protocol_ != null) {
        if (protocol_ == null) {
          Protocol = new global::Stellarstation.Api.V1.Radio.CommunicationProtocol();
        }
        Protocol.MergeFrom(other.Protocol);
      }
      if (other.Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        Polarization = other.Polarization;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 16: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 24: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 34: {
            if (protocol_ == null) {
              Protocol = new global::Stellarstation.Api.V1.Radio.CommunicationProtocol();
            }
            input.ReadMessage(Protocol);
            break;
          }
          case 40: {
            Polarization = (global::Stellarstation.Api.V1.Antenna.AntennaPolarization) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 16: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 24: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 34: {
            if (protocol_ == null) {
              Protocol = new global::Stellarstation.Api.V1.Radio.CommunicationProtocol();
            }
            input.ReadMessage(Protocol);
            break;
          }
          case 40: {
            Polarization = (global::Stellarstation.Api.V1.Antenna.AntennaPolarization) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A communication protocol used with a radio device. These must contain all the parameters
  /// needed to configure the device for use either in transmission or reception.
  /// </summary>
  public sealed partial class CommunicationProtocol : pb::IMessage<CommunicationProtocol>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommunicationProtocol> _parser = new pb::MessageParser<CommunicationProtocol>(() => new CommunicationProtocol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommunicationProtocol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationProtocol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationProtocol(CommunicationProtocol other) : this() {
      switch (other.FramingCase) {
        case FramingOneofCase.Ax25:
          Ax25 = other.Ax25.Clone();
          break;
        case FramingOneofCase.Ccsds:
          Ccsds = other.Ccsds.Clone();
          break;
        case FramingOneofCase.Bitstream:
          Bitstream = other.Bitstream.Clone();
          break;
        case FramingOneofCase.AsmGolay:
          AsmGolay = other.AsmGolay.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommunicationProtocol Clone() {
      return new CommunicationProtocol(this);
    }

    /// <summary>Field number for the "ax25" field.</summary>
    public const int Ax25FieldNumber = 1;
    /// <summary>
    /// AX.25 protocol settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.AX25 Ax25 {
      get { return framingCase_ == FramingOneofCase.Ax25 ? (global::Stellarstation.Api.V1.Radio.AX25) framing_ : null; }
      set {
        framing_ = value;
        framingCase_ = value == null ? FramingOneofCase.None : FramingOneofCase.Ax25;
      }
    }

    /// <summary>Field number for the "ccsds" field.</summary>
    public const int CcsdsFieldNumber = 2;
    /// <summary>
    /// CCSDS transfer frame settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame Ccsds {
      get { return framingCase_ == FramingOneofCase.Ccsds ? (global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame) framing_ : null; }
      set {
        framing_ = value;
        framingCase_ = value == null ? FramingOneofCase.None : FramingOneofCase.Ccsds;
      }
    }

    /// <summary>Field number for the "bitstream" field.</summary>
    public const int BitstreamFieldNumber = 3;
    /// <summary>
    /// Bitstream framing settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.Bitstream Bitstream {
      get { return framingCase_ == FramingOneofCase.Bitstream ? (global::Stellarstation.Api.V1.Radio.Bitstream) framing_ : null; }
      set {
        framing_ = value;
        framingCase_ = value == null ? FramingOneofCase.None : FramingOneofCase.Bitstream;
      }
    }

    /// <summary>Field number for the "asm_golay" field.</summary>
    public const int AsmGolayFieldNumber = 4;
    /// <summary>
    /// AX 100 ASM + Golay mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.ASMGolay AsmGolay {
      get { return framingCase_ == FramingOneofCase.AsmGolay ? (global::Stellarstation.Api.V1.Radio.ASMGolay) framing_ : null; }
      set {
        framing_ = value;
        framingCase_ = value == null ? FramingOneofCase.None : FramingOneofCase.AsmGolay;
      }
    }

    private object framing_;
    /// <summary>Enum of possible cases for the "Framing" oneof.</summary>
    public enum FramingOneofCase {
      None = 0,
      Ax25 = 1,
      Ccsds = 2,
      Bitstream = 3,
      AsmGolay = 4,
    }
    private FramingOneofCase framingCase_ = FramingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FramingOneofCase FramingCase {
      get { return framingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFraming() {
      framingCase_ = FramingOneofCase.None;
      framing_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommunicationProtocol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommunicationProtocol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ax25, other.Ax25)) return false;
      if (!object.Equals(Ccsds, other.Ccsds)) return false;
      if (!object.Equals(Bitstream, other.Bitstream)) return false;
      if (!object.Equals(AsmGolay, other.AsmGolay)) return false;
      if (FramingCase != other.FramingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (framingCase_ == FramingOneofCase.Ax25) hash ^= Ax25.GetHashCode();
      if (framingCase_ == FramingOneofCase.Ccsds) hash ^= Ccsds.GetHashCode();
      if (framingCase_ == FramingOneofCase.Bitstream) hash ^= Bitstream.GetHashCode();
      if (framingCase_ == FramingOneofCase.AsmGolay) hash ^= AsmGolay.GetHashCode();
      hash ^= (int) framingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (framingCase_ == FramingOneofCase.Ax25) {
        output.WriteRawTag(10);
        output.WriteMessage(Ax25);
      }
      if (framingCase_ == FramingOneofCase.Ccsds) {
        output.WriteRawTag(18);
        output.WriteMessage(Ccsds);
      }
      if (framingCase_ == FramingOneofCase.Bitstream) {
        output.WriteRawTag(26);
        output.WriteMessage(Bitstream);
      }
      if (framingCase_ == FramingOneofCase.AsmGolay) {
        output.WriteRawTag(34);
        output.WriteMessage(AsmGolay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (framingCase_ == FramingOneofCase.Ax25) {
        output.WriteRawTag(10);
        output.WriteMessage(Ax25);
      }
      if (framingCase_ == FramingOneofCase.Ccsds) {
        output.WriteRawTag(18);
        output.WriteMessage(Ccsds);
      }
      if (framingCase_ == FramingOneofCase.Bitstream) {
        output.WriteRawTag(26);
        output.WriteMessage(Bitstream);
      }
      if (framingCase_ == FramingOneofCase.AsmGolay) {
        output.WriteRawTag(34);
        output.WriteMessage(AsmGolay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (framingCase_ == FramingOneofCase.Ax25) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ax25);
      }
      if (framingCase_ == FramingOneofCase.Ccsds) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ccsds);
      }
      if (framingCase_ == FramingOneofCase.Bitstream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bitstream);
      }
      if (framingCase_ == FramingOneofCase.AsmGolay) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AsmGolay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommunicationProtocol other) {
      if (other == null) {
        return;
      }
      switch (other.FramingCase) {
        case FramingOneofCase.Ax25:
          if (Ax25 == null) {
            Ax25 = new global::Stellarstation.Api.V1.Radio.AX25();
          }
          Ax25.MergeFrom(other.Ax25);
          break;
        case FramingOneofCase.Ccsds:
          if (Ccsds == null) {
            Ccsds = new global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame();
          }
          Ccsds.MergeFrom(other.Ccsds);
          break;
        case FramingOneofCase.Bitstream:
          if (Bitstream == null) {
            Bitstream = new global::Stellarstation.Api.V1.Radio.Bitstream();
          }
          Bitstream.MergeFrom(other.Bitstream);
          break;
        case FramingOneofCase.AsmGolay:
          if (AsmGolay == null) {
            AsmGolay = new global::Stellarstation.Api.V1.Radio.ASMGolay();
          }
          AsmGolay.MergeFrom(other.AsmGolay);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Stellarstation.Api.V1.Radio.AX25 subBuilder = new global::Stellarstation.Api.V1.Radio.AX25();
            if (framingCase_ == FramingOneofCase.Ax25) {
              subBuilder.MergeFrom(Ax25);
            }
            input.ReadMessage(subBuilder);
            Ax25 = subBuilder;
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame subBuilder = new global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame();
            if (framingCase_ == FramingOneofCase.Ccsds) {
              subBuilder.MergeFrom(Ccsds);
            }
            input.ReadMessage(subBuilder);
            Ccsds = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.Radio.Bitstream subBuilder = new global::Stellarstation.Api.V1.Radio.Bitstream();
            if (framingCase_ == FramingOneofCase.Bitstream) {
              subBuilder.MergeFrom(Bitstream);
            }
            input.ReadMessage(subBuilder);
            Bitstream = subBuilder;
            break;
          }
          case 34: {
            global::Stellarstation.Api.V1.Radio.ASMGolay subBuilder = new global::Stellarstation.Api.V1.Radio.ASMGolay();
            if (framingCase_ == FramingOneofCase.AsmGolay) {
              subBuilder.MergeFrom(AsmGolay);
            }
            input.ReadMessage(subBuilder);
            AsmGolay = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Stellarstation.Api.V1.Radio.AX25 subBuilder = new global::Stellarstation.Api.V1.Radio.AX25();
            if (framingCase_ == FramingOneofCase.Ax25) {
              subBuilder.MergeFrom(Ax25);
            }
            input.ReadMessage(subBuilder);
            Ax25 = subBuilder;
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame subBuilder = new global::Stellarstation.Api.V1.Radio.CCSDSTransferFrame();
            if (framingCase_ == FramingOneofCase.Ccsds) {
              subBuilder.MergeFrom(Ccsds);
            }
            input.ReadMessage(subBuilder);
            Ccsds = subBuilder;
            break;
          }
          case 26: {
            global::Stellarstation.Api.V1.Radio.Bitstream subBuilder = new global::Stellarstation.Api.V1.Radio.Bitstream();
            if (framingCase_ == FramingOneofCase.Bitstream) {
              subBuilder.MergeFrom(Bitstream);
            }
            input.ReadMessage(subBuilder);
            Bitstream = subBuilder;
            break;
          }
          case 34: {
            global::Stellarstation.Api.V1.Radio.ASMGolay subBuilder = new global::Stellarstation.Api.V1.Radio.ASMGolay();
            if (framingCase_ == FramingOneofCase.AsmGolay) {
              subBuilder.MergeFrom(AsmGolay);
            }
            input.ReadMessage(subBuilder);
            AsmGolay = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// CCSDS-specific convolutional coding parameters.
  /// Code rate (r): 1/2
  /// Constraint length (K): 7
  /// Connection vectors:
  ///   G1 = 1111001
  ///   G2 = 1011011
  /// </summary>
  public sealed partial class CCSDSConvolutionalCodingParams : pb::IMessage<CCSDSConvolutionalCodingParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCSDSConvolutionalCodingParams> _parser = new pb::MessageParser<CCSDSConvolutionalCodingParams>(() => new CCSDSConvolutionalCodingParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCSDSConvolutionalCodingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSConvolutionalCodingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSConvolutionalCodingParams(CCSDSConvolutionalCodingParams other) : this() {
      polynomialInversion_ = other.polynomialInversion_;
      puncturing_ = other.puncturing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSConvolutionalCodingParams Clone() {
      return new CCSDSConvolutionalCodingParams(this);
    }

    /// <summary>Field number for the "polynomial_inversion" field.</summary>
    public const int PolynomialInversionFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion polynomialInversion_ = global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion PolynomialInversion {
      get { return polynomialInversion_; }
      set {
        polynomialInversion_ = value;
      }
    }

    /// <summary>Field number for the "puncturing" field.</summary>
    public const int PuncturingFieldNumber = 2;
    private global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing puncturing_ = global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off;
    /// <summary>
    /// Optional puncturing for convolutional code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing Puncturing {
      get { return puncturing_; }
      set {
        puncturing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCSDSConvolutionalCodingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCSDSConvolutionalCodingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PolynomialInversion != other.PolynomialInversion) return false;
      if (Puncturing != other.Puncturing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PolynomialInversion != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2) hash ^= PolynomialInversion.GetHashCode();
      if (Puncturing != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off) hash ^= Puncturing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PolynomialInversion != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PolynomialInversion);
      }
      if (Puncturing != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Puncturing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PolynomialInversion != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PolynomialInversion);
      }
      if (Puncturing != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Puncturing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PolynomialInversion != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PolynomialInversion);
      }
      if (Puncturing != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Puncturing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCSDSConvolutionalCodingParams other) {
      if (other == null) {
        return;
      }
      if (other.PolynomialInversion != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion.G1G2) {
        PolynomialInversion = other.PolynomialInversion;
      }
      if (other.Puncturing != global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing.Off) {
        Puncturing = other.Puncturing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PolynomialInversion = (global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion) input.ReadEnum();
            break;
          }
          case 16: {
            Puncturing = (global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PolynomialInversion = (global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.PolynomialInversion) input.ReadEnum();
            break;
          }
          case 16: {
            Puncturing = (global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams.Types.Puncturing) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CCSDSConvolutionalCodingParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Polynomial inversion.
      /// </summary>
      public enum PolynomialInversion {
        /// <summary>
        /// CCSDS transfer frame with normal phase rotation.
        /// </summary>
        [pbr::OriginalName("G1_G2")] G1G2 = 0,
        /// <summary>
        /// CCSDS transfer frame with inverted phase rotation.
        /// </summary>
        [pbr::OriginalName("G1_G2_INVERTED")] G1G2Inverted = 1,
        /// <summary>
        /// G2-inverted G1.
        /// </summary>
        [pbr::OriginalName("G2_INVERTED_G1")] G2InvertedG1 = 2,
        /// <summary>
        /// G2-G1.
        /// </summary>
        [pbr::OriginalName("G2_G1")] G2G1 = 3,
      }

      /// <summary>
      /// Enum describing different rates for puncturing.
      /// </summary>
      public enum Puncturing {
        /// <summary>
        /// No puncturing.
        /// </summary>
        [pbr::OriginalName("OFF")] Off = 0,
        /// <summary>
        /// Puncturing rate 2/3.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_2_3")] Puncture23 = 1,
        /// <summary>
        /// Puncturing rate 3/4.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_3_4")] Puncture34 = 2,
        /// <summary>
        /// Puncturing rate 4/5.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_4_5")] Puncture45 = 3,
        /// <summary>
        /// Puncturing rate 5/6.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_5_6")] Puncture56 = 4,
        /// <summary>
        /// Puncturing rate 6/7.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_6_7")] Puncture67 = 5,
        /// <summary>
        /// Puncturing rate 7/8.
        /// </summary>
        [pbr::OriginalName("PUNCTURE_7_8")] Puncture78 = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// CCSDS-specific scrambling parameters.
  /// Additive scrambler with pseudo-random sequence generated by the polynomial:
  /// h(x) = x^8 + x^7 + x^5 + x^3 + 1
  /// </summary>
  public sealed partial class CCSDSScramblingParams : pb::IMessage<CCSDSScramblingParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCSDSScramblingParams> _parser = new pb::MessageParser<CCSDSScramblingParams>(() => new CCSDSScramblingParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCSDSScramblingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSScramblingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSScramblingParams(CCSDSScramblingParams other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSScramblingParams Clone() {
      return new CCSDSScramblingParams(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCSDSScramblingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCSDSScramblingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCSDSScramblingParams other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// CCSDS-specific Reed-Solomon parameters.
  /// </summary>
  public sealed partial class CCSDSReedSolomonParams : pb::IMessage<CCSDSReedSolomonParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCSDSReedSolomonParams> _parser = new pb::MessageParser<CCSDSReedSolomonParams>(() => new CCSDSReedSolomonParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCSDSReedSolomonParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSReedSolomonParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSReedSolomonParams(CCSDSReedSolomonParams other) : this() {
      blockLengthType_ = other.blockLengthType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSReedSolomonParams Clone() {
      return new CCSDSReedSolomonParams(this);
    }

    /// <summary>Field number for the "block_length_type" field.</summary>
    public const int BlockLengthTypeFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType blockLengthType_ = global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255;
    /// <summary>
    /// Block length type for RS code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType BlockLengthType {
      get { return blockLengthType_; }
      set {
        blockLengthType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCSDSReedSolomonParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCSDSReedSolomonParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockLengthType != other.BlockLengthType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockLengthType != global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255) hash ^= BlockLengthType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BlockLengthType != global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlockLengthType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BlockLengthType != global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlockLengthType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockLengthType != global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockLengthType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCSDSReedSolomonParams other) {
      if (other == null) {
        return;
      }
      if (other.BlockLengthType != global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType.Rs223255) {
        BlockLengthType = other.BlockLengthType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockLengthType = (global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BlockLengthType = (global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams.Types.BlockLengthType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CCSDSReedSolomonParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Enum defining RS Code block length.
      /// </summary>
      public enum BlockLengthType {
        /// <summary>
        /// (255, 223, 16) RS code.
        /// </summary>
        [pbr::OriginalName("RS_223_255")] Rs223255 = 0,
        /// <summary>
        /// (255, 239, 8) RS code.
        /// </summary>
        [pbr::OriginalName("RS_239_255")] Rs239255 = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// https://public.ccsds.org/Pubs/131x0b3e1.pdf
  ///
  /// CCSDS transfer frames allow for a few common variations satellites use such as setting a
  /// custom synchronization word, inverting the convolutional coding polynomials,
  /// etc. The sequence of error-correcting codes will be applied as they are
  /// defined in the CCSDS standard.
  /// </summary>
  public sealed partial class CCSDSTransferFrame : pb::IMessage<CCSDSTransferFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCSDSTransferFrame> _parser = new pb::MessageParser<CCSDSTransferFrame>(() => new CCSDSTransferFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CCSDSTransferFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSTransferFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSTransferFrame(CCSDSTransferFrame other) : this() {
      synchronizationParams_ = other.synchronizationParams_ != null ? other.synchronizationParams_.Clone() : null;
      convolutionalCodingParams_ = other.convolutionalCodingParams_ != null ? other.convolutionalCodingParams_.Clone() : null;
      scramblingParams_ = other.scramblingParams_ != null ? other.scramblingParams_.Clone() : null;
      reedSolomonParams_ = other.reedSolomonParams_ != null ? other.reedSolomonParams_.Clone() : null;
      frameLengthBytes_ = other.frameLengthBytes_;
      lineCoding_ = other.lineCoding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CCSDSTransferFrame Clone() {
      return new CCSDSTransferFrame(this);
    }

    /// <summary>Field number for the "synchronization_params" field.</summary>
    public const int SynchronizationParamsFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.SynchronizationParams synchronizationParams_;
    /// <summary>
    /// Synchronization word parameters. If unset, synchronization will be enabled
    /// using the default CCSDS transfer frame standard synchronization word as in
    /// 9.3.5 (Page 9-3) in the specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.SynchronizationParams SynchronizationParams {
      get { return synchronizationParams_; }
      set {
        synchronizationParams_ = value;
      }
    }

    /// <summary>Field number for the "convolutional_coding_params" field.</summary>
    public const int ConvolutionalCodingParamsFieldNumber = 2;
    private global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams convolutionalCodingParams_;
    /// <summary>
    /// Convolutional coding parameters. If unset, convolutional coding is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams ConvolutionalCodingParams {
      get { return convolutionalCodingParams_; }
      set {
        convolutionalCodingParams_ = value;
      }
    }

    /// <summary>Field number for the "scrambling_params" field.</summary>
    public const int ScramblingParamsFieldNumber = 3;
    private global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams scramblingParams_;
    /// <summary>
    /// Scrambling parameters. If unset, scrambling is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams ScramblingParams {
      get { return scramblingParams_; }
      set {
        scramblingParams_ = value;
      }
    }

    /// <summary>Field number for the "reed_solomon_params" field.</summary>
    public const int ReedSolomonParamsFieldNumber = 4;
    private global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams reedSolomonParams_;
    /// <summary>
    /// Reed-Solomon parameters. If unset, Reed-Solomon is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams ReedSolomonParams {
      get { return reedSolomonParams_; }
      set {
        reedSolomonParams_ = value;
      }
    }

    /// <summary>Field number for the "frame_length_bytes" field.</summary>
    public const int FrameLengthBytesFieldNumber = 5;
    private uint frameLengthBytes_;
    /// <summary>
    /// Frame length, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameLengthBytes {
      get { return frameLengthBytes_; }
      set {
        frameLengthBytes_ = value;
      }
    }

    /// <summary>Field number for the "line_coding" field.</summary>
    public const int LineCodingFieldNumber = 6;
    private global::Stellarstation.Api.V1.Radio.LineCoding lineCoding_ = global::Stellarstation.Api.V1.Radio.LineCoding.NrzL;
    /// <summary>
    /// Line coding used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.LineCoding LineCoding {
      get { return lineCoding_; }
      set {
        lineCoding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CCSDSTransferFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CCSDSTransferFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SynchronizationParams, other.SynchronizationParams)) return false;
      if (!object.Equals(ConvolutionalCodingParams, other.ConvolutionalCodingParams)) return false;
      if (!object.Equals(ScramblingParams, other.ScramblingParams)) return false;
      if (!object.Equals(ReedSolomonParams, other.ReedSolomonParams)) return false;
      if (FrameLengthBytes != other.FrameLengthBytes) return false;
      if (LineCoding != other.LineCoding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (synchronizationParams_ != null) hash ^= SynchronizationParams.GetHashCode();
      if (convolutionalCodingParams_ != null) hash ^= ConvolutionalCodingParams.GetHashCode();
      if (scramblingParams_ != null) hash ^= ScramblingParams.GetHashCode();
      if (reedSolomonParams_ != null) hash ^= ReedSolomonParams.GetHashCode();
      if (FrameLengthBytes != 0) hash ^= FrameLengthBytes.GetHashCode();
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) hash ^= LineCoding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (convolutionalCodingParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConvolutionalCodingParams);
      }
      if (scramblingParams_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScramblingParams);
      }
      if (reedSolomonParams_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReedSolomonParams);
      }
      if (FrameLengthBytes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LineCoding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (convolutionalCodingParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConvolutionalCodingParams);
      }
      if (scramblingParams_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScramblingParams);
      }
      if (reedSolomonParams_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReedSolomonParams);
      }
      if (FrameLengthBytes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LineCoding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (synchronizationParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizationParams);
      }
      if (convolutionalCodingParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvolutionalCodingParams);
      }
      if (scramblingParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScramblingParams);
      }
      if (reedSolomonParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReedSolomonParams);
      }
      if (FrameLengthBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineCoding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CCSDSTransferFrame other) {
      if (other == null) {
        return;
      }
      if (other.synchronizationParams_ != null) {
        if (synchronizationParams_ == null) {
          SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
        }
        SynchronizationParams.MergeFrom(other.SynchronizationParams);
      }
      if (other.convolutionalCodingParams_ != null) {
        if (convolutionalCodingParams_ == null) {
          ConvolutionalCodingParams = new global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams();
        }
        ConvolutionalCodingParams.MergeFrom(other.ConvolutionalCodingParams);
      }
      if (other.scramblingParams_ != null) {
        if (scramblingParams_ == null) {
          ScramblingParams = new global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams();
        }
        ScramblingParams.MergeFrom(other.ScramblingParams);
      }
      if (other.reedSolomonParams_ != null) {
        if (reedSolomonParams_ == null) {
          ReedSolomonParams = new global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams();
        }
        ReedSolomonParams.MergeFrom(other.ReedSolomonParams);
      }
      if (other.FrameLengthBytes != 0) {
        FrameLengthBytes = other.FrameLengthBytes;
      }
      if (other.LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        LineCoding = other.LineCoding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 18: {
            if (convolutionalCodingParams_ == null) {
              ConvolutionalCodingParams = new global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams();
            }
            input.ReadMessage(ConvolutionalCodingParams);
            break;
          }
          case 26: {
            if (scramblingParams_ == null) {
              ScramblingParams = new global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams();
            }
            input.ReadMessage(ScramblingParams);
            break;
          }
          case 34: {
            if (reedSolomonParams_ == null) {
              ReedSolomonParams = new global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams();
            }
            input.ReadMessage(ReedSolomonParams);
            break;
          }
          case 40: {
            FrameLengthBytes = input.ReadUInt32();
            break;
          }
          case 48: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 18: {
            if (convolutionalCodingParams_ == null) {
              ConvolutionalCodingParams = new global::Stellarstation.Api.V1.Radio.CCSDSConvolutionalCodingParams();
            }
            input.ReadMessage(ConvolutionalCodingParams);
            break;
          }
          case 26: {
            if (scramblingParams_ == null) {
              ScramblingParams = new global::Stellarstation.Api.V1.Radio.CCSDSScramblingParams();
            }
            input.ReadMessage(ScramblingParams);
            break;
          }
          case 34: {
            if (reedSolomonParams_ == null) {
              ReedSolomonParams = new global::Stellarstation.Api.V1.Radio.CCSDSReedSolomonParams();
            }
            input.ReadMessage(ReedSolomonParams);
            break;
          }
          case 40: {
            FrameLengthBytes = input.ReadUInt32();
            break;
          }
          case 48: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ASM+Golay mode for GOM Space AX100 radio.
  /// https://gomspace.com/UserFiles/Subsystems/datasheet/gs-ds-nanocom-ax100-33.pdf
  /// </summary>
  public sealed partial class ASMGolay : pb::IMessage<ASMGolay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ASMGolay> _parser = new pb::MessageParser<ASMGolay>(() => new ASMGolay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ASMGolay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ASMGolay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ASMGolay(ASMGolay other) : this() {
      synchronizationParams_ = other.synchronizationParams_ != null ? other.synchronizationParams_.Clone() : null;
      enableCcsdsScramble_ = other.enableCcsdsScramble_;
      enableReedSolomon_ = other.enableReedSolomon_;
      enableCrcCheck_ = other.enableCrcCheck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ASMGolay Clone() {
      return new ASMGolay(this);
    }

    /// <summary>Field number for the "synchronization_params" field.</summary>
    public const int SynchronizationParamsFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.SynchronizationParams synchronizationParams_;
    /// <summary>
    /// Synchronization word parameters. If unset, the default synchronization word defined
    /// by the AX100 will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.SynchronizationParams SynchronizationParams {
      get { return synchronizationParams_; }
      set {
        synchronizationParams_ = value;
      }
    }

    /// <summary>Field number for the "enable_ccsds_scramble" field.</summary>
    public const int EnableCcsdsScrambleFieldNumber = 2;
    private bool enableCcsdsScramble_;
    /// <summary>
    /// Whether to enable CCSDS scrambling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableCcsdsScramble {
      get { return enableCcsdsScramble_; }
      set {
        enableCcsdsScramble_ = value;
      }
    }

    /// <summary>Field number for the "enable_reed_solomon" field.</summary>
    public const int EnableReedSolomonFieldNumber = 3;
    private bool enableReedSolomon_;
    /// <summary>
    /// Whether to enable Reed Solomon error correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableReedSolomon {
      get { return enableReedSolomon_; }
      set {
        enableReedSolomon_ = value;
      }
    }

    /// <summary>Field number for the "enable_crc_check" field.</summary>
    public const int EnableCrcCheckFieldNumber = 4;
    private bool enableCrcCheck_;
    /// <summary>
    /// Whether to enable CRC checking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableCrcCheck {
      get { return enableCrcCheck_; }
      set {
        enableCrcCheck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ASMGolay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ASMGolay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SynchronizationParams, other.SynchronizationParams)) return false;
      if (EnableCcsdsScramble != other.EnableCcsdsScramble) return false;
      if (EnableReedSolomon != other.EnableReedSolomon) return false;
      if (EnableCrcCheck != other.EnableCrcCheck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (synchronizationParams_ != null) hash ^= SynchronizationParams.GetHashCode();
      if (EnableCcsdsScramble != false) hash ^= EnableCcsdsScramble.GetHashCode();
      if (EnableReedSolomon != false) hash ^= EnableReedSolomon.GetHashCode();
      if (EnableCrcCheck != false) hash ^= EnableCrcCheck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (EnableCcsdsScramble != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableCcsdsScramble);
      }
      if (EnableReedSolomon != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnableReedSolomon);
      }
      if (EnableCrcCheck != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableCrcCheck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (EnableCcsdsScramble != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableCcsdsScramble);
      }
      if (EnableReedSolomon != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnableReedSolomon);
      }
      if (EnableCrcCheck != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableCrcCheck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (synchronizationParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizationParams);
      }
      if (EnableCcsdsScramble != false) {
        size += 1 + 1;
      }
      if (EnableReedSolomon != false) {
        size += 1 + 1;
      }
      if (EnableCrcCheck != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ASMGolay other) {
      if (other == null) {
        return;
      }
      if (other.synchronizationParams_ != null) {
        if (synchronizationParams_ == null) {
          SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
        }
        SynchronizationParams.MergeFrom(other.SynchronizationParams);
      }
      if (other.EnableCcsdsScramble != false) {
        EnableCcsdsScramble = other.EnableCcsdsScramble;
      }
      if (other.EnableReedSolomon != false) {
        EnableReedSolomon = other.EnableReedSolomon;
      }
      if (other.EnableCrcCheck != false) {
        EnableCrcCheck = other.EnableCrcCheck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 16: {
            EnableCcsdsScramble = input.ReadBool();
            break;
          }
          case 24: {
            EnableReedSolomon = input.ReadBool();
            break;
          }
          case 32: {
            EnableCrcCheck = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 16: {
            EnableCcsdsScramble = input.ReadBool();
            break;
          }
          case 24: {
            EnableReedSolomon = input.ReadBool();
            break;
          }
          case 32: {
            EnableCrcCheck = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Framing for satellites that don't conform to a particular standard. Usually, only
  /// a synchronization word and expected frame length can be set.
  /// </summary>
  public sealed partial class Bitstream : pb::IMessage<Bitstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bitstream> _parser = new pb::MessageParser<Bitstream>(() => new Bitstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bitstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bitstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bitstream(Bitstream other) : this() {
      synchronizationParams_ = other.synchronizationParams_ != null ? other.synchronizationParams_.Clone() : null;
      frameLengthBytes_ = other.frameLengthBytes_;
      lineCoding_ = other.lineCoding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bitstream Clone() {
      return new Bitstream(this);
    }

    /// <summary>Field number for the "synchronization_params" field.</summary>
    public const int SynchronizationParamsFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.SynchronizationParams synchronizationParams_;
    /// <summary>
    /// Synchronization word parameters. If unset, synchronization is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.SynchronizationParams SynchronizationParams {
      get { return synchronizationParams_; }
      set {
        synchronizationParams_ = value;
      }
    }

    /// <summary>Field number for the "frame_length_bytes" field.</summary>
    public const int FrameLengthBytesFieldNumber = 2;
    private uint frameLengthBytes_;
    /// <summary>
    /// Frame length, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameLengthBytes {
      get { return frameLengthBytes_; }
      set {
        frameLengthBytes_ = value;
      }
    }

    /// <summary>Field number for the "line_coding" field.</summary>
    public const int LineCodingFieldNumber = 3;
    private global::Stellarstation.Api.V1.Radio.LineCoding lineCoding_ = global::Stellarstation.Api.V1.Radio.LineCoding.NrzL;
    /// <summary>
    /// Line coding used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.LineCoding LineCoding {
      get { return lineCoding_; }
      set {
        lineCoding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bitstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bitstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SynchronizationParams, other.SynchronizationParams)) return false;
      if (FrameLengthBytes != other.FrameLengthBytes) return false;
      if (LineCoding != other.LineCoding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (synchronizationParams_ != null) hash ^= SynchronizationParams.GetHashCode();
      if (FrameLengthBytes != 0) hash ^= FrameLengthBytes.GetHashCode();
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) hash ^= LineCoding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (FrameLengthBytes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LineCoding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (synchronizationParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SynchronizationParams);
      }
      if (FrameLengthBytes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LineCoding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (synchronizationParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizationParams);
      }
      if (FrameLengthBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameLengthBytes);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineCoding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bitstream other) {
      if (other == null) {
        return;
      }
      if (other.synchronizationParams_ != null) {
        if (synchronizationParams_ == null) {
          SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
        }
        SynchronizationParams.MergeFrom(other.SynchronizationParams);
      }
      if (other.FrameLengthBytes != 0) {
        FrameLengthBytes = other.FrameLengthBytes;
      }
      if (other.LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        LineCoding = other.LineCoding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 16: {
            FrameLengthBytes = input.ReadUInt32();
            break;
          }
          case 24: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (synchronizationParams_ == null) {
              SynchronizationParams = new global::Stellarstation.Api.V1.Radio.SynchronizationParams();
            }
            input.ReadMessage(SynchronizationParams);
            break;
          }
          case 16: {
            FrameLengthBytes = input.ReadUInt32();
            break;
          }
          case 24: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters for frame synchronization.
  /// </summary>
  public sealed partial class SynchronizationParams : pb::IMessage<SynchronizationParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SynchronizationParams> _parser = new pb::MessageParser<SynchronizationParams>(() => new SynchronizationParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SynchronizationParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizationParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizationParams(SynchronizationParams other) : this() {
      synchronizationWord_ = other.synchronizationWord_;
      lengthBits_ = other.lengthBits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizationParams Clone() {
      return new SynchronizationParams(this);
    }

    /// <summary>Field number for the "synchronization_word" field.</summary>
    public const int SynchronizationWordFieldNumber = 1;
    private pb::ByteString synchronizationWord_ = pb::ByteString.Empty;
    /// <summary>
    /// The actual bytes of the synchronization word. Least significant bit aligned
    /// E.g.
    /// 15-bit sync word of 0x7fff should be represented as 0111 1111 1111 1111 or [0x7f, 0xff]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SynchronizationWord {
      get { return synchronizationWord_; }
      set {
        synchronizationWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length_bits" field.</summary>
    public const int LengthBitsFieldNumber = 2;
    private uint lengthBits_;
    /// <summary>
    /// The length in bits of the synchronization word.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LengthBits {
      get { return lengthBits_; }
      set {
        lengthBits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SynchronizationParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SynchronizationParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SynchronizationWord != other.SynchronizationWord) return false;
      if (LengthBits != other.LengthBits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SynchronizationWord.Length != 0) hash ^= SynchronizationWord.GetHashCode();
      if (LengthBits != 0) hash ^= LengthBits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SynchronizationWord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SynchronizationWord);
      }
      if (LengthBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LengthBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SynchronizationWord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SynchronizationWord);
      }
      if (LengthBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LengthBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SynchronizationWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SynchronizationWord);
      }
      if (LengthBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LengthBits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SynchronizationParams other) {
      if (other == null) {
        return;
      }
      if (other.SynchronizationWord.Length != 0) {
        SynchronizationWord = other.SynchronizationWord;
      }
      if (other.LengthBits != 0) {
        LengthBits = other.LengthBits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SynchronizationWord = input.ReadBytes();
            break;
          }
          case 16: {
            LengthBits = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SynchronizationWord = input.ReadBytes();
            break;
          }
          case 16: {
            LengthBits = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// PACKET communication based on AX.25. https://www.sigidwiki.com/wiki/PACKET.
  /// </summary>
  public sealed partial class AX25 : pb::IMessage<AX25>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AX25> _parser = new pb::MessageParser<AX25>(() => new AX25());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AX25> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AX25() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AX25(AX25 other) : this() {
      g3Ruh_ = other.g3Ruh_;
      destinationCallsign_ = other.destinationCallsign_;
      destinationSsid_ = other.destinationSsid_;
      sourceCallsign_ = other.sourceCallsign_;
      sourceSsid_ = other.sourceSsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AX25 Clone() {
      return new AX25(this);
    }

    /// <summary>Field number for the "g3ruh" field.</summary>
    public const int G3RuhFieldNumber = 1;
    private bool g3Ruh_;
    /// <summary>
    /// Whether or not G3RUH scrambling is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool G3Ruh {
      get { return g3Ruh_; }
      set {
        g3Ruh_ = value;
      }
    }

    /// <summary>Field number for the "destination_callsign" field.</summary>
    public const int DestinationCallsignFieldNumber = 2;
    private string destinationCallsign_ = "";
    /// <summary>
    /// Destination callsign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationCallsign {
      get { return destinationCallsign_; }
      set {
        destinationCallsign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_ssid" field.</summary>
    public const int DestinationSsidFieldNumber = 3;
    private uint destinationSsid_;
    /// <summary>
    /// Destination SSID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestinationSsid {
      get { return destinationSsid_; }
      set {
        destinationSsid_ = value;
      }
    }

    /// <summary>Field number for the "source_callsign" field.</summary>
    public const int SourceCallsignFieldNumber = 4;
    private string sourceCallsign_ = "";
    /// <summary>
    /// Source callsign.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceCallsign {
      get { return sourceCallsign_; }
      set {
        sourceCallsign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_ssid" field.</summary>
    public const int SourceSsidFieldNumber = 5;
    private uint sourceSsid_;
    /// <summary>
    /// Source SSID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceSsid {
      get { return sourceSsid_; }
      set {
        sourceSsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AX25);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AX25 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (G3Ruh != other.G3Ruh) return false;
      if (DestinationCallsign != other.DestinationCallsign) return false;
      if (DestinationSsid != other.DestinationSsid) return false;
      if (SourceCallsign != other.SourceCallsign) return false;
      if (SourceSsid != other.SourceSsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (G3Ruh != false) hash ^= G3Ruh.GetHashCode();
      if (DestinationCallsign.Length != 0) hash ^= DestinationCallsign.GetHashCode();
      if (DestinationSsid != 0) hash ^= DestinationSsid.GetHashCode();
      if (SourceCallsign.Length != 0) hash ^= SourceCallsign.GetHashCode();
      if (SourceSsid != 0) hash ^= SourceSsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (G3Ruh != false) {
        output.WriteRawTag(8);
        output.WriteBool(G3Ruh);
      }
      if (DestinationCallsign.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationCallsign);
      }
      if (DestinationSsid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DestinationSsid);
      }
      if (SourceCallsign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceCallsign);
      }
      if (SourceSsid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SourceSsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (G3Ruh != false) {
        output.WriteRawTag(8);
        output.WriteBool(G3Ruh);
      }
      if (DestinationCallsign.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationCallsign);
      }
      if (DestinationSsid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DestinationSsid);
      }
      if (SourceCallsign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceCallsign);
      }
      if (SourceSsid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SourceSsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (G3Ruh != false) {
        size += 1 + 1;
      }
      if (DestinationCallsign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationCallsign);
      }
      if (DestinationSsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestinationSsid);
      }
      if (SourceCallsign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceCallsign);
      }
      if (SourceSsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceSsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AX25 other) {
      if (other == null) {
        return;
      }
      if (other.G3Ruh != false) {
        G3Ruh = other.G3Ruh;
      }
      if (other.DestinationCallsign.Length != 0) {
        DestinationCallsign = other.DestinationCallsign;
      }
      if (other.DestinationSsid != 0) {
        DestinationSsid = other.DestinationSsid;
      }
      if (other.SourceCallsign.Length != 0) {
        SourceCallsign = other.SourceCallsign;
      }
      if (other.SourceSsid != 0) {
        SourceSsid = other.SourceSsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            G3Ruh = input.ReadBool();
            break;
          }
          case 18: {
            DestinationCallsign = input.ReadString();
            break;
          }
          case 24: {
            DestinationSsid = input.ReadUInt32();
            break;
          }
          case 34: {
            SourceCallsign = input.ReadString();
            break;
          }
          case 40: {
            SourceSsid = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            G3Ruh = input.ReadBool();
            break;
          }
          case 18: {
            DestinationCallsign = input.ReadString();
            break;
          }
          case 24: {
            DestinationSsid = input.ReadUInt32();
            break;
          }
          case 34: {
            SourceCallsign = input.ReadString();
            break;
          }
          case 40: {
            SourceSsid = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters for convolutional coding applied to a bitstream.
  /// https://en.wikipedia.org/wiki/Convolutional_code
  /// </summary>
  public sealed partial class ConvolutionalCodingParams : pb::IMessage<ConvolutionalCodingParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConvolutionalCodingParams> _parser = new pb::MessageParser<ConvolutionalCodingParams>(() => new ConvolutionalCodingParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvolutionalCodingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionalCodingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionalCodingParams(ConvolutionalCodingParams other) : this() {
      k_ = other.k_;
      inverseRate_ = other.inverseRate_;
      polynomial_ = other.polynomial_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionalCodingParams Clone() {
      return new ConvolutionalCodingParams(this);
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 1;
    private uint k_;
    /// <summary>
    /// The constraint length, `k`, of the code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "inverse_rate" field.</summary>
    public const int InverseRateFieldNumber = 2;
    private uint inverseRate_;
    /// <summary>
    /// The inverse of the rate of coding, e.g., if rate is `1 / r`, `inverse_rate` is `r`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InverseRate {
      get { return inverseRate_; }
      set {
        inverseRate_ = value;
      }
    }

    /// <summary>Field number for the "polynomial" field.</summary>
    public const int PolynomialFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_polynomial_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> polynomial_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// The polynomials used for coding. Must have `r` number of elements, where the most significant
    /// `k` bits of each element will be used as the polynomial for that index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Polynomial {
      get { return polynomial_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvolutionalCodingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvolutionalCodingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (InverseRate != other.InverseRate) return false;
      if(!polynomial_.Equals(other.polynomial_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (InverseRate != 0) hash ^= InverseRate.GetHashCode();
      hash ^= polynomial_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(K);
      }
      if (InverseRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InverseRate);
      }
      polynomial_.WriteTo(output, _repeated_polynomial_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(K);
      }
      if (InverseRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InverseRate);
      }
      polynomial_.WriteTo(ref output, _repeated_polynomial_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(K);
      }
      if (InverseRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InverseRate);
      }
      size += polynomial_.CalculateSize(_repeated_polynomial_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvolutionalCodingParams other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.InverseRate != 0) {
        InverseRate = other.InverseRate;
      }
      polynomial_.Add(other.polynomial_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            K = input.ReadUInt32();
            break;
          }
          case 16: {
            InverseRate = input.ReadUInt32();
            break;
          }
          case 26: {
            polynomial_.AddEntriesFrom(input, _repeated_polynomial_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            K = input.ReadUInt32();
            break;
          }
          case 16: {
            InverseRate = input.ReadUInt32();
            break;
          }
          case 26: {
            polynomial_.AddEntriesFrom(ref input, _repeated_polynomial_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters for scrambling applied to a bitstream.
  /// </summary>
  public sealed partial class ScramblingParams : pb::IMessage<ScramblingParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScramblingParams> _parser = new pb::MessageParser<ScramblingParams>(() => new ScramblingParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScramblingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScramblingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScramblingParams(ScramblingParams other) : this() {
      type_ = other.type_;
      numBits_ = other.numBits_;
      mask_ = other.mask_;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScramblingParams Clone() {
      return new ScramblingParams(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type type_ = global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive;
    /// <summary>
    /// The type of scrambling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "num_bits" field.</summary>
    public const int NumBitsFieldNumber = 2;
    private uint numBits_;
    /// <summary>
    /// The length of the shift register, in bits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBits {
      get { return numBits_; }
      set {
        numBits_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 3;
    private pb::ByteString mask_ = pb::ByteString.Empty;
    /// <summary>
    /// The polynomial mask for the shift register. The most significant `num_bits` bits of `mask` will
    /// be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Mask {
      get { return mask_; }
      set {
        mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private pb::ByteString seed_ = pb::ByteString.Empty;
    /// <summary>
    /// The initial contents of the shift register. The most significant `num_bits` bits of `mask` will
    /// be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Seed {
      get { return seed_; }
      set {
        seed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScramblingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScramblingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (NumBits != other.NumBits) return false;
      if (Mask != other.Mask) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive) hash ^= Type.GetHashCode();
      if (NumBits != 0) hash ^= NumBits.GetHashCode();
      if (Mask.Length != 0) hash ^= Mask.GetHashCode();
      if (Seed.Length != 0) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (NumBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumBits);
      }
      if (Mask.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Mask);
      }
      if (Seed.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (NumBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumBits);
      }
      if (Mask.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Mask);
      }
      if (Seed.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (NumBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBits);
      }
      if (Mask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Mask);
      }
      if (Seed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScramblingParams other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type.Additive) {
        Type = other.Type;
      }
      if (other.NumBits != 0) {
        NumBits = other.NumBits;
      }
      if (other.Mask.Length != 0) {
        Mask = other.Mask;
      }
      if (other.Seed.Length != 0) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            NumBits = input.ReadUInt32();
            break;
          }
          case 26: {
            Mask = input.ReadBytes();
            break;
          }
          case 34: {
            Seed = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Stellarstation.Api.V1.Radio.ScramblingParams.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            NumBits = input.ReadUInt32();
            break;
          }
          case 26: {
            Mask = input.ReadBytes();
            break;
          }
          case 34: {
            Seed = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ScramblingParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A type of scrambling.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Additive scrambling.
        /// </summary>
        [pbr::OriginalName("ADDITIVE")] Additive = 0,
        /// <summary>
        /// Multiplicative scrambling.
        /// </summary>
        [pbr::OriginalName("MULTIPLICATIVE")] Multiplicative = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
