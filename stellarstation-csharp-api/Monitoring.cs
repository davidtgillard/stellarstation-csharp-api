// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stellarstation/api/v1/monitoring/monitoring.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stellarstation.Api.V1.Monitoring {

  /// <summary>Holder for reflection information generated from stellarstation/api/v1/monitoring/monitoring.proto</summary>
  public static partial class MonitoringReflection {

    #region Descriptor
    /// <summary>File descriptor for stellarstation/api/v1/monitoring/monitoring.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonitoringReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFzdGVsbGFyc3RhdGlvbi9hcGkvdjEvbW9uaXRvcmluZy9tb25pdG9yaW5n",
            "LnByb3RvEiBzdGVsbGFyc3RhdGlvbi5hcGkudjEubW9uaXRvcmluZxoeZ29v",
            "Z2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGitzdGVsbGFyc3RhdGlvbi9h",
            "cGkvdjEvYW50ZW5uYS9hbnRlbm5hLnByb3RvGilzdGVsbGFyc3RhdGlvbi9h",
            "cGkvdjEvY29tbW9uL2NvbW1vbi5wcm90bxonc3RlbGxhcnN0YXRpb24vYXBp",
            "L3YxL29yYml0L29yYml0LnByb3RvGidzdGVsbGFyc3RhdGlvbi9hcGkvdjEv",
            "cmFkaW8vcmFkaW8ucHJvdG8i/gEKGFRyYW5zbWl0dGVyQ29uZmlndXJhdGlv",
            "bhI7Cgptb2R1bGF0aW9uGAEgASgOMicuc3RlbGxhcnN0YXRpb24uYXBpLnYx",
            "LnJhZGlvLk1vZHVsYXRpb24SGgoSaXNfY2Fycmllcl9lbmFibGVkGAIgASgI",
            "Eg8KB2JpdHJhdGUYAyABKAQSPAoLbGluZV9jb2RpbmcYBCABKA4yJy5zdGVs",
            "bGFyc3RhdGlvbi5hcGkudjEucmFkaW8uTGluZUNvZGluZxIbChNmaWx0ZXJf",
            "YmFuZHdpZHRoX2h6GAUgASgEEh0KFXNhbXBsaW5nX2ZyZXF1ZW5jeV9oehgG",
            "IAEoBCLuAwoVUmVjZWl2ZXJDb25maWd1cmF0aW9uEjsKCm1vZHVsYXRpb24Y",
            "ASABKA4yJy5zdGVsbGFyc3RhdGlvbi5hcGkudjEucmFkaW8uTW9kdWxhdGlv",
            "bhIUCgxiYW5kd2lkdGhfaHoYAiABKAQSHQoVc2FtcGxpbmdfZnJlcXVlbmN5",
            "X2h6GAMgASgEEg8KB2JpdHJhdGUYBCABKAQSPAoLbGluZV9jb2RpbmcYBSAB",
            "KA4yJy5zdGVsbGFyc3RhdGlvbi5hcGkudjEucmFkaW8uTGluZUNvZGluZxJA",
            "ChRzeW5jaHJvbml6YXRpb25fd29yZBgGIAEoCzIiLnN0ZWxsYXJzdGF0aW9u",
            "LmFwaS52MS5jb21tb24uQml0cxIqCiJpc19jb252b2x1dGlvbmFsX2NvZGVf",
            "ZGVzY3JhbWJsaW5nGAcgASgIEiYKHmlzX2NvbnZvbHV0aW9uYWxfY29kZV9k",
            "ZWNvZGluZxgIIAEoCBImCh5pc19jb252b2x1dGlvbmFsX2NvZGVfaW52ZXJ0",
            "ZWQYCSABKAgSHwoXaXNfcmVlZF9zb2xvbW9uX2VuYWJsZWQYCiABKAgSEgoK",
            "ZnJhbWVfc2l6ZRgLIAEoDRIhChlpc19mcmFtZV9jaGVja2luZ19lbmFibGVk",
            "GAwgASgIIkIKEVBsYW5Db25maWd1cmF0aW9uEi0KA3RsZRgBIAEoCzIgLnN0",
            "ZWxsYXJzdGF0aW9uLmFwaS52MS5vcmJpdC5UbGUiwQIKGkdyb3VuZFN0YXRp",
            "b25Db25maWd1cmF0aW9uEk8KC3RyYW5zbWl0dGVyGAEgASgLMjouc3RlbGxh",
            "cnN0YXRpb24uYXBpLnYxLm1vbml0b3JpbmcuVHJhbnNtaXR0ZXJDb25maWd1",
            "cmF0aW9uEkkKCHJlY2VpdmVyGAIgASgLMjcuc3RlbGxhcnN0YXRpb24uYXBp",
            "LnYxLm1vbml0b3JpbmcuUmVjZWl2ZXJDb25maWd1cmF0aW9uEkQKB2FudGVu",
            "bmEYAyABKAsyMy5zdGVsbGFyc3RhdGlvbi5hcGkudjEuYW50ZW5uYS5BbnRl",
            "bm5hQ29uZmlndXJhdGlvbhJBCgRwbGFuGAQgASgLMjMuc3RlbGxhcnN0YXRp",
            "b24uYXBpLnYxLm1vbml0b3JpbmcuUGxhbkNvbmZpZ3VyYXRpb24i4QIKEFRy",
            "YW5zbWl0dGVyU3RhdGUSGwoTY2VudGVyX2ZyZXF1ZW5jeV9oehgBIAEoBBIZ",
            "ChFjYXJyaWVyX2xldmVsX2RibRgCIAEoARI5ChVpc19tb2R1bGF0aW9uX2Vu",
            "YWJsZWQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjYKEmlz",
            "X2NhcnJpZXJfZW5hYmxlZBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29s",
            "VmFsdWUSNwoTaXNfaWZfc3dlZXBfZW5hYmxlZBgFIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5Cb29sVmFsdWUSOwoXaXNfaWRsZV9wYXR0ZXJuX2VuYWJsZWQY",
            "BiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEiwKB2JpdHJhdGUY",
            "ByABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZSLIAQoRUmVlZFNv",
            "bG9tb25TdGF0dXMSSgoGc3RhdHVzGAEgASgOMjouc3RlbGxhcnN0YXRpb24u",
            "YXBpLnYxLm1vbml0b3JpbmcuUmVlZFNvbG9tb25TdGF0dXMuU3RhdHVzEh0K",
            "FW51bV9jb3JyZWN0ZWRfc2lnbmFscxgCIAEoDSJICgZTdGF0dXMSBgoCT0sQ",
            "ABIUChBJTlRFUkxFQVZFX0VSUk9SEAESIAocQ09SUkVDVElPTl9DQVBBQ0lU",
            "WV9FWENFRURFRBACItEDCg1SZWNlaXZlclN0YXRlEhsKE2NlbnRlcl9mcmVx",
            "dWVuY3lfaHoYASABKAQSGQoRY2Fycmllcl9sZXZlbF9kYm0YAiABKAESFwoP",
            "aXNfcGhhc2VfbG9ja2VkGAMgASgIEiIKGmlzX2JpdF9zeW5jaHJvbml6ZXJf",
            "bG9ja2VkGAQgASgIEhYKDm5vcm1hbGl6ZWRfc25yGAUgASgBEiQKHGlzX2Zy",
            "YW1lX3N5bmNocm9uaXplcl9sb2NrZWQYBiABKAgSYAobY29udm9sdXRpb25h",
            "bF9jb2Rpbmdfc3RhdHVzGAcgASgOMjsuc3RlbGxhcnN0YXRpb24uYXBpLnYx",
            "Lm1vbml0b3JpbmcuQ29udm9sdXRpb25hbENvZGluZ1N0YXR1cxIrCiNjb252",
            "b2x1dGlvbmFsX2NvZGluZ19iaXRfZXJyb3JfcmF0ZRgIIAEoARJQChNyZWVk",
            "X3NvbG9tb25fc3RhdHVzGAkgASgLMjMuc3RlbGxhcnN0YXRpb24uYXBpLnYx",
            "Lm1vbml0b3JpbmcuUmVlZFNvbG9tb25TdGF0dXMSLAoHYml0cmF0ZRgKIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlIpQCCgxBbnRlbm5hU3Rh",
            "dGUSRQoHYXppbXV0aBgBIAEoCzI0LnN0ZWxsYXJzdGF0aW9uLmFwaS52MS5t",
            "b25pdG9yaW5nLkFudGVubmFTdGF0ZS5BbmdsZRJHCgllbGV2YXRpb24YAiAB",
            "KAsyNC5zdGVsbGFyc3RhdGlvbi5hcGkudjEubW9uaXRvcmluZy5BbnRlbm5h",
            "U3RhdGUuQW5nbGUSSAoMcG9sYXJpemF0aW9uGAMgASgOMjIuc3RlbGxhcnN0",
            "YXRpb24uYXBpLnYxLmFudGVubmEuQW50ZW5uYVBvbGFyaXphdGlvbhoqCgVB",
            "bmdsZRIPCgdjb21tYW5kGAEgASgBEhAKCG1lYXN1cmVkGAIgASgBIuEBChJH",
            "cm91bmRTdGF0aW9uU3RhdGUSRwoLdHJhbnNtaXR0ZXIYASABKAsyMi5zdGVs",
            "bGFyc3RhdGlvbi5hcGkudjEubW9uaXRvcmluZy5UcmFuc21pdHRlclN0YXRl",
            "EkEKCHJlY2VpdmVyGAIgASgLMi8uc3RlbGxhcnN0YXRpb24uYXBpLnYxLm1v",
            "bml0b3JpbmcuUmVjZWl2ZXJTdGF0ZRI/CgdhbnRlbm5hGAMgASgLMi4uc3Rl",
            "bGxhcnN0YXRpb24uYXBpLnYxLm1vbml0b3JpbmcuQW50ZW5uYVN0YXRlIpcD",
            "ChJQbGFuTGlmZWN5Y2xlRXZlbnQSSwoGc3RhdHVzGAEgASgOMjsuc3RlbGxh",
            "cnN0YXRpb24uYXBpLnYxLm1vbml0b3JpbmcuUGxhbkxpZmVjeWNsZUV2ZW50",
            "LlN0YXR1cxJWCgdmYWlsdXJlGAIgASgLMkMuc3RlbGxhcnN0YXRpb24uYXBp",
            "LnYxLm1vbml0b3JpbmcuUGxhbkxpZmVjeWNsZUV2ZW50LkZhaWx1cmVEZXRh",
            "aWxzSAAagAEKDkZhaWx1cmVEZXRhaWxzElgKBWNhdXNlGAEgASgOMkkuc3Rl",
            "bGxhcnN0YXRpb24uYXBpLnYxLm1vbml0b3JpbmcuUGxhbkxpZmVjeWNsZUV2",
            "ZW50LkZhaWx1cmVEZXRhaWxzLkNhdXNlIhQKBUNhdXNlEgsKB1VOS05PV04Q",
            "ACJOCgZTdGF0dXMSCwoHVU5LTk9XThAAEg0KCVBSRVBBUklORxABEg0KCUVY",
            "RUNVVElORxACEg0KCUNPTVBMRVRFRBADEgoKBkZBSUxFRBAEQgkKB0RldGFp",
            "bHMiWAoSR3JvdW5kU3RhdGlvbkV2ZW50EkIKBHBsYW4YBCABKAsyNC5zdGVs",
            "bGFyc3RhdGlvbi5hcGkudjEubW9uaXRvcmluZy5QbGFuTGlmZWN5Y2xlRXZl",
            "bnQqUQoZQ29udm9sdXRpb25hbENvZGluZ1N0YXR1cxIMCghVTkxPQ0tFRBAA",
            "EgwKCElfTE9DS0VEEAESDAoIUV9MT0NLRUQQAhIKCgZMT0NLRUQQA0J4CiRj",
            "b20uc3RlbGxhcnN0YXRpb24uYXBpLnYxLm1vbml0b3JpbmdCD01vbml0b3Jp",
            "bmdQcm90b1ABWj1naXRodWIuY29tL2luZm9zdGVsbGFyaW5jL2dvLXN0ZWxs",
            "YXJzdGF0aW9uL2FwaS92MS9tb25pdG9yaW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Stellarstation.Api.V1.Antenna.AntennaReflection.Descriptor, global::Stellarstation.Api.V1.Common.CommonReflection.Descriptor, global::Stellarstation.Api.V1.Orbit.OrbitReflection.Descriptor, global::Stellarstation.Api.V1.Radio.RadioReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration), global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration.Parser, new[]{ "Modulation", "IsCarrierEnabled", "Bitrate", "LineCoding", "FilterBandwidthHz", "SamplingFrequencyHz" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration), global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration.Parser, new[]{ "Modulation", "BandwidthHz", "SamplingFrequencyHz", "Bitrate", "LineCoding", "SynchronizationWord", "IsConvolutionalCodeDescrambling", "IsConvolutionalCodeDecoding", "IsConvolutionalCodeInverted", "IsReedSolomonEnabled", "FrameSize", "IsFrameCheckingEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.PlanConfiguration), global::Stellarstation.Api.V1.Monitoring.PlanConfiguration.Parser, new[]{ "Tle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration), global::Stellarstation.Api.V1.Monitoring.GroundStationConfiguration.Parser, new[]{ "Transmitter", "Receiver", "Antenna", "Plan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.TransmitterState), global::Stellarstation.Api.V1.Monitoring.TransmitterState.Parser, new[]{ "CenterFrequencyHz", "CarrierLevelDbm", "IsModulationEnabled", "IsCarrierEnabled", "IsIfSweepEnabled", "IsIdlePatternEnabled", "Bitrate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus), global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Parser, new[]{ "Status", "NumCorrectedSignals" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.ReceiverState), global::Stellarstation.Api.V1.Monitoring.ReceiverState.Parser, new[]{ "CenterFrequencyHz", "CarrierLevelDbm", "IsPhaseLocked", "IsBitSynchronizerLocked", "NormalizedSnr", "IsFrameSynchronizerLocked", "ConvolutionalCodingStatus", "ConvolutionalCodingBitErrorRate", "ReedSolomonStatus", "Bitrate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.AntennaState), global::Stellarstation.Api.V1.Monitoring.AntennaState.Parser, new[]{ "Azimuth", "Elevation", "Polarization" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle), global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle.Parser, new[]{ "Command", "Measured" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.GroundStationState), global::Stellarstation.Api.V1.Monitoring.GroundStationState.Parser, new[]{ "Transmitter", "Receiver", "Antenna" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent), global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Parser, new[]{ "Status", "Failure" }, new[]{ "Details" }, new[]{ typeof(global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails), global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Parser, new[]{ "Cause" }, null, new[]{ typeof(global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stellarstation.Api.V1.Monitoring.GroundStationEvent), global::Stellarstation.Api.V1.Monitoring.GroundStationEvent.Parser, new[]{ "Plan" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A current status of convolutional coding.
  /// </summary>
  public enum ConvolutionalCodingStatus {
    /// <summary>
    /// Not locked on.
    /// </summary>
    [pbr::OriginalName("UNLOCKED")] Unlocked = 0,
    /// <summary>
    /// Locked onto the in-phase signal.
    /// </summary>
    [pbr::OriginalName("I_LOCKED")] ILocked = 1,
    /// <summary>
    /// Locked onto the quadrature signal.
    /// </summary>
    [pbr::OriginalName("Q_LOCKED")] QLocked = 2,
    /// <summary>
    /// Locked onto both in-phase and quadrature signal.
    /// </summary>
    [pbr::OriginalName("LOCKED")] Locked = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The current configuration of a transmitter.
  ///
  /// A transmitter takes a bitstream and applies signal processing to create the final waveform sent
  /// to a satellite.
  /// </summary>
  public sealed partial class TransmitterConfiguration : pb::IMessage<TransmitterConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransmitterConfiguration> _parser = new pb::MessageParser<TransmitterConfiguration>(() => new TransmitterConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmitterConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfiguration(TransmitterConfiguration other) : this() {
      modulation_ = other.modulation_;
      isCarrierEnabled_ = other.isCarrierEnabled_;
      bitrate_ = other.bitrate_;
      lineCoding_ = other.lineCoding_;
      filterBandwidthHz_ = other.filterBandwidthHz_;
      samplingFrequencyHz_ = other.samplingFrequencyHz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterConfiguration Clone() {
      return new TransmitterConfiguration(this);
    }

    /// <summary>Field number for the "modulation" field.</summary>
    public const int ModulationFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.Modulation modulation_ = global::Stellarstation.Api.V1.Radio.Modulation.Disabled;
    /// <summary>
    /// The modulation type of the transmitter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.Modulation Modulation {
      get { return modulation_; }
      set {
        modulation_ = value;
      }
    }

    /// <summary>Field number for the "is_carrier_enabled" field.</summary>
    public const int IsCarrierEnabledFieldNumber = 2;
    private bool isCarrierEnabled_;
    /// <summary>
    /// Whether the carrier is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCarrierEnabled {
      get { return isCarrierEnabled_; }
      set {
        isCarrierEnabled_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 3;
    private ulong bitrate_;
    /// <summary>
    /// The bitrate of the transmitter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }

    /// <summary>Field number for the "line_coding" field.</summary>
    public const int LineCodingFieldNumber = 4;
    private global::Stellarstation.Api.V1.Radio.LineCoding lineCoding_ = global::Stellarstation.Api.V1.Radio.LineCoding.NrzL;
    /// <summary>
    /// The line coding of the transmitter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.LineCoding LineCoding {
      get { return lineCoding_; }
      set {
        lineCoding_ = value;
      }
    }

    /// <summary>Field number for the "filter_bandwidth_hz" field.</summary>
    public const int FilterBandwidthHzFieldNumber = 5;
    private ulong filterBandwidthHz_;
    /// <summary>
    /// The bandwidth of the filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FilterBandwidthHz {
      get { return filterBandwidthHz_; }
      set {
        filterBandwidthHz_ = value;
      }
    }

    /// <summary>Field number for the "sampling_frequency_hz" field.</summary>
    public const int SamplingFrequencyHzFieldNumber = 6;
    private ulong samplingFrequencyHz_;
    /// <summary>
    /// The sampling frequency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SamplingFrequencyHz {
      get { return samplingFrequencyHz_; }
      set {
        samplingFrequencyHz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmitterConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmitterConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Modulation != other.Modulation) return false;
      if (IsCarrierEnabled != other.IsCarrierEnabled) return false;
      if (Bitrate != other.Bitrate) return false;
      if (LineCoding != other.LineCoding) return false;
      if (FilterBandwidthHz != other.FilterBandwidthHz) return false;
      if (SamplingFrequencyHz != other.SamplingFrequencyHz) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) hash ^= Modulation.GetHashCode();
      if (IsCarrierEnabled != false) hash ^= IsCarrierEnabled.GetHashCode();
      if (Bitrate != 0UL) hash ^= Bitrate.GetHashCode();
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) hash ^= LineCoding.GetHashCode();
      if (FilterBandwidthHz != 0UL) hash ^= FilterBandwidthHz.GetHashCode();
      if (SamplingFrequencyHz != 0UL) hash ^= SamplingFrequencyHz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Modulation);
      }
      if (IsCarrierEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCarrierEnabled);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LineCoding);
      }
      if (FilterBandwidthHz != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FilterBandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SamplingFrequencyHz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Modulation);
      }
      if (IsCarrierEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCarrierEnabled);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LineCoding);
      }
      if (FilterBandwidthHz != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FilterBandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SamplingFrequencyHz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Modulation);
      }
      if (IsCarrierEnabled != false) {
        size += 1 + 1;
      }
      if (Bitrate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineCoding);
      }
      if (FilterBandwidthHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FilterBandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SamplingFrequencyHz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmitterConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        Modulation = other.Modulation;
      }
      if (other.IsCarrierEnabled != false) {
        IsCarrierEnabled = other.IsCarrierEnabled;
      }
      if (other.Bitrate != 0UL) {
        Bitrate = other.Bitrate;
      }
      if (other.LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        LineCoding = other.LineCoding;
      }
      if (other.FilterBandwidthHz != 0UL) {
        FilterBandwidthHz = other.FilterBandwidthHz;
      }
      if (other.SamplingFrequencyHz != 0UL) {
        SamplingFrequencyHz = other.SamplingFrequencyHz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 16: {
            IsCarrierEnabled = input.ReadBool();
            break;
          }
          case 24: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 32: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
          case 40: {
            FilterBandwidthHz = input.ReadUInt64();
            break;
          }
          case 48: {
            SamplingFrequencyHz = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 16: {
            IsCarrierEnabled = input.ReadBool();
            break;
          }
          case 24: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 32: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
          case 40: {
            FilterBandwidthHz = input.ReadUInt64();
            break;
          }
          case 48: {
            SamplingFrequencyHz = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The current configuration of a receiver.
  ///
  /// A receiver takes a waveform from a satellite and applies signal processing to produce a
  /// bitstream.
  /// </summary>
  public sealed partial class ReceiverConfiguration : pb::IMessage<ReceiverConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiverConfiguration> _parser = new pb::MessageParser<ReceiverConfiguration>(() => new ReceiverConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiverConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfiguration(ReceiverConfiguration other) : this() {
      modulation_ = other.modulation_;
      bandwidthHz_ = other.bandwidthHz_;
      samplingFrequencyHz_ = other.samplingFrequencyHz_;
      bitrate_ = other.bitrate_;
      lineCoding_ = other.lineCoding_;
      synchronizationWord_ = other.synchronizationWord_ != null ? other.synchronizationWord_.Clone() : null;
      isConvolutionalCodeDescrambling_ = other.isConvolutionalCodeDescrambling_;
      isConvolutionalCodeDecoding_ = other.isConvolutionalCodeDecoding_;
      isConvolutionalCodeInverted_ = other.isConvolutionalCodeInverted_;
      isReedSolomonEnabled_ = other.isReedSolomonEnabled_;
      frameSize_ = other.frameSize_;
      isFrameCheckingEnabled_ = other.isFrameCheckingEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverConfiguration Clone() {
      return new ReceiverConfiguration(this);
    }

    /// <summary>Field number for the "modulation" field.</summary>
    public const int ModulationFieldNumber = 1;
    private global::Stellarstation.Api.V1.Radio.Modulation modulation_ = global::Stellarstation.Api.V1.Radio.Modulation.Disabled;
    /// <summary>
    /// The modulation type of the receiver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.Modulation Modulation {
      get { return modulation_; }
      set {
        modulation_ = value;
      }
    }

    /// <summary>Field number for the "bandwidth_hz" field.</summary>
    public const int BandwidthHzFieldNumber = 2;
    private ulong bandwidthHz_;
    /// <summary>
    /// The bandwidth, in Hz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BandwidthHz {
      get { return bandwidthHz_; }
      set {
        bandwidthHz_ = value;
      }
    }

    /// <summary>Field number for the "sampling_frequency_hz" field.</summary>
    public const int SamplingFrequencyHzFieldNumber = 3;
    private ulong samplingFrequencyHz_;
    /// <summary>
    /// The sampling frequency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SamplingFrequencyHz {
      get { return samplingFrequencyHz_; }
      set {
        samplingFrequencyHz_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 4;
    private ulong bitrate_;
    /// <summary>
    /// The bitrate of the receiver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }

    /// <summary>Field number for the "line_coding" field.</summary>
    public const int LineCodingFieldNumber = 5;
    private global::Stellarstation.Api.V1.Radio.LineCoding lineCoding_ = global::Stellarstation.Api.V1.Radio.LineCoding.NrzL;
    /// <summary>
    /// The line coding of the receiver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Radio.LineCoding LineCoding {
      get { return lineCoding_; }
      set {
        lineCoding_ = value;
      }
    }

    /// <summary>Field number for the "synchronization_word" field.</summary>
    public const int SynchronizationWordFieldNumber = 6;
    private global::Stellarstation.Api.V1.Common.Bits synchronizationWord_;
    /// <summary>
    /// The frame synchronization word being used. Unset if frame synchronization is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Common.Bits SynchronizationWord {
      get { return synchronizationWord_; }
      set {
        synchronizationWord_ = value;
      }
    }

    /// <summary>Field number for the "is_convolutional_code_descrambling" field.</summary>
    public const int IsConvolutionalCodeDescramblingFieldNumber = 7;
    private bool isConvolutionalCodeDescrambling_;
    /// <summary>
    /// Whether convolutional code descrambling is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConvolutionalCodeDescrambling {
      get { return isConvolutionalCodeDescrambling_; }
      set {
        isConvolutionalCodeDescrambling_ = value;
      }
    }

    /// <summary>Field number for the "is_convolutional_code_decoding" field.</summary>
    public const int IsConvolutionalCodeDecodingFieldNumber = 8;
    private bool isConvolutionalCodeDecoding_;
    /// <summary>
    /// Whether convolutional code decoding is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConvolutionalCodeDecoding {
      get { return isConvolutionalCodeDecoding_; }
      set {
        isConvolutionalCodeDecoding_ = value;
      }
    }

    /// <summary>Field number for the "is_convolutional_code_inverted" field.</summary>
    public const int IsConvolutionalCodeInvertedFieldNumber = 9;
    private bool isConvolutionalCodeInverted_;
    /// <summary>
    /// Whether convolutional codes are inverted.
    /// No meaning if `is_convolutional_code_decoding` is not enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConvolutionalCodeInverted {
      get { return isConvolutionalCodeInverted_; }
      set {
        isConvolutionalCodeInverted_ = value;
      }
    }

    /// <summary>Field number for the "is_reed_solomon_enabled" field.</summary>
    public const int IsReedSolomonEnabledFieldNumber = 10;
    private bool isReedSolomonEnabled_;
    /// <summary>
    /// Whether reed solomon coding is being used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReedSolomonEnabled {
      get { return isReedSolomonEnabled_; }
      set {
        isReedSolomonEnabled_ = value;
      }
    }

    /// <summary>Field number for the "frame_size" field.</summary>
    public const int FrameSizeFieldNumber = 11;
    private uint frameSize_;
    /// <summary>
    /// The size of a frame, in bits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameSize {
      get { return frameSize_; }
      set {
        frameSize_ = value;
      }
    }

    /// <summary>Field number for the "is_frame_checking_enabled" field.</summary>
    public const int IsFrameCheckingEnabledFieldNumber = 12;
    private bool isFrameCheckingEnabled_;
    /// <summary>
    /// Whether frame checking is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFrameCheckingEnabled {
      get { return isFrameCheckingEnabled_; }
      set {
        isFrameCheckingEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiverConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiverConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Modulation != other.Modulation) return false;
      if (BandwidthHz != other.BandwidthHz) return false;
      if (SamplingFrequencyHz != other.SamplingFrequencyHz) return false;
      if (Bitrate != other.Bitrate) return false;
      if (LineCoding != other.LineCoding) return false;
      if (!object.Equals(SynchronizationWord, other.SynchronizationWord)) return false;
      if (IsConvolutionalCodeDescrambling != other.IsConvolutionalCodeDescrambling) return false;
      if (IsConvolutionalCodeDecoding != other.IsConvolutionalCodeDecoding) return false;
      if (IsConvolutionalCodeInverted != other.IsConvolutionalCodeInverted) return false;
      if (IsReedSolomonEnabled != other.IsReedSolomonEnabled) return false;
      if (FrameSize != other.FrameSize) return false;
      if (IsFrameCheckingEnabled != other.IsFrameCheckingEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) hash ^= Modulation.GetHashCode();
      if (BandwidthHz != 0UL) hash ^= BandwidthHz.GetHashCode();
      if (SamplingFrequencyHz != 0UL) hash ^= SamplingFrequencyHz.GetHashCode();
      if (Bitrate != 0UL) hash ^= Bitrate.GetHashCode();
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) hash ^= LineCoding.GetHashCode();
      if (synchronizationWord_ != null) hash ^= SynchronizationWord.GetHashCode();
      if (IsConvolutionalCodeDescrambling != false) hash ^= IsConvolutionalCodeDescrambling.GetHashCode();
      if (IsConvolutionalCodeDecoding != false) hash ^= IsConvolutionalCodeDecoding.GetHashCode();
      if (IsConvolutionalCodeInverted != false) hash ^= IsConvolutionalCodeInverted.GetHashCode();
      if (IsReedSolomonEnabled != false) hash ^= IsReedSolomonEnabled.GetHashCode();
      if (FrameSize != 0) hash ^= FrameSize.GetHashCode();
      if (IsFrameCheckingEnabled != false) hash ^= IsFrameCheckingEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Modulation);
      }
      if (BandwidthHz != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SamplingFrequencyHz);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LineCoding);
      }
      if (synchronizationWord_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SynchronizationWord);
      }
      if (IsConvolutionalCodeDescrambling != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsConvolutionalCodeDescrambling);
      }
      if (IsConvolutionalCodeDecoding != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsConvolutionalCodeDecoding);
      }
      if (IsConvolutionalCodeInverted != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsConvolutionalCodeInverted);
      }
      if (IsReedSolomonEnabled != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsReedSolomonEnabled);
      }
      if (FrameSize != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FrameSize);
      }
      if (IsFrameCheckingEnabled != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsFrameCheckingEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Modulation);
      }
      if (BandwidthHz != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SamplingFrequencyHz);
      }
      if (Bitrate != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        output.WriteRawTag(40);
        output.WriteEnum((int) LineCoding);
      }
      if (synchronizationWord_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SynchronizationWord);
      }
      if (IsConvolutionalCodeDescrambling != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsConvolutionalCodeDescrambling);
      }
      if (IsConvolutionalCodeDecoding != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsConvolutionalCodeDecoding);
      }
      if (IsConvolutionalCodeInverted != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsConvolutionalCodeInverted);
      }
      if (IsReedSolomonEnabled != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsReedSolomonEnabled);
      }
      if (FrameSize != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FrameSize);
      }
      if (IsFrameCheckingEnabled != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsFrameCheckingEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Modulation);
      }
      if (BandwidthHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BandwidthHz);
      }
      if (SamplingFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SamplingFrequencyHz);
      }
      if (Bitrate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitrate);
      }
      if (LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineCoding);
      }
      if (synchronizationWord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SynchronizationWord);
      }
      if (IsConvolutionalCodeDescrambling != false) {
        size += 1 + 1;
      }
      if (IsConvolutionalCodeDecoding != false) {
        size += 1 + 1;
      }
      if (IsConvolutionalCodeInverted != false) {
        size += 1 + 1;
      }
      if (IsReedSolomonEnabled != false) {
        size += 1 + 1;
      }
      if (FrameSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameSize);
      }
      if (IsFrameCheckingEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiverConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Modulation != global::Stellarstation.Api.V1.Radio.Modulation.Disabled) {
        Modulation = other.Modulation;
      }
      if (other.BandwidthHz != 0UL) {
        BandwidthHz = other.BandwidthHz;
      }
      if (other.SamplingFrequencyHz != 0UL) {
        SamplingFrequencyHz = other.SamplingFrequencyHz;
      }
      if (other.Bitrate != 0UL) {
        Bitrate = other.Bitrate;
      }
      if (other.LineCoding != global::Stellarstation.Api.V1.Radio.LineCoding.NrzL) {
        LineCoding = other.LineCoding;
      }
      if (other.synchronizationWord_ != null) {
        if (synchronizationWord_ == null) {
          SynchronizationWord = new global::Stellarstation.Api.V1.Common.Bits();
        }
        SynchronizationWord.MergeFrom(other.SynchronizationWord);
      }
      if (other.IsConvolutionalCodeDescrambling != false) {
        IsConvolutionalCodeDescrambling = other.IsConvolutionalCodeDescrambling;
      }
      if (other.IsConvolutionalCodeDecoding != false) {
        IsConvolutionalCodeDecoding = other.IsConvolutionalCodeDecoding;
      }
      if (other.IsConvolutionalCodeInverted != false) {
        IsConvolutionalCodeInverted = other.IsConvolutionalCodeInverted;
      }
      if (other.IsReedSolomonEnabled != false) {
        IsReedSolomonEnabled = other.IsReedSolomonEnabled;
      }
      if (other.FrameSize != 0) {
        FrameSize = other.FrameSize;
      }
      if (other.IsFrameCheckingEnabled != false) {
        IsFrameCheckingEnabled = other.IsFrameCheckingEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 16: {
            BandwidthHz = input.ReadUInt64();
            break;
          }
          case 24: {
            SamplingFrequencyHz = input.ReadUInt64();
            break;
          }
          case 32: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 40: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
          case 50: {
            if (synchronizationWord_ == null) {
              SynchronizationWord = new global::Stellarstation.Api.V1.Common.Bits();
            }
            input.ReadMessage(SynchronizationWord);
            break;
          }
          case 56: {
            IsConvolutionalCodeDescrambling = input.ReadBool();
            break;
          }
          case 64: {
            IsConvolutionalCodeDecoding = input.ReadBool();
            break;
          }
          case 72: {
            IsConvolutionalCodeInverted = input.ReadBool();
            break;
          }
          case 80: {
            IsReedSolomonEnabled = input.ReadBool();
            break;
          }
          case 88: {
            FrameSize = input.ReadUInt32();
            break;
          }
          case 96: {
            IsFrameCheckingEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Modulation = (global::Stellarstation.Api.V1.Radio.Modulation) input.ReadEnum();
            break;
          }
          case 16: {
            BandwidthHz = input.ReadUInt64();
            break;
          }
          case 24: {
            SamplingFrequencyHz = input.ReadUInt64();
            break;
          }
          case 32: {
            Bitrate = input.ReadUInt64();
            break;
          }
          case 40: {
            LineCoding = (global::Stellarstation.Api.V1.Radio.LineCoding) input.ReadEnum();
            break;
          }
          case 50: {
            if (synchronizationWord_ == null) {
              SynchronizationWord = new global::Stellarstation.Api.V1.Common.Bits();
            }
            input.ReadMessage(SynchronizationWord);
            break;
          }
          case 56: {
            IsConvolutionalCodeDescrambling = input.ReadBool();
            break;
          }
          case 64: {
            IsConvolutionalCodeDecoding = input.ReadBool();
            break;
          }
          case 72: {
            IsConvolutionalCodeInverted = input.ReadBool();
            break;
          }
          case 80: {
            IsReedSolomonEnabled = input.ReadBool();
            break;
          }
          case 88: {
            FrameSize = input.ReadUInt32();
            break;
          }
          case 96: {
            IsFrameCheckingEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The configuration of the currently executing plan.
  /// </summary>
  public sealed partial class PlanConfiguration : pb::IMessage<PlanConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlanConfiguration> _parser = new pb::MessageParser<PlanConfiguration>(() => new PlanConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanConfiguration(PlanConfiguration other) : this() {
      tle_ = other.tle_ != null ? other.tle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanConfiguration Clone() {
      return new PlanConfiguration(this);
    }

    /// <summary>Field number for the "tle" field.</summary>
    public const int TleFieldNumber = 1;
    private global::Stellarstation.Api.V1.Orbit.Tle tle_;
    /// <summary>
    /// The TLE for the satellite in this plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Orbit.Tle Tle {
      get { return tle_; }
      set {
        tle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tle, other.Tle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tle_ != null) hash ^= Tle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (tle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (tle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.tle_ != null) {
        if (tle_ == null) {
          Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
        }
        Tle.MergeFrom(other.Tle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (tle_ == null) {
              Tle = new global::Stellarstation.Api.V1.Orbit.Tle();
            }
            input.ReadMessage(Tle);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The current configuration of a ground station. This is controlled by the parameters of a pass,
  /// based on the configuration of the satellite it will communicate with. When debugging issues with
  /// a pass, it is good to first confirm that the actual reported configuration matches the expected
  /// settings.
  ///
  /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
  ///         incompatible ways in the future.
  /// </summary>
  public sealed partial class GroundStationConfiguration : pb::IMessage<GroundStationConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroundStationConfiguration> _parser = new pb::MessageParser<GroundStationConfiguration>(() => new GroundStationConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroundStationConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfiguration(GroundStationConfiguration other) : this() {
      transmitter_ = other.transmitter_ != null ? other.transmitter_.Clone() : null;
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      antenna_ = other.antenna_ != null ? other.antenna_.Clone() : null;
      plan_ = other.plan_ != null ? other.plan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationConfiguration Clone() {
      return new GroundStationConfiguration(this);
    }

    /// <summary>Field number for the "transmitter" field.</summary>
    public const int TransmitterFieldNumber = 1;
    private global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration transmitter_;
    /// <summary>
    /// The current configuration of the transmitter in use by the ground station. This configuration
    /// should match the parameters of the executing plan. When debugging issues with data
    /// transmission (e.g., no response from satellite), it can be useful to confirm these values match
    /// the expected configuration of the transmitter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration Transmitter {
      get { return transmitter_; }
      set {
        transmitter_ = value;
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration receiver_;
    /// <summary>
    /// The current configuration of the receiver in use by the ground station. This configuration
    /// should match the parameters of the executing plan. When debugging issues with data
    /// reception (e.g., can't decode signal), it can be useful to confirm these values match
    /// the expected configuration of the receiver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "antenna" field.</summary>
    public const int AntennaFieldNumber = 3;
    private global::Stellarstation.Api.V1.Antenna.AntennaConfiguration antenna_;
    /// <summary>
    /// The current configuration of the antenna used by the ground station. These are the physical
    /// parameters of an antenna and in practice should never change, even across passes. But natural
    /// events such as earthquakes can cause small changes in these values. When debugging issues with
    /// tracking a satellite (e.g., getting no signal at all), it can be useful to confirm these values
    /// match the expected configuration of the antenna.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Antenna.AntennaConfiguration Antenna {
      get { return antenna_; }
      set {
        antenna_ = value;
      }
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 4;
    private global::Stellarstation.Api.V1.Monitoring.PlanConfiguration plan_;
    /// <summary>
    /// The current configuration of the plan being executed by the ground station.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.PlanConfiguration Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroundStationConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroundStationConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transmitter, other.Transmitter)) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (!object.Equals(Antenna, other.Antenna)) return false;
      if (!object.Equals(Plan, other.Plan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transmitter_ != null) hash ^= Transmitter.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (antenna_ != null) hash ^= Antenna.GetHashCode();
      if (plan_ != null) hash ^= Plan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (transmitter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transmitter);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (antenna_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Antenna);
      }
      if (plan_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (transmitter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transmitter);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (antenna_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Antenna);
      }
      if (plan_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transmitter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transmitter);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (antenna_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Antenna);
      }
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroundStationConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.transmitter_ != null) {
        if (transmitter_ == null) {
          Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration();
        }
        Transmitter.MergeFrom(other.Transmitter);
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      if (other.antenna_ != null) {
        if (antenna_ == null) {
          Antenna = new global::Stellarstation.Api.V1.Antenna.AntennaConfiguration();
        }
        Antenna.MergeFrom(other.Antenna);
      }
      if (other.plan_ != null) {
        if (plan_ == null) {
          Plan = new global::Stellarstation.Api.V1.Monitoring.PlanConfiguration();
        }
        Plan.MergeFrom(other.Plan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transmitter_ == null) {
              Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration();
            }
            input.ReadMessage(Transmitter);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 26: {
            if (antenna_ == null) {
              Antenna = new global::Stellarstation.Api.V1.Antenna.AntennaConfiguration();
            }
            input.ReadMessage(Antenna);
            break;
          }
          case 34: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Monitoring.PlanConfiguration();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (transmitter_ == null) {
              Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterConfiguration();
            }
            input.ReadMessage(Transmitter);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverConfiguration();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 26: {
            if (antenna_ == null) {
              Antenna = new global::Stellarstation.Api.V1.Antenna.AntennaConfiguration();
            }
            input.ReadMessage(Antenna);
            break;
          }
          case 34: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Monitoring.PlanConfiguration();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The current state of the ground station's transmitter during the operation of a pass.
  /// Next ID: 8
  /// </summary>
  public sealed partial class TransmitterState : pb::IMessage<TransmitterState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransmitterState> _parser = new pb::MessageParser<TransmitterState>(() => new TransmitterState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransmitterState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterState(TransmitterState other) : this() {
      centerFrequencyHz_ = other.centerFrequencyHz_;
      carrierLevelDbm_ = other.carrierLevelDbm_;
      IsModulationEnabled = other.IsModulationEnabled;
      IsCarrierEnabled = other.IsCarrierEnabled;
      IsIfSweepEnabled = other.IsIfSweepEnabled;
      IsIdlePatternEnabled = other.IsIdlePatternEnabled;
      Bitrate = other.Bitrate;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransmitterState Clone() {
      return new TransmitterState(this);
    }

    /// <summary>Field number for the "center_frequency_hz" field.</summary>
    public const int CenterFrequencyHzFieldNumber = 1;
    private ulong centerFrequencyHz_;
    /// <summary>
    /// The current center frequency of the transmitter, taking into account e.g., Doppler correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CenterFrequencyHz {
      get { return centerFrequencyHz_; }
      set {
        centerFrequencyHz_ = value;
      }
    }

    /// <summary>Field number for the "carrier_level_dbm" field.</summary>
    public const int CarrierLevelDbmFieldNumber = 2;
    private double carrierLevelDbm_;
    /// <summary>
    /// The current level of the carrier signal, in dBm (decibal-milliwatts).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CarrierLevelDbm {
      get { return carrierLevelDbm_; }
      set {
        carrierLevelDbm_ = value;
      }
    }

    /// <summary>Field number for the "is_modulation_enabled" field.</summary>
    public const int IsModulationEnabledFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_isModulationEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? isModulationEnabled_;
    /// <summary>
    /// Whether modulation is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? IsModulationEnabled {
      get { return isModulationEnabled_; }
      set {
        isModulationEnabled_ = value;
      }
    }


    /// <summary>Field number for the "is_carrier_enabled" field.</summary>
    public const int IsCarrierEnabledFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_isCarrierEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? isCarrierEnabled_;
    /// <summary>
    /// Whether the carrier is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? IsCarrierEnabled {
      get { return isCarrierEnabled_; }
      set {
        isCarrierEnabled_ = value;
      }
    }


    /// <summary>Field number for the "is_if_sweep_enabled" field.</summary>
    public const int IsIfSweepEnabledFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_isIfSweepEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? isIfSweepEnabled_;
    /// <summary>
    /// Whether IF sweeping is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? IsIfSweepEnabled {
      get { return isIfSweepEnabled_; }
      set {
        isIfSweepEnabled_ = value;
      }
    }


    /// <summary>Field number for the "is_idle_pattern_enabled" field.</summary>
    public const int IsIdlePatternEnabledFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_isIdlePatternEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? isIdlePatternEnabled_;
    /// <summary>
    /// Whether transmitting idle pattern is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? IsIdlePatternEnabled {
      get { return isIdlePatternEnabled_; }
      set {
        isIdlePatternEnabled_ = value;
      }
    }


    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 7;
    private static readonly pb::FieldCodec<float?> _single_bitrate_codec = pb::FieldCodec.ForStructWrapper<float>(58);
    private float? bitrate_;
    /// <summary>
    /// The current bitrate of the transmitter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransmitterState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransmitterState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CenterFrequencyHz != other.CenterFrequencyHz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CarrierLevelDbm, other.CarrierLevelDbm)) return false;
      if (IsModulationEnabled != other.IsModulationEnabled) return false;
      if (IsCarrierEnabled != other.IsCarrierEnabled) return false;
      if (IsIfSweepEnabled != other.IsIfSweepEnabled) return false;
      if (IsIdlePatternEnabled != other.IsIdlePatternEnabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Bitrate, other.Bitrate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CenterFrequencyHz != 0UL) hash ^= CenterFrequencyHz.GetHashCode();
      if (CarrierLevelDbm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CarrierLevelDbm);
      if (isModulationEnabled_ != null) hash ^= IsModulationEnabled.GetHashCode();
      if (isCarrierEnabled_ != null) hash ^= IsCarrierEnabled.GetHashCode();
      if (isIfSweepEnabled_ != null) hash ^= IsIfSweepEnabled.GetHashCode();
      if (isIdlePatternEnabled_ != null) hash ^= IsIdlePatternEnabled.GetHashCode();
      if (bitrate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Bitrate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CarrierLevelDbm);
      }
      if (isModulationEnabled_ != null) {
        _single_isModulationEnabled_codec.WriteTagAndValue(output, IsModulationEnabled);
      }
      if (isCarrierEnabled_ != null) {
        _single_isCarrierEnabled_codec.WriteTagAndValue(output, IsCarrierEnabled);
      }
      if (isIfSweepEnabled_ != null) {
        _single_isIfSweepEnabled_codec.WriteTagAndValue(output, IsIfSweepEnabled);
      }
      if (isIdlePatternEnabled_ != null) {
        _single_isIdlePatternEnabled_codec.WriteTagAndValue(output, IsIdlePatternEnabled);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CarrierLevelDbm);
      }
      if (isModulationEnabled_ != null) {
        _single_isModulationEnabled_codec.WriteTagAndValue(ref output, IsModulationEnabled);
      }
      if (isCarrierEnabled_ != null) {
        _single_isCarrierEnabled_codec.WriteTagAndValue(ref output, IsCarrierEnabled);
      }
      if (isIfSweepEnabled_ != null) {
        _single_isIfSweepEnabled_codec.WriteTagAndValue(ref output, IsIfSweepEnabled);
      }
      if (isIdlePatternEnabled_ != null) {
        _single_isIdlePatternEnabled_codec.WriteTagAndValue(ref output, IsIdlePatternEnabled);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(ref output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CenterFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        size += 1 + 8;
      }
      if (isModulationEnabled_ != null) {
        size += _single_isModulationEnabled_codec.CalculateSizeWithTag(IsModulationEnabled);
      }
      if (isCarrierEnabled_ != null) {
        size += _single_isCarrierEnabled_codec.CalculateSizeWithTag(IsCarrierEnabled);
      }
      if (isIfSweepEnabled_ != null) {
        size += _single_isIfSweepEnabled_codec.CalculateSizeWithTag(IsIfSweepEnabled);
      }
      if (isIdlePatternEnabled_ != null) {
        size += _single_isIdlePatternEnabled_codec.CalculateSizeWithTag(IsIdlePatternEnabled);
      }
      if (bitrate_ != null) {
        size += _single_bitrate_codec.CalculateSizeWithTag(Bitrate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransmitterState other) {
      if (other == null) {
        return;
      }
      if (other.CenterFrequencyHz != 0UL) {
        CenterFrequencyHz = other.CenterFrequencyHz;
      }
      if (other.CarrierLevelDbm != 0D) {
        CarrierLevelDbm = other.CarrierLevelDbm;
      }
      if (other.isModulationEnabled_ != null) {
        if (isModulationEnabled_ == null || other.IsModulationEnabled != false) {
          IsModulationEnabled = other.IsModulationEnabled;
        }
      }
      if (other.isCarrierEnabled_ != null) {
        if (isCarrierEnabled_ == null || other.IsCarrierEnabled != false) {
          IsCarrierEnabled = other.IsCarrierEnabled;
        }
      }
      if (other.isIfSweepEnabled_ != null) {
        if (isIfSweepEnabled_ == null || other.IsIfSweepEnabled != false) {
          IsIfSweepEnabled = other.IsIfSweepEnabled;
        }
      }
      if (other.isIdlePatternEnabled_ != null) {
        if (isIdlePatternEnabled_ == null || other.IsIdlePatternEnabled != false) {
          IsIdlePatternEnabled = other.IsIdlePatternEnabled;
        }
      }
      if (other.bitrate_ != null) {
        if (bitrate_ == null || other.Bitrate != 0F) {
          Bitrate = other.Bitrate;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 17: {
            CarrierLevelDbm = input.ReadDouble();
            break;
          }
          case 26: {
            bool? value = _single_isModulationEnabled_codec.Read(input);
            if (isModulationEnabled_ == null || value != false) {
              IsModulationEnabled = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_isCarrierEnabled_codec.Read(input);
            if (isCarrierEnabled_ == null || value != false) {
              IsCarrierEnabled = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_isIfSweepEnabled_codec.Read(input);
            if (isIfSweepEnabled_ == null || value != false) {
              IsIfSweepEnabled = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_isIdlePatternEnabled_codec.Read(input);
            if (isIdlePatternEnabled_ == null || value != false) {
              IsIdlePatternEnabled = value;
            }
            break;
          }
          case 58: {
            float? value = _single_bitrate_codec.Read(input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 17: {
            CarrierLevelDbm = input.ReadDouble();
            break;
          }
          case 26: {
            bool? value = _single_isModulationEnabled_codec.Read(ref input);
            if (isModulationEnabled_ == null || value != false) {
              IsModulationEnabled = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_isCarrierEnabled_codec.Read(ref input);
            if (isCarrierEnabled_ == null || value != false) {
              IsCarrierEnabled = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_isIfSweepEnabled_codec.Read(ref input);
            if (isIfSweepEnabled_ == null || value != false) {
              IsIfSweepEnabled = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_isIdlePatternEnabled_codec.Read(ref input);
            if (isIdlePatternEnabled_ == null || value != false) {
              IsIdlePatternEnabled = value;
            }
            break;
          }
          case 58: {
            float? value = _single_bitrate_codec.Read(ref input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The status of Reed-Solomon coding.
  /// </summary>
  public sealed partial class ReedSolomonStatus : pb::IMessage<ReedSolomonStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReedSolomonStatus> _parser = new pb::MessageParser<ReedSolomonStatus>(() => new ReedSolomonStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReedSolomonStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReedSolomonStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReedSolomonStatus(ReedSolomonStatus other) : this() {
      status_ = other.status_;
      numCorrectedSignals_ = other.numCorrectedSignals_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReedSolomonStatus Clone() {
      return new ReedSolomonStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status status_ = global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok;
    /// <summary>
    /// Current status of Reed-Solomon coding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "num_corrected_signals" field.</summary>
    public const int NumCorrectedSignalsFieldNumber = 2;
    private uint numCorrectedSignals_;
    /// <summary>
    /// The number of Reed-Solomon corrected signals. Only set is `status` == `OK`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumCorrectedSignals {
      get { return numCorrectedSignals_; }
      set {
        numCorrectedSignals_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReedSolomonStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReedSolomonStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (NumCorrectedSignals != other.NumCorrectedSignals) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok) hash ^= Status.GetHashCode();
      if (NumCorrectedSignals != 0) hash ^= NumCorrectedSignals.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (NumCorrectedSignals != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumCorrectedSignals);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (NumCorrectedSignals != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumCorrectedSignals);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (NumCorrectedSignals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCorrectedSignals);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReedSolomonStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status.Ok) {
        Status = other.Status;
      }
      if (other.NumCorrectedSignals != 0) {
        NumCorrectedSignals = other.NumCorrectedSignals;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 16: {
            NumCorrectedSignals = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 16: {
            NumCorrectedSignals = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ReedSolomonStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        /// <summary>
        /// Indicates Reed-Solomon coding is functioning.
        /// </summary>
        [pbr::OriginalName("OK")] Ok = 0,
        /// <summary>
        /// Indicates Reed-Solomon coding encountered an interleave error.
        /// </summary>
        [pbr::OriginalName("INTERLEAVE_ERROR")] InterleaveError = 1,
        /// <summary>
        /// Indicates Reed-Solomon coding exceeded its correction capacity.
        /// </summary>
        [pbr::OriginalName("CORRECTION_CAPACITY_EXCEEDED")] CorrectionCapacityExceeded = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The current state of the ground station's receiver during the operation of a pass.
  /// Next ID: 11
  /// </summary>
  public sealed partial class ReceiverState : pb::IMessage<ReceiverState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiverState> _parser = new pb::MessageParser<ReceiverState>(() => new ReceiverState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiverState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverState(ReceiverState other) : this() {
      centerFrequencyHz_ = other.centerFrequencyHz_;
      carrierLevelDbm_ = other.carrierLevelDbm_;
      isPhaseLocked_ = other.isPhaseLocked_;
      isBitSynchronizerLocked_ = other.isBitSynchronizerLocked_;
      normalizedSnr_ = other.normalizedSnr_;
      isFrameSynchronizerLocked_ = other.isFrameSynchronizerLocked_;
      convolutionalCodingStatus_ = other.convolutionalCodingStatus_;
      convolutionalCodingBitErrorRate_ = other.convolutionalCodingBitErrorRate_;
      reedSolomonStatus_ = other.reedSolomonStatus_ != null ? other.reedSolomonStatus_.Clone() : null;
      Bitrate = other.Bitrate;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiverState Clone() {
      return new ReceiverState(this);
    }

    /// <summary>Field number for the "center_frequency_hz" field.</summary>
    public const int CenterFrequencyHzFieldNumber = 1;
    private ulong centerFrequencyHz_;
    /// <summary>
    /// The current center frequency of the receiver, taking into account e.g., Doppler correction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CenterFrequencyHz {
      get { return centerFrequencyHz_; }
      set {
        centerFrequencyHz_ = value;
      }
    }

    /// <summary>Field number for the "carrier_level_dbm" field.</summary>
    public const int CarrierLevelDbmFieldNumber = 2;
    private double carrierLevelDbm_;
    /// <summary>
    /// The current level of the carrier signal, in dBm (decibal-milliwatts).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CarrierLevelDbm {
      get { return carrierLevelDbm_; }
      set {
        carrierLevelDbm_ = value;
      }
    }

    /// <summary>Field number for the "is_phase_locked" field.</summary>
    public const int IsPhaseLockedFieldNumber = 3;
    private bool isPhaseLocked_;
    /// <summary>
    /// Whether the receiver is phase-locked onto a signal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPhaseLocked {
      get { return isPhaseLocked_; }
      set {
        isPhaseLocked_ = value;
      }
    }

    /// <summary>Field number for the "is_bit_synchronizer_locked" field.</summary>
    public const int IsBitSynchronizerLockedFieldNumber = 4;
    private bool isBitSynchronizerLocked_;
    /// <summary>
    /// Whether the bit synchronizer is locked onto a signal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBitSynchronizerLocked {
      get { return isBitSynchronizerLocked_; }
      set {
        isBitSynchronizerLocked_ = value;
      }
    }

    /// <summary>Field number for the "normalized_snr" field.</summary>
    public const int NormalizedSnrFieldNumber = 5;
    private double normalizedSnr_;
    /// <summary>
    /// The signal-to-noise ratio per bit, e.g., Eb/N0.
    /// https://en.wikipedia.org/wiki/Eb/N0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NormalizedSnr {
      get { return normalizedSnr_; }
      set {
        normalizedSnr_ = value;
      }
    }

    /// <summary>Field number for the "is_frame_synchronizer_locked" field.</summary>
    public const int IsFrameSynchronizerLockedFieldNumber = 6;
    private bool isFrameSynchronizerLocked_;
    /// <summary>
    /// Whether the frame synchronizer is locked onto a signal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFrameSynchronizerLocked {
      get { return isFrameSynchronizerLocked_; }
      set {
        isFrameSynchronizerLocked_ = value;
      }
    }

    /// <summary>Field number for the "convolutional_coding_status" field.</summary>
    public const int ConvolutionalCodingStatusFieldNumber = 7;
    private global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus convolutionalCodingStatus_ = global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked;
    /// <summary>
    /// The current status of convolutional coding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus ConvolutionalCodingStatus {
      get { return convolutionalCodingStatus_; }
      set {
        convolutionalCodingStatus_ = value;
      }
    }

    /// <summary>Field number for the "convolutional_coding_bit_error_rate" field.</summary>
    public const int ConvolutionalCodingBitErrorRateFieldNumber = 8;
    private double convolutionalCodingBitErrorRate_;
    /// <summary>
    /// The bit error rate of convolutional coding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConvolutionalCodingBitErrorRate {
      get { return convolutionalCodingBitErrorRate_; }
      set {
        convolutionalCodingBitErrorRate_ = value;
      }
    }

    /// <summary>Field number for the "reed_solomon_status" field.</summary>
    public const int ReedSolomonStatusFieldNumber = 9;
    private global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus reedSolomonStatus_;
    /// <summary>
    /// The status of Reed-Solomon coding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus ReedSolomonStatus {
      get { return reedSolomonStatus_; }
      set {
        reedSolomonStatus_ = value;
      }
    }

    /// <summary>Field number for the "bitrate" field.</summary>
    public const int BitrateFieldNumber = 10;
    private static readonly pb::FieldCodec<float?> _single_bitrate_codec = pb::FieldCodec.ForStructWrapper<float>(82);
    private float? bitrate_;
    /// <summary>
    /// The current bitrate of the receiver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Bitrate {
      get { return bitrate_; }
      set {
        bitrate_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiverState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiverState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CenterFrequencyHz != other.CenterFrequencyHz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CarrierLevelDbm, other.CarrierLevelDbm)) return false;
      if (IsPhaseLocked != other.IsPhaseLocked) return false;
      if (IsBitSynchronizerLocked != other.IsBitSynchronizerLocked) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NormalizedSnr, other.NormalizedSnr)) return false;
      if (IsFrameSynchronizerLocked != other.IsFrameSynchronizerLocked) return false;
      if (ConvolutionalCodingStatus != other.ConvolutionalCodingStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConvolutionalCodingBitErrorRate, other.ConvolutionalCodingBitErrorRate)) return false;
      if (!object.Equals(ReedSolomonStatus, other.ReedSolomonStatus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Bitrate, other.Bitrate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CenterFrequencyHz != 0UL) hash ^= CenterFrequencyHz.GetHashCode();
      if (CarrierLevelDbm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CarrierLevelDbm);
      if (IsPhaseLocked != false) hash ^= IsPhaseLocked.GetHashCode();
      if (IsBitSynchronizerLocked != false) hash ^= IsBitSynchronizerLocked.GetHashCode();
      if (NormalizedSnr != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NormalizedSnr);
      if (IsFrameSynchronizerLocked != false) hash ^= IsFrameSynchronizerLocked.GetHashCode();
      if (ConvolutionalCodingStatus != global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked) hash ^= ConvolutionalCodingStatus.GetHashCode();
      if (ConvolutionalCodingBitErrorRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConvolutionalCodingBitErrorRate);
      if (reedSolomonStatus_ != null) hash ^= ReedSolomonStatus.GetHashCode();
      if (bitrate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Bitrate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CarrierLevelDbm);
      }
      if (IsPhaseLocked != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPhaseLocked);
      }
      if (IsBitSynchronizerLocked != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsBitSynchronizerLocked);
      }
      if (NormalizedSnr != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NormalizedSnr);
      }
      if (IsFrameSynchronizerLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFrameSynchronizerLocked);
      }
      if (ConvolutionalCodingStatus != global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ConvolutionalCodingStatus);
      }
      if (ConvolutionalCodingBitErrorRate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ConvolutionalCodingBitErrorRate);
      }
      if (reedSolomonStatus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReedSolomonStatus);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CenterFrequencyHz != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CarrierLevelDbm);
      }
      if (IsPhaseLocked != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPhaseLocked);
      }
      if (IsBitSynchronizerLocked != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsBitSynchronizerLocked);
      }
      if (NormalizedSnr != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NormalizedSnr);
      }
      if (IsFrameSynchronizerLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFrameSynchronizerLocked);
      }
      if (ConvolutionalCodingStatus != global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ConvolutionalCodingStatus);
      }
      if (ConvolutionalCodingBitErrorRate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ConvolutionalCodingBitErrorRate);
      }
      if (reedSolomonStatus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReedSolomonStatus);
      }
      if (bitrate_ != null) {
        _single_bitrate_codec.WriteTagAndValue(ref output, Bitrate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CenterFrequencyHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CenterFrequencyHz);
      }
      if (CarrierLevelDbm != 0D) {
        size += 1 + 8;
      }
      if (IsPhaseLocked != false) {
        size += 1 + 1;
      }
      if (IsBitSynchronizerLocked != false) {
        size += 1 + 1;
      }
      if (NormalizedSnr != 0D) {
        size += 1 + 8;
      }
      if (IsFrameSynchronizerLocked != false) {
        size += 1 + 1;
      }
      if (ConvolutionalCodingStatus != global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConvolutionalCodingStatus);
      }
      if (ConvolutionalCodingBitErrorRate != 0D) {
        size += 1 + 8;
      }
      if (reedSolomonStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReedSolomonStatus);
      }
      if (bitrate_ != null) {
        size += _single_bitrate_codec.CalculateSizeWithTag(Bitrate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiverState other) {
      if (other == null) {
        return;
      }
      if (other.CenterFrequencyHz != 0UL) {
        CenterFrequencyHz = other.CenterFrequencyHz;
      }
      if (other.CarrierLevelDbm != 0D) {
        CarrierLevelDbm = other.CarrierLevelDbm;
      }
      if (other.IsPhaseLocked != false) {
        IsPhaseLocked = other.IsPhaseLocked;
      }
      if (other.IsBitSynchronizerLocked != false) {
        IsBitSynchronizerLocked = other.IsBitSynchronizerLocked;
      }
      if (other.NormalizedSnr != 0D) {
        NormalizedSnr = other.NormalizedSnr;
      }
      if (other.IsFrameSynchronizerLocked != false) {
        IsFrameSynchronizerLocked = other.IsFrameSynchronizerLocked;
      }
      if (other.ConvolutionalCodingStatus != global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus.Unlocked) {
        ConvolutionalCodingStatus = other.ConvolutionalCodingStatus;
      }
      if (other.ConvolutionalCodingBitErrorRate != 0D) {
        ConvolutionalCodingBitErrorRate = other.ConvolutionalCodingBitErrorRate;
      }
      if (other.reedSolomonStatus_ != null) {
        if (reedSolomonStatus_ == null) {
          ReedSolomonStatus = new global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus();
        }
        ReedSolomonStatus.MergeFrom(other.ReedSolomonStatus);
      }
      if (other.bitrate_ != null) {
        if (bitrate_ == null || other.Bitrate != 0F) {
          Bitrate = other.Bitrate;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 17: {
            CarrierLevelDbm = input.ReadDouble();
            break;
          }
          case 24: {
            IsPhaseLocked = input.ReadBool();
            break;
          }
          case 32: {
            IsBitSynchronizerLocked = input.ReadBool();
            break;
          }
          case 41: {
            NormalizedSnr = input.ReadDouble();
            break;
          }
          case 48: {
            IsFrameSynchronizerLocked = input.ReadBool();
            break;
          }
          case 56: {
            ConvolutionalCodingStatus = (global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus) input.ReadEnum();
            break;
          }
          case 65: {
            ConvolutionalCodingBitErrorRate = input.ReadDouble();
            break;
          }
          case 74: {
            if (reedSolomonStatus_ == null) {
              ReedSolomonStatus = new global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus();
            }
            input.ReadMessage(ReedSolomonStatus);
            break;
          }
          case 82: {
            float? value = _single_bitrate_codec.Read(input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CenterFrequencyHz = input.ReadUInt64();
            break;
          }
          case 17: {
            CarrierLevelDbm = input.ReadDouble();
            break;
          }
          case 24: {
            IsPhaseLocked = input.ReadBool();
            break;
          }
          case 32: {
            IsBitSynchronizerLocked = input.ReadBool();
            break;
          }
          case 41: {
            NormalizedSnr = input.ReadDouble();
            break;
          }
          case 48: {
            IsFrameSynchronizerLocked = input.ReadBool();
            break;
          }
          case 56: {
            ConvolutionalCodingStatus = (global::Stellarstation.Api.V1.Monitoring.ConvolutionalCodingStatus) input.ReadEnum();
            break;
          }
          case 65: {
            ConvolutionalCodingBitErrorRate = input.ReadDouble();
            break;
          }
          case 74: {
            if (reedSolomonStatus_ == null) {
              ReedSolomonStatus = new global::Stellarstation.Api.V1.Monitoring.ReedSolomonStatus();
            }
            input.ReadMessage(ReedSolomonStatus);
            break;
          }
          case 82: {
            float? value = _single_bitrate_codec.Read(ref input);
            if (bitrate_ == null || value != 0F) {
              Bitrate = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The current state of the ground station's antenna during the operation of a pass.
  /// </summary>
  public sealed partial class AntennaState : pb::IMessage<AntennaState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AntennaState> _parser = new pb::MessageParser<AntennaState>(() => new AntennaState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AntennaState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaState(AntennaState other) : this() {
      azimuth_ = other.azimuth_ != null ? other.azimuth_.Clone() : null;
      elevation_ = other.elevation_ != null ? other.elevation_.Clone() : null;
      polarization_ = other.polarization_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AntennaState Clone() {
      return new AntennaState(this);
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 1;
    private global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle azimuth_;
    /// <summary>
    /// The current state of the antenna's azimuth (horizontal angle).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle Azimuth {
      get { return azimuth_; }
      set {
        azimuth_ = value;
      }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 2;
    private global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle elevation_;
    /// <summary>
    /// The current state of the antenna's elevation (vertical angle).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle Elevation {
      get { return elevation_; }
      set {
        elevation_ = value;
      }
    }

    /// <summary>Field number for the "polarization" field.</summary>
    public const int PolarizationFieldNumber = 3;
    private global::Stellarstation.Api.V1.Antenna.AntennaPolarization polarization_ = global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal;
    /// <summary>
    /// The current polarization of the antenna.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Antenna.AntennaPolarization Polarization {
      get { return polarization_; }
      set {
        polarization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AntennaState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AntennaState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Azimuth, other.Azimuth)) return false;
      if (!object.Equals(Elevation, other.Elevation)) return false;
      if (Polarization != other.Polarization) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (azimuth_ != null) hash ^= Azimuth.GetHashCode();
      if (elevation_ != null) hash ^= Elevation.GetHashCode();
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) hash ^= Polarization.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (azimuth_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Azimuth);
      }
      if (elevation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Elevation);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Polarization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (azimuth_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Azimuth);
      }
      if (elevation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Elevation);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Polarization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (azimuth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Azimuth);
      }
      if (elevation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Elevation);
      }
      if (Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Polarization);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AntennaState other) {
      if (other == null) {
        return;
      }
      if (other.azimuth_ != null) {
        if (azimuth_ == null) {
          Azimuth = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
        }
        Azimuth.MergeFrom(other.Azimuth);
      }
      if (other.elevation_ != null) {
        if (elevation_ == null) {
          Elevation = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
        }
        Elevation.MergeFrom(other.Elevation);
      }
      if (other.Polarization != global::Stellarstation.Api.V1.Antenna.AntennaPolarization.Horizontal) {
        Polarization = other.Polarization;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (azimuth_ == null) {
              Azimuth = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
            }
            input.ReadMessage(Azimuth);
            break;
          }
          case 18: {
            if (elevation_ == null) {
              Elevation = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
            }
            input.ReadMessage(Elevation);
            break;
          }
          case 24: {
            Polarization = (global::Stellarstation.Api.V1.Antenna.AntennaPolarization) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (azimuth_ == null) {
              Azimuth = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
            }
            input.ReadMessage(Azimuth);
            break;
          }
          case 18: {
            if (elevation_ == null) {
              Elevation = new global::Stellarstation.Api.V1.Monitoring.AntennaState.Types.Angle();
            }
            input.ReadMessage(Elevation);
            break;
          }
          case 24: {
            Polarization = (global::Stellarstation.Api.V1.Antenna.AntennaPolarization) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AntennaState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The state of an antenna angle.
      /// </summary>
      public sealed partial class Angle : pb::IMessage<Angle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Angle> _parser = new pb::MessageParser<Angle>(() => new Angle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Angle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Stellarstation.Api.V1.Monitoring.AntennaState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Angle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Angle(Angle other) : this() {
          command_ = other.command_;
          measured_ = other.measured_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Angle Clone() {
          return new Angle(this);
        }

        /// <summary>Field number for the "command" field.</summary>
        public const int CommandFieldNumber = 1;
        private double command_;
        /// <summary>
        /// The angle that was specified for the antenna. When the antenna is functioning properly,
        /// there should be nearly no difference between this and `measured`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Command {
          get { return command_; }
          set {
            command_ = value;
          }
        }

        /// <summary>Field number for the "measured" field.</summary>
        public const int MeasuredFieldNumber = 2;
        private double measured_;
        /// <summary>
        /// The actual angle physically measured from the antenna. When the antenna is functioning
        /// properly, there should be nearly no difference between this and `command`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Measured {
          get { return measured_; }
          set {
            measured_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Angle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Angle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Command, other.Command)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Measured, other.Measured)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Command != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Command);
          if (Measured != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Measured);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Command != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Command);
          }
          if (Measured != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Measured);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Command != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Command);
          }
          if (Measured != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Measured);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Command != 0D) {
            size += 1 + 8;
          }
          if (Measured != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Angle other) {
          if (other == null) {
            return;
          }
          if (other.Command != 0D) {
            Command = other.Command;
          }
          if (other.Measured != 0D) {
            Measured = other.Measured;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Command = input.ReadDouble();
                break;
              }
              case 17: {
                Measured = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Command = input.ReadDouble();
                break;
              }
              case 17: {
                Measured = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// The current state of a ground station during the operation of a pass.
  ///
  /// State that can be monitored will vary by the specifications of the ground station that executes
  /// the pass. Any information that cannot be monitored for the current ground station will not be
  /// filled.
  /// </summary>
  public sealed partial class GroundStationState : pb::IMessage<GroundStationState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroundStationState> _parser = new pb::MessageParser<GroundStationState>(() => new GroundStationState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroundStationState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationState(GroundStationState other) : this() {
      transmitter_ = other.transmitter_ != null ? other.transmitter_.Clone() : null;
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      antenna_ = other.antenna_ != null ? other.antenna_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationState Clone() {
      return new GroundStationState(this);
    }

    /// <summary>Field number for the "transmitter" field.</summary>
    public const int TransmitterFieldNumber = 1;
    private global::Stellarstation.Api.V1.Monitoring.TransmitterState transmitter_;
    /// <summary>
    /// The current state of the transmitter in use during a pass. When debugging issues with data
    /// transmission (e.g., no response from a satellite), it can be good to verify the metrics for
    /// the transmitter are within expected or acceptable values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.TransmitterState Transmitter {
      get { return transmitter_; }
      set {
        transmitter_ = value;
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::Stellarstation.Api.V1.Monitoring.ReceiverState receiver_;
    /// <summary>
    /// The current state of the receiver in use during a pass. When debugging issues with data
    /// reception (e.g., can't decode signal), it can be good to verify the metrics for the receiver
    /// are within expected or acceptable values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.ReceiverState Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "antenna" field.</summary>
    public const int AntennaFieldNumber = 3;
    private global::Stellarstation.Api.V1.Monitoring.AntennaState antenna_;
    /// <summary>
    /// The current state of the antenna being used for the pass. When debugging issues with tracking
    /// a satellite (e.g., getting no signal at all), it can be useful to ensure the physically
    /// measured values are within expected or acceptable values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.AntennaState Antenna {
      get { return antenna_; }
      set {
        antenna_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroundStationState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroundStationState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transmitter, other.Transmitter)) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (!object.Equals(Antenna, other.Antenna)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transmitter_ != null) hash ^= Transmitter.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (antenna_ != null) hash ^= Antenna.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (transmitter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transmitter);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (antenna_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Antenna);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (transmitter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transmitter);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (antenna_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Antenna);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transmitter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transmitter);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (antenna_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Antenna);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroundStationState other) {
      if (other == null) {
        return;
      }
      if (other.transmitter_ != null) {
        if (transmitter_ == null) {
          Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterState();
        }
        Transmitter.MergeFrom(other.Transmitter);
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverState();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      if (other.antenna_ != null) {
        if (antenna_ == null) {
          Antenna = new global::Stellarstation.Api.V1.Monitoring.AntennaState();
        }
        Antenna.MergeFrom(other.Antenna);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transmitter_ == null) {
              Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterState();
            }
            input.ReadMessage(Transmitter);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverState();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 26: {
            if (antenna_ == null) {
              Antenna = new global::Stellarstation.Api.V1.Monitoring.AntennaState();
            }
            input.ReadMessage(Antenna);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (transmitter_ == null) {
              Transmitter = new global::Stellarstation.Api.V1.Monitoring.TransmitterState();
            }
            input.ReadMessage(Transmitter);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::Stellarstation.Api.V1.Monitoring.ReceiverState();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 26: {
            if (antenna_ == null) {
              Antenna = new global::Stellarstation.Api.V1.Monitoring.AntennaState();
            }
            input.ReadMessage(Antenna);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An event that describes the status of the plan being executed by the ground station.
  /// </summary>
  public sealed partial class PlanLifecycleEvent : pb::IMessage<PlanLifecycleEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlanLifecycleEvent> _parser = new pb::MessageParser<PlanLifecycleEvent>(() => new PlanLifecycleEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanLifecycleEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanLifecycleEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanLifecycleEvent(PlanLifecycleEvent other) : this() {
      status_ = other.status_;
      switch (other.DetailsCase) {
        case DetailsOneofCase.Failure:
          Failure = other.Failure.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanLifecycleEvent Clone() {
      return new PlanLifecycleEvent(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status status_ = global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown;
    /// <summary>
    /// The status of the plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 2;
    /// <summary>
    /// The details about the cause of a failure if status is FAILED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails Failure {
      get { return detailsCase_ == DetailsOneofCase.Failure ? (global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Failure;
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "Details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      Failure = 2,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanLifecycleEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanLifecycleEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown) hash ^= Status.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Failure) hash ^= Failure.GetHashCode();
      hash ^= (int) detailsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (detailsCase_ == DetailsOneofCase.Failure) {
        output.WriteRawTag(18);
        output.WriteMessage(Failure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (detailsCase_ == DetailsOneofCase.Failure) {
        output.WriteRawTag(18);
        output.WriteMessage(Failure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (detailsCase_ == DetailsOneofCase.Failure) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanLifecycleEvent other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status.Unknown) {
        Status = other.Status;
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.Failure:
          if (Failure == null) {
            Failure = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails();
          }
          Failure.MergeFrom(other.Failure);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails subBuilder = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails();
            if (detailsCase_ == DetailsOneofCase.Failure) {
              subBuilder.MergeFrom(Failure);
            }
            input.ReadMessage(subBuilder);
            Failure = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails subBuilder = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails();
            if (detailsCase_ == DetailsOneofCase.Failure) {
              subBuilder.MergeFrom(Failure);
            }
            input.ReadMessage(subBuilder);
            Failure = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlanLifecycleEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A description of the plan status.
      /// </summary>
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Plan preparation has started. This status is sent when the ground station starts preparing
        /// for plan execution.
        /// </summary>
        [pbr::OriginalName("PREPARING")] Preparing = 1,
        /// <summary>
        /// Plan execution has started. This status is sent when passing the AOS time of the plan.
        /// </summary>
        [pbr::OriginalName("EXECUTING")] Executing = 2,
        /// <summary>
        /// Plan execution is complete. This status is sent when the ground station has finished
        /// executing the plan and uploading all data.
        /// </summary>
        [pbr::OriginalName("COMPLETED")] Completed = 3,
        /// <summary>
        /// Plan execution failed. This status is sent when the plan cannot be completed for some
        /// reason.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 4,
      }

      /// <summary>
      /// If a plan fails, this message describes the cause of the failure.
      /// </summary>
      public sealed partial class FailureDetails : pb::IMessage<FailureDetails>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FailureDetails> _parser = new pb::MessageParser<FailureDetails>(() => new FailureDetails());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FailureDetails> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureDetails() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureDetails(FailureDetails other) : this() {
          cause_ = other.cause_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureDetails Clone() {
          return new FailureDetails(this);
        }

        /// <summary>Field number for the "cause" field.</summary>
        public const int CauseFieldNumber = 1;
        private global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause cause_ = global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown;
        /// <summary>
        /// The cause of the failure.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause Cause {
          get { return cause_; }
          set {
            cause_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FailureDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FailureDetails other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Cause != other.Cause) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Cause != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown) hash ^= Cause.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Cause != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Cause);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Cause != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Cause);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Cause != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cause);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FailureDetails other) {
          if (other == null) {
            return;
          }
          if (other.Cause != global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause.Unknown) {
            Cause = other.Cause;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Cause = (global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Cause = (global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent.Types.FailureDetails.Types.Cause) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the FailureDetails message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A description of the cause of the failure.
          /// </summary>
          public enum Cause {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Events generated by a ground station during the operation of a pass.
  ///
  /// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
  ///         incompatible ways in the future.
  /// </summary>
  public sealed partial class GroundStationEvent : pb::IMessage<GroundStationEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroundStationEvent> _parser = new pb::MessageParser<GroundStationEvent>(() => new GroundStationEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroundStationEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stellarstation.Api.V1.Monitoring.MonitoringReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationEvent(GroundStationEvent other) : this() {
      plan_ = other.plan_ != null ? other.plan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundStationEvent Clone() {
      return new GroundStationEvent(this);
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 4;
    private global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent plan_;
    /// <summary>
    /// An event related to the plan being executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroundStationEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroundStationEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Plan, other.Plan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (plan_ != null) hash ^= Plan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (plan_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (plan_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Plan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroundStationEvent other) {
      if (other == null) {
        return;
      }
      if (other.plan_ != null) {
        if (plan_ == null) {
          Plan = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent();
        }
        Plan.MergeFrom(other.Plan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 34: {
            if (plan_ == null) {
              Plan = new global::Stellarstation.Api.V1.Monitoring.PlanLifecycleEvent();
            }
            input.ReadMessage(Plan);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
